{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"examples/default/getting-started/","title":"Getting started","text":"SLO spec Generated <pre><code>version: \"prometheus/v1\"\nservice: \"myservice\"\nlabels:\n  owner: \"myteam\"\n  repo: \"myorg/myservice\"\n  tier: \"2\"\nslos:\n  # We allow failing (5xx and 429) 1 request every 1000 requests (99.9%).\n  - name: \"requests-availability\"\n    objective: 99.9\n    description: \"Common SLO based on availability for HTTP request responses.\"\n    sli:\n      events:\n        error_query: sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[{{.window}}]))\n        total_query: sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[{{.window}}]))\n    alerting:\n      name: MyServiceHighErrorRate\n      labels:\n        category: \"availability\"\n      annotations:\n        # Overwrite default Sloth SLO alert summmary on ticket and page alerts.\n        summary: \"High error rate on 'myservice' requests responses\"\n      page_alert:\n        labels:\n          severity: pageteam\n          routing_key: myteam\n      ticket_alert:\n        labels:\n          severity: \"slack\"\n          slack_channel: \"#alerts-myteam\"\n</code></pre> <pre><code>---\n# Code generated by Sloth (dev): https://github.com/slok/sloth.\n# DO NOT EDIT.\n\ngroups:\n- name: sloth-slo-sli-recordings-myservice-requests-availability\n  rules:\n  - record: slo:sli_error:ratio_rate5m\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[5m])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[5m])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 5m\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate30m\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[30m])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[30m])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 30m\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate1h\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[1h])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1h])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 1h\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate2h\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[2h])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[2h])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 2h\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate6h\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[6h])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[6h])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 6h\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate1d\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[1d])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1d])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 1d\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate3d\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[3d])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[3d])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 3d\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate30d\n    expr: |\n      sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}[30d])\n      / ignoring (sloth_window)\n      count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}[30d])\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 30d\n      tier: \"2\"\n- name: sloth-slo-meta-recordings-myservice-requests-availability\n  rules:\n  - record: slo:objective:ratio\n    expr: vector(0.9990000000000001)\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      tier: \"2\"\n  - record: slo:error_budget:ratio\n    expr: vector(1-0.9990000000000001)\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      tier: \"2\"\n  - record: slo:time_period:days\n    expr: vector(30)\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      tier: \"2\"\n  - record: slo:current_burn_rate:ratio\n    expr: |\n      slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n      / on(sloth_id, sloth_slo, sloth_service) group_left\n      slo:error_budget:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      tier: \"2\"\n  - record: slo:period_burn_rate:ratio\n    expr: |\n      slo:sli_error:ratio_rate30d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n      / on(sloth_id, sloth_slo, sloth_service) group_left\n      slo:error_budget:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      tier: \"2\"\n  - record: slo:period_error_budget_remaining:ratio\n    expr: 1 - slo:period_burn_rate:ratio{sloth_id=\"myservice-requests-availability\",\n      sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      tier: \"2\"\n  - record: sloth_slo_info\n    expr: vector(1)\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_mode: cli-gen-prom\n      sloth_objective: \"99.9\"\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_spec: prometheus/v1\n      sloth_version: dev\n      tier: \"2\"\n- name: sloth-slo-alerts-myservice-requests-availability\n  rules:\n  - alert: MyServiceHighErrorRate\n    expr: |\n      (\n          max(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (14.4 * 0.0009999999999999432)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate1h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (14.4 * 0.0009999999999999432)) without (sloth_window)\n      )\n      or\n      (\n          max(slo:sli_error:ratio_rate30m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (6 * 0.0009999999999999432)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate6h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (6 * 0.0009999999999999432)) without (sloth_window)\n      )\n    labels:\n      category: availability\n      routing_key: myteam\n      severity: pageteam\n      sloth_severity: page\n    annotations:\n      summary: High error rate on 'myservice' requests responses\n      title: (page) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget\n        burn rate is too fast.\n  - alert: MyServiceHighErrorRate\n    expr: |\n      (\n          max(slo:sli_error:ratio_rate2h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (3 * 0.0009999999999999432)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate1d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (3 * 0.0009999999999999432)) without (sloth_window)\n      )\n      or\n      (\n          max(slo:sli_error:ratio_rate6h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (1 * 0.0009999999999999432)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate3d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (1 * 0.0009999999999999432)) without (sloth_window)\n      )\n    labels:\n      category: availability\n      severity: slack\n      slack_channel: '#alerts-myteam'\n      sloth_severity: ticket\n    annotations:\n      summary: High error rate on 'myservice' requests responses\n      title: (ticket) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget\n        burn rate is too fast.\n</code></pre>"},{"location":"examples/default/home-wifi/","title":"Home WiFi","text":"SLO spec Generated <pre><code># This example shows a real service level used in my home to have SLOs on my wifi signal.\n# The metrics are extracted using unifi-poller (https://github.com/unifi-poller/unifi-poller)\n# that gets the information from an Ubiquiti Wifi installation.\n# https://community.ui.com/questions/satisfaction-percentage-in-client-properties-overview/8c940637-63d0-41de-a67b-8166cdd0ed32\n#\n# The service level has 2 SLOs based on `client_satisfaction_ratio`, this is a ratio calculated\n# by ubiquiti that is based on wifi drop packages, wifi signal...\n# We conside an SLI event the client satisfactions that currently exist, lets review the SLOs\n#\n# - `good-wifi-client-satisfaction`\n#   - This SLO warn us that we don't have a good wifi at home.\n#   - SLI error: We consider a bad client satisfaction (event) below 75% (0.75)\n#   - SLO objective (95%): We are not so restrictive and we allow that that 5 of every 100 clients be below 75%\n#\n# - `risk-wifi-client-satisfaction`\n#   - This SLO warn us that we something very bad is happenning with our home wifi.\n#   - SLI error: We consider a bad client satisfaction (event) below 50% (0.5)\n#   - SLO objective(99.9%): We are very restrictive and we allow that that 1 of every 1000 clients be below 50%\n#\n# `sloth generate -i ./examples/home-wifi.yml`\n#\nversion: \"prometheus/v1\"\nservice: \"home-wifi\"\nlabels:\n  cluster: \"valhalla\"\n  component: \"ubiquiti\"\n  context: \"home\"\nslos:\n  - name: \"good-wifi-client-satisfaction\"\n    objective: 95\n    description: \"Will warn us that we don't have a good wifi at home.\"\n    sli:\n      events:\n        error_query: sum_over_time((count(unifipoller_client_satisfaction_ratio &lt; 0.75))[{{.window}}:]) OR on() vector(0)\n        total_query: sum_over_time((count(unifipoller_client_satisfaction_ratio))[{{.window}}:])\n    alerting:\n      name: GoodWifiClientSatisfaction\n      page_alert:\n        labels:\n          severity: home\n      ticket_alert:\n        labels:\n          severity: warning\n\n  - name: \"risk-wifi-client-satisfaction\"\n    objective: 99.9\n    description: \"Will warn us that we something very bad is happenning with our home wifi.\"\n    sli:\n      events:\n        error_query: sum_over_time((count(unifipoller_client_satisfaction_ratio &lt; 0.5))[{{.window}}:]) OR on() vector(0)\n        total_query: sum_over_time((count(unifipoller_client_satisfaction_ratio))[{{.window}}:])\n    alerting:\n      name: RiskWifiClientSatisfaction\n      page_alert:\n        labels:\n          severity: home\n      ticket_alert:\n        labels:\n          severity: warning\n</code></pre> <pre><code>---\n# Code generated by Sloth (dev): https://github.com/slok/sloth.\n# DO NOT EDIT.\n\ngroups:\n- name: sloth-slo-sli-recordings-home-wifi-good-wifi-client-satisfaction\n  rules:\n  - record: slo:sli_error:ratio_rate5m\n    expr: |\n      (sum_over_time((count(unifipoller_client_satisfaction_ratio &lt; 0.75))[5m:]) OR on() vector(0))\n      /\n      (sum_over_time((count(unifipoller_client_satisfaction_ratio))[5m:]))\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-good-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: good-wifi-client-satisfaction\n      sloth_window: 5m\n  - record: slo:sli_error:ratio_rate30m\n    expr: |\n      (sum_over_time((count(unifipoller_client_satisfaction_ratio &lt; 0.75))[30m:]) OR on() vector(0))\n      /\n      (sum_over_time((count(unifipoller_client_satisfaction_ratio))[30m:]))\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-good-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: good-wifi-client-satisfaction\n      sloth_window: 30m\n  - record: slo:sli_error:ratio_rate1h\n    expr: |\n      (sum_over_time((count(unifipoller_client_satisfaction_ratio &lt; 0.75))[1h:]) OR on() vector(0))\n      /\n      (sum_over_time((count(unifipoller_client_satisfaction_ratio))[1h:]))\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-good-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: good-wifi-client-satisfaction\n      sloth_window: 1h\n  - record: slo:sli_error:ratio_rate2h\n    expr: |\n      (sum_over_time((count(unifipoller_client_satisfaction_ratio &lt; 0.75))[2h:]) OR on() vector(0))\n      /\n      (sum_over_time((count(unifipoller_client_satisfaction_ratio))[2h:]))\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-good-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: good-wifi-client-satisfaction\n      sloth_window: 2h\n  - record: slo:sli_error:ratio_rate6h\n    expr: |\n      (sum_over_time((count(unifipoller_client_satisfaction_ratio &lt; 0.75))[6h:]) OR on() vector(0))\n      /\n      (sum_over_time((count(unifipoller_client_satisfaction_ratio))[6h:]))\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-good-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: good-wifi-client-satisfaction\n      sloth_window: 6h\n  - record: slo:sli_error:ratio_rate1d\n    expr: |\n      (sum_over_time((count(unifipoller_client_satisfaction_ratio &lt; 0.75))[1d:]) OR on() vector(0))\n      /\n      (sum_over_time((count(unifipoller_client_satisfaction_ratio))[1d:]))\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-good-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: good-wifi-client-satisfaction\n      sloth_window: 1d\n  - record: slo:sli_error:ratio_rate3d\n    expr: |\n      (sum_over_time((count(unifipoller_client_satisfaction_ratio &lt; 0.75))[3d:]) OR on() vector(0))\n      /\n      (sum_over_time((count(unifipoller_client_satisfaction_ratio))[3d:]))\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-good-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: good-wifi-client-satisfaction\n      sloth_window: 3d\n  - record: slo:sli_error:ratio_rate30d\n    expr: |\n      sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"}[30d])\n      / ignoring (sloth_window)\n      count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"}[30d])\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-good-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: good-wifi-client-satisfaction\n      sloth_window: 30d\n- name: sloth-slo-meta-recordings-home-wifi-good-wifi-client-satisfaction\n  rules:\n  - record: slo:objective:ratio\n    expr: vector(0.95)\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-good-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: good-wifi-client-satisfaction\n  - record: slo:error_budget:ratio\n    expr: vector(1-0.95)\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-good-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: good-wifi-client-satisfaction\n  - record: slo:time_period:days\n    expr: vector(30)\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-good-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: good-wifi-client-satisfaction\n  - record: slo:current_burn_rate:ratio\n    expr: |\n      slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"}\n      / on(sloth_id, sloth_slo, sloth_service) group_left\n      slo:error_budget:ratio{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"}\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-good-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: good-wifi-client-satisfaction\n  - record: slo:period_burn_rate:ratio\n    expr: |\n      slo:sli_error:ratio_rate30d{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"}\n      / on(sloth_id, sloth_slo, sloth_service) group_left\n      slo:error_budget:ratio{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"}\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-good-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: good-wifi-client-satisfaction\n  - record: slo:period_error_budget_remaining:ratio\n    expr: 1 - slo:period_burn_rate:ratio{sloth_id=\"home-wifi-good-wifi-client-satisfaction\",\n      sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"}\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-good-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: good-wifi-client-satisfaction\n  - record: sloth_slo_info\n    expr: vector(1)\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-good-wifi-client-satisfaction\n      sloth_mode: cli-gen-prom\n      sloth_objective: \"95\"\n      sloth_service: home-wifi\n      sloth_slo: good-wifi-client-satisfaction\n      sloth_spec: prometheus/v1\n      sloth_version: dev\n- name: sloth-slo-alerts-home-wifi-good-wifi-client-satisfaction\n  rules:\n  - alert: GoodWifiClientSatisfaction\n    expr: |\n      (\n          max(slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} &gt; (14.4 * 0.05)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate1h{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} &gt; (14.4 * 0.05)) without (sloth_window)\n      )\n      or\n      (\n          max(slo:sli_error:ratio_rate30m{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} &gt; (6 * 0.05)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate6h{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} &gt; (6 * 0.05)) without (sloth_window)\n      )\n    labels:\n      severity: home\n      sloth_severity: page\n    annotations:\n      summary: '{{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn\n        rate is over expected.'\n      title: (page) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget\n        burn rate is too fast.\n  - alert: GoodWifiClientSatisfaction\n    expr: |\n      (\n          max(slo:sli_error:ratio_rate2h{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} &gt; (3 * 0.05)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate1d{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} &gt; (3 * 0.05)) without (sloth_window)\n      )\n      or\n      (\n          max(slo:sli_error:ratio_rate6h{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} &gt; (1 * 0.05)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate3d{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} &gt; (1 * 0.05)) without (sloth_window)\n      )\n    labels:\n      severity: warning\n      sloth_severity: ticket\n    annotations:\n      summary: '{{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn\n        rate is over expected.'\n      title: (ticket) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget\n        burn rate is too fast.\n- name: sloth-slo-sli-recordings-home-wifi-risk-wifi-client-satisfaction\n  rules:\n  - record: slo:sli_error:ratio_rate5m\n    expr: |\n      (sum_over_time((count(unifipoller_client_satisfaction_ratio &lt; 0.5))[5m:]) OR on() vector(0))\n      /\n      (sum_over_time((count(unifipoller_client_satisfaction_ratio))[5m:]))\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-risk-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: risk-wifi-client-satisfaction\n      sloth_window: 5m\n  - record: slo:sli_error:ratio_rate30m\n    expr: |\n      (sum_over_time((count(unifipoller_client_satisfaction_ratio &lt; 0.5))[30m:]) OR on() vector(0))\n      /\n      (sum_over_time((count(unifipoller_client_satisfaction_ratio))[30m:]))\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-risk-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: risk-wifi-client-satisfaction\n      sloth_window: 30m\n  - record: slo:sli_error:ratio_rate1h\n    expr: |\n      (sum_over_time((count(unifipoller_client_satisfaction_ratio &lt; 0.5))[1h:]) OR on() vector(0))\n      /\n      (sum_over_time((count(unifipoller_client_satisfaction_ratio))[1h:]))\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-risk-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: risk-wifi-client-satisfaction\n      sloth_window: 1h\n  - record: slo:sli_error:ratio_rate2h\n    expr: |\n      (sum_over_time((count(unifipoller_client_satisfaction_ratio &lt; 0.5))[2h:]) OR on() vector(0))\n      /\n      (sum_over_time((count(unifipoller_client_satisfaction_ratio))[2h:]))\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-risk-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: risk-wifi-client-satisfaction\n      sloth_window: 2h\n  - record: slo:sli_error:ratio_rate6h\n    expr: |\n      (sum_over_time((count(unifipoller_client_satisfaction_ratio &lt; 0.5))[6h:]) OR on() vector(0))\n      /\n      (sum_over_time((count(unifipoller_client_satisfaction_ratio))[6h:]))\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-risk-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: risk-wifi-client-satisfaction\n      sloth_window: 6h\n  - record: slo:sli_error:ratio_rate1d\n    expr: |\n      (sum_over_time((count(unifipoller_client_satisfaction_ratio &lt; 0.5))[1d:]) OR on() vector(0))\n      /\n      (sum_over_time((count(unifipoller_client_satisfaction_ratio))[1d:]))\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-risk-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: risk-wifi-client-satisfaction\n      sloth_window: 1d\n  - record: slo:sli_error:ratio_rate3d\n    expr: |\n      (sum_over_time((count(unifipoller_client_satisfaction_ratio &lt; 0.5))[3d:]) OR on() vector(0))\n      /\n      (sum_over_time((count(unifipoller_client_satisfaction_ratio))[3d:]))\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-risk-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: risk-wifi-client-satisfaction\n      sloth_window: 3d\n  - record: slo:sli_error:ratio_rate30d\n    expr: |\n      sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"}[30d])\n      / ignoring (sloth_window)\n      count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"}[30d])\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-risk-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: risk-wifi-client-satisfaction\n      sloth_window: 30d\n- name: sloth-slo-meta-recordings-home-wifi-risk-wifi-client-satisfaction\n  rules:\n  - record: slo:objective:ratio\n    expr: vector(0.9990000000000001)\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-risk-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: risk-wifi-client-satisfaction\n  - record: slo:error_budget:ratio\n    expr: vector(1-0.9990000000000001)\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-risk-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: risk-wifi-client-satisfaction\n  - record: slo:time_period:days\n    expr: vector(30)\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-risk-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: risk-wifi-client-satisfaction\n  - record: slo:current_burn_rate:ratio\n    expr: |\n      slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"}\n      / on(sloth_id, sloth_slo, sloth_service) group_left\n      slo:error_budget:ratio{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"}\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-risk-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: risk-wifi-client-satisfaction\n  - record: slo:period_burn_rate:ratio\n    expr: |\n      slo:sli_error:ratio_rate30d{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"}\n      / on(sloth_id, sloth_slo, sloth_service) group_left\n      slo:error_budget:ratio{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"}\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-risk-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: risk-wifi-client-satisfaction\n  - record: slo:period_error_budget_remaining:ratio\n    expr: 1 - slo:period_burn_rate:ratio{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\",\n      sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"}\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-risk-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: risk-wifi-client-satisfaction\n  - record: sloth_slo_info\n    expr: vector(1)\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-risk-wifi-client-satisfaction\n      sloth_mode: cli-gen-prom\n      sloth_objective: \"99.9\"\n      sloth_service: home-wifi\n      sloth_slo: risk-wifi-client-satisfaction\n      sloth_spec: prometheus/v1\n      sloth_version: dev\n- name: sloth-slo-alerts-home-wifi-risk-wifi-client-satisfaction\n  rules:\n  - alert: RiskWifiClientSatisfaction\n    expr: |\n      (\n          max(slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} &gt; (14.4 * 0.0009999999999999432)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate1h{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} &gt; (14.4 * 0.0009999999999999432)) without (sloth_window)\n      )\n      or\n      (\n          max(slo:sli_error:ratio_rate30m{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} &gt; (6 * 0.0009999999999999432)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate6h{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} &gt; (6 * 0.0009999999999999432)) without (sloth_window)\n      )\n    labels:\n      severity: home\n      sloth_severity: page\n    annotations:\n      summary: '{{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn\n        rate is over expected.'\n      title: (page) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget\n        burn rate is too fast.\n  - alert: RiskWifiClientSatisfaction\n    expr: |\n      (\n          max(slo:sli_error:ratio_rate2h{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} &gt; (3 * 0.0009999999999999432)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate1d{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} &gt; (3 * 0.0009999999999999432)) without (sloth_window)\n      )\n      or\n      (\n          max(slo:sli_error:ratio_rate6h{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} &gt; (1 * 0.0009999999999999432)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate3d{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} &gt; (1 * 0.0009999999999999432)) without (sloth_window)\n      )\n    labels:\n      severity: warning\n      sloth_severity: ticket\n    annotations:\n      summary: '{{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn\n        rate is over expected.'\n      title: (ticket) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget\n        burn rate is too fast.\n</code></pre>"},{"location":"examples/default/kubernetes-apiserver/","title":"Kubernetes APIserver","text":"SLO spec Generated <pre><code># This example shows a real service level used for Kubernetes Apiserver.\n#\n# The service level has 2 SLOs based on Apiserver requests/responses.\n#\n# We consider an SLI event the the requests made to the server, lets review the SLOs\n#\n# - `requests-availability`\n#   - This SLO warn us that we are returning correctly the requests to the clients (kubectl users, controllers...).\n#   - SLI error: We consider a bad request (event) a request with the codes &gt;=500 or 429\n#   - SLO objective (99.9%): We are restrictive with this because we only allow failing a request every 1000.\n#\n# - `requests-latency`\n#   - This SLO warn us that we apiserver responses are being slow and this will affect the clients  (kubectl users, controllers...).\n#   - SLI error: We consider a bad request (event) when the response latency is &gt;400ms.\n#   - SLO objective(99%): We have a relaxed objective because Kubernetes has a lot of async and eventual consistency flows. We could\n#                         create in a future another SLO that is less restrictive and use the latency of the realtime requests (e.g: kubectl).\n#\n# `sloth generate -i ./examples/kubernetes-apiserver.yml`\n#\nversion: \"prometheus/v1\"\nservice: \"k8s-apiserver\"\nlabels:\n  cluster: \"valhalla\"\n  component: \"kubernetes\"\nslos:\n  - name: \"requests-availability\"\n    objective: 99.9\n    description: \"Warn that we are returning correctly the requests to the clients (kubectl users, controllers...).\"\n    labels:\n      category: availability\n    sli:\n      events:\n        error_query: sum(rate(apiserver_request_total{code=~\"(5..|429)\"}[{{.window}}]))\n        total_query: sum(rate(apiserver_request_total[{{.window}}]))\n    alerting:\n      name: K8sApiserverAvailabilityAlert\n      labels:\n        category: \"availability\"\n      annotations:\n        runbook: \"https://github.com/kubernetes-monitoring/kubernetes-mixin/tree/master/runbook.md#alert-name-kubeapierrorshigh\"\n      page_alert:\n        labels:\n          severity: critical\n      ticket_alert:\n        labels:\n          severity: warning\n\n  - name: \"requests-latency\"\n    objective: 99\n    description: \"Warn that we apiserver responses are being slow and this will affect the clients  (kubectl users, controllers...).\"\n    labels:\n      category: latency\n    sli:\n      events:\n        error_query: |\n          (\n            sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[{{.window}}]))\n            -\n            sum(rate(apiserver_request_duration_seconds_bucket{le=\"0.4\",verb!=\"WATCH\"}[{{.window}}]))\n          )\n        total_query: sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[{{.window}}]))\n    alerting:\n      name: K8sApiserverLatencyAlert\n      labels:\n        category: \"latency\"\n      annotations:\n        runbook: \"https://github.com/kubernetes-monitoring/kubernetes-mixin/tree/master/runbook.md#alert-name-kubeapilatencyhigh\"\n      page_alert:\n        labels:\n          severity: critical\n      ticket_alert:\n        labels:\n          severity: warning\n</code></pre> <pre><code>---\n# Code generated by Sloth (dev): https://github.com/slok/sloth.\n# DO NOT EDIT.\n\ngroups:\n- name: sloth-slo-sli-recordings-k8s-apiserver-requests-availability\n  rules:\n  - record: slo:sli_error:ratio_rate5m\n    expr: |\n      (sum(rate(apiserver_request_total{code=~\"(5..|429)\"}[5m])))\n      /\n      (sum(rate(apiserver_request_total[5m])))\n    labels:\n      category: availability\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: kubernetes\n      sloth_id: k8s-apiserver-requests-availability\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-availability\n      sloth_window: 5m\n  - record: slo:sli_error:ratio_rate30m\n    expr: |\n      (sum(rate(apiserver_request_total{code=~\"(5..|429)\"}[30m])))\n      /\n      (sum(rate(apiserver_request_total[30m])))\n    labels:\n      category: availability\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: kubernetes\n      sloth_id: k8s-apiserver-requests-availability\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-availability\n      sloth_window: 30m\n  - record: slo:sli_error:ratio_rate1h\n    expr: |\n      (sum(rate(apiserver_request_total{code=~\"(5..|429)\"}[1h])))\n      /\n      (sum(rate(apiserver_request_total[1h])))\n    labels:\n      category: availability\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: kubernetes\n      sloth_id: k8s-apiserver-requests-availability\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-availability\n      sloth_window: 1h\n  - record: slo:sli_error:ratio_rate2h\n    expr: |\n      (sum(rate(apiserver_request_total{code=~\"(5..|429)\"}[2h])))\n      /\n      (sum(rate(apiserver_request_total[2h])))\n    labels:\n      category: availability\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: kubernetes\n      sloth_id: k8s-apiserver-requests-availability\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-availability\n      sloth_window: 2h\n  - record: slo:sli_error:ratio_rate6h\n    expr: |\n      (sum(rate(apiserver_request_total{code=~\"(5..|429)\"}[6h])))\n      /\n      (sum(rate(apiserver_request_total[6h])))\n    labels:\n      category: availability\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: kubernetes\n      sloth_id: k8s-apiserver-requests-availability\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-availability\n      sloth_window: 6h\n  - record: slo:sli_error:ratio_rate1d\n    expr: |\n      (sum(rate(apiserver_request_total{code=~\"(5..|429)\"}[1d])))\n      /\n      (sum(rate(apiserver_request_total[1d])))\n    labels:\n      category: availability\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: kubernetes\n      sloth_id: k8s-apiserver-requests-availability\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-availability\n      sloth_window: 1d\n  - record: slo:sli_error:ratio_rate3d\n    expr: |\n      (sum(rate(apiserver_request_total{code=~\"(5..|429)\"}[3d])))\n      /\n      (sum(rate(apiserver_request_total[3d])))\n    labels:\n      category: availability\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: kubernetes\n      sloth_id: k8s-apiserver-requests-availability\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-availability\n      sloth_window: 3d\n  - record: slo:sli_error:ratio_rate30d\n    expr: |\n      sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"k8s-apiserver-requests-availability\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability\"}[30d])\n      / ignoring (sloth_window)\n      count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"k8s-apiserver-requests-availability\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability\"}[30d])\n    labels:\n      category: availability\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: kubernetes\n      sloth_id: k8s-apiserver-requests-availability\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-availability\n      sloth_window: 30d\n- name: sloth-slo-meta-recordings-k8s-apiserver-requests-availability\n  rules:\n  - record: slo:objective:ratio\n    expr: vector(0.9990000000000001)\n    labels:\n      category: availability\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: kubernetes\n      sloth_id: k8s-apiserver-requests-availability\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-availability\n  - record: slo:error_budget:ratio\n    expr: vector(1-0.9990000000000001)\n    labels:\n      category: availability\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: kubernetes\n      sloth_id: k8s-apiserver-requests-availability\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-availability\n  - record: slo:time_period:days\n    expr: vector(30)\n    labels:\n      category: availability\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: kubernetes\n      sloth_id: k8s-apiserver-requests-availability\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-availability\n  - record: slo:current_burn_rate:ratio\n    expr: |\n      slo:sli_error:ratio_rate5m{sloth_id=\"k8s-apiserver-requests-availability\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability\"}\n      / on(sloth_id, sloth_slo, sloth_service) group_left\n      slo:error_budget:ratio{sloth_id=\"k8s-apiserver-requests-availability\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability\"}\n    labels:\n      category: availability\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: kubernetes\n      sloth_id: k8s-apiserver-requests-availability\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-availability\n  - record: slo:period_burn_rate:ratio\n    expr: |\n      slo:sli_error:ratio_rate30d{sloth_id=\"k8s-apiserver-requests-availability\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability\"}\n      / on(sloth_id, sloth_slo, sloth_service) group_left\n      slo:error_budget:ratio{sloth_id=\"k8s-apiserver-requests-availability\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability\"}\n    labels:\n      category: availability\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: kubernetes\n      sloth_id: k8s-apiserver-requests-availability\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-availability\n  - record: slo:period_error_budget_remaining:ratio\n    expr: 1 - slo:period_burn_rate:ratio{sloth_id=\"k8s-apiserver-requests-availability\",\n      sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability\"}\n    labels:\n      category: availability\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: kubernetes\n      sloth_id: k8s-apiserver-requests-availability\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-availability\n  - record: sloth_slo_info\n    expr: vector(1)\n    labels:\n      category: availability\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: kubernetes\n      sloth_id: k8s-apiserver-requests-availability\n      sloth_mode: cli-gen-prom\n      sloth_objective: \"99.9\"\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-availability\n      sloth_spec: prometheus/v1\n      sloth_version: dev\n- name: sloth-slo-alerts-k8s-apiserver-requests-availability\n  rules:\n  - alert: K8sApiserverAvailabilityAlert\n    expr: |\n      (\n          max(slo:sli_error:ratio_rate5m{sloth_id=\"k8s-apiserver-requests-availability\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability\"} &gt; (14.4 * 0.0009999999999999432)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate1h{sloth_id=\"k8s-apiserver-requests-availability\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability\"} &gt; (14.4 * 0.0009999999999999432)) without (sloth_window)\n      )\n      or\n      (\n          max(slo:sli_error:ratio_rate30m{sloth_id=\"k8s-apiserver-requests-availability\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability\"} &gt; (6 * 0.0009999999999999432)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate6h{sloth_id=\"k8s-apiserver-requests-availability\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability\"} &gt; (6 * 0.0009999999999999432)) without (sloth_window)\n      )\n    labels:\n      category: availability\n      severity: critical\n      sloth_severity: page\n    annotations:\n      runbook: https://github.com/kubernetes-monitoring/kubernetes-mixin/tree/master/runbook.md#alert-name-kubeapierrorshigh\n      summary: '{{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn\n        rate is over expected.'\n      title: (page) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget\n        burn rate is too fast.\n  - alert: K8sApiserverAvailabilityAlert\n    expr: |\n      (\n          max(slo:sli_error:ratio_rate2h{sloth_id=\"k8s-apiserver-requests-availability\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability\"} &gt; (3 * 0.0009999999999999432)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate1d{sloth_id=\"k8s-apiserver-requests-availability\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability\"} &gt; (3 * 0.0009999999999999432)) without (sloth_window)\n      )\n      or\n      (\n          max(slo:sli_error:ratio_rate6h{sloth_id=\"k8s-apiserver-requests-availability\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability\"} &gt; (1 * 0.0009999999999999432)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate3d{sloth_id=\"k8s-apiserver-requests-availability\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability\"} &gt; (1 * 0.0009999999999999432)) without (sloth_window)\n      )\n    labels:\n      category: availability\n      severity: warning\n      sloth_severity: ticket\n    annotations:\n      runbook: https://github.com/kubernetes-monitoring/kubernetes-mixin/tree/master/runbook.md#alert-name-kubeapierrorshigh\n      summary: '{{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn\n        rate is over expected.'\n      title: (ticket) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget\n        burn rate is too fast.\n- name: sloth-slo-sli-recordings-k8s-apiserver-requests-latency\n  rules:\n  - record: slo:sli_error:ratio_rate5m\n    expr: |\n      ((\n        sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[5m]))\n        -\n        sum(rate(apiserver_request_duration_seconds_bucket{le=\"0.4\",verb!=\"WATCH\"}[5m]))\n      )\n      )\n      /\n      (sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[5m])))\n    labels:\n      category: latency\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: kubernetes\n      sloth_id: k8s-apiserver-requests-latency\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency\n      sloth_window: 5m\n  - record: slo:sli_error:ratio_rate30m\n    expr: |\n      ((\n        sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[30m]))\n        -\n        sum(rate(apiserver_request_duration_seconds_bucket{le=\"0.4\",verb!=\"WATCH\"}[30m]))\n      )\n      )\n      /\n      (sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[30m])))\n    labels:\n      category: latency\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: kubernetes\n      sloth_id: k8s-apiserver-requests-latency\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency\n      sloth_window: 30m\n  - record: slo:sli_error:ratio_rate1h\n    expr: |\n      ((\n        sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[1h]))\n        -\n        sum(rate(apiserver_request_duration_seconds_bucket{le=\"0.4\",verb!=\"WATCH\"}[1h]))\n      )\n      )\n      /\n      (sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[1h])))\n    labels:\n      category: latency\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: kubernetes\n      sloth_id: k8s-apiserver-requests-latency\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency\n      sloth_window: 1h\n  - record: slo:sli_error:ratio_rate2h\n    expr: |\n      ((\n        sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[2h]))\n        -\n        sum(rate(apiserver_request_duration_seconds_bucket{le=\"0.4\",verb!=\"WATCH\"}[2h]))\n      )\n      )\n      /\n      (sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[2h])))\n    labels:\n      category: latency\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: kubernetes\n      sloth_id: k8s-apiserver-requests-latency\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency\n      sloth_window: 2h\n  - record: slo:sli_error:ratio_rate6h\n    expr: |\n      ((\n        sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[6h]))\n        -\n        sum(rate(apiserver_request_duration_seconds_bucket{le=\"0.4\",verb!=\"WATCH\"}[6h]))\n      )\n      )\n      /\n      (sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[6h])))\n    labels:\n      category: latency\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: kubernetes\n      sloth_id: k8s-apiserver-requests-latency\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency\n      sloth_window: 6h\n  - record: slo:sli_error:ratio_rate1d\n    expr: |\n      ((\n        sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[1d]))\n        -\n        sum(rate(apiserver_request_duration_seconds_bucket{le=\"0.4\",verb!=\"WATCH\"}[1d]))\n      )\n      )\n      /\n      (sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[1d])))\n    labels:\n      category: latency\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: kubernetes\n      sloth_id: k8s-apiserver-requests-latency\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency\n      sloth_window: 1d\n  - record: slo:sli_error:ratio_rate3d\n    expr: |\n      ((\n        sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[3d]))\n        -\n        sum(rate(apiserver_request_duration_seconds_bucket{le=\"0.4\",verb!=\"WATCH\"}[3d]))\n      )\n      )\n      /\n      (sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[3d])))\n    labels:\n      category: latency\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: kubernetes\n      sloth_id: k8s-apiserver-requests-latency\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency\n      sloth_window: 3d\n  - record: slo:sli_error:ratio_rate30d\n    expr: |\n      sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"k8s-apiserver-requests-latency\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency\"}[30d])\n      / ignoring (sloth_window)\n      count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"k8s-apiserver-requests-latency\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency\"}[30d])\n    labels:\n      category: latency\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: kubernetes\n      sloth_id: k8s-apiserver-requests-latency\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency\n      sloth_window: 30d\n- name: sloth-slo-meta-recordings-k8s-apiserver-requests-latency\n  rules:\n  - record: slo:objective:ratio\n    expr: vector(0.99)\n    labels:\n      category: latency\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: kubernetes\n      sloth_id: k8s-apiserver-requests-latency\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency\n  - record: slo:error_budget:ratio\n    expr: vector(1-0.99)\n    labels:\n      category: latency\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: kubernetes\n      sloth_id: k8s-apiserver-requests-latency\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency\n  - record: slo:time_period:days\n    expr: vector(30)\n    labels:\n      category: latency\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: kubernetes\n      sloth_id: k8s-apiserver-requests-latency\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency\n  - record: slo:current_burn_rate:ratio\n    expr: |\n      slo:sli_error:ratio_rate5m{sloth_id=\"k8s-apiserver-requests-latency\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency\"}\n      / on(sloth_id, sloth_slo, sloth_service) group_left\n      slo:error_budget:ratio{sloth_id=\"k8s-apiserver-requests-latency\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency\"}\n    labels:\n      category: latency\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: kubernetes\n      sloth_id: k8s-apiserver-requests-latency\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency\n  - record: slo:period_burn_rate:ratio\n    expr: |\n      slo:sli_error:ratio_rate30d{sloth_id=\"k8s-apiserver-requests-latency\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency\"}\n      / on(sloth_id, sloth_slo, sloth_service) group_left\n      slo:error_budget:ratio{sloth_id=\"k8s-apiserver-requests-latency\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency\"}\n    labels:\n      category: latency\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: kubernetes\n      sloth_id: k8s-apiserver-requests-latency\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency\n  - record: slo:period_error_budget_remaining:ratio\n    expr: 1 - slo:period_burn_rate:ratio{sloth_id=\"k8s-apiserver-requests-latency\",\n      sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency\"}\n    labels:\n      category: latency\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: kubernetes\n      sloth_id: k8s-apiserver-requests-latency\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency\n  - record: sloth_slo_info\n    expr: vector(1)\n    labels:\n      category: latency\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: kubernetes\n      sloth_id: k8s-apiserver-requests-latency\n      sloth_mode: cli-gen-prom\n      sloth_objective: \"99\"\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency\n      sloth_spec: prometheus/v1\n      sloth_version: dev\n- name: sloth-slo-alerts-k8s-apiserver-requests-latency\n  rules:\n  - alert: K8sApiserverLatencyAlert\n    expr: |\n      (\n          max(slo:sli_error:ratio_rate5m{sloth_id=\"k8s-apiserver-requests-latency\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency\"} &gt; (14.4 * 0.01)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate1h{sloth_id=\"k8s-apiserver-requests-latency\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency\"} &gt; (14.4 * 0.01)) without (sloth_window)\n      )\n      or\n      (\n          max(slo:sli_error:ratio_rate30m{sloth_id=\"k8s-apiserver-requests-latency\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency\"} &gt; (6 * 0.01)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate6h{sloth_id=\"k8s-apiserver-requests-latency\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency\"} &gt; (6 * 0.01)) without (sloth_window)\n      )\n    labels:\n      category: latency\n      severity: critical\n      sloth_severity: page\n    annotations:\n      runbook: https://github.com/kubernetes-monitoring/kubernetes-mixin/tree/master/runbook.md#alert-name-kubeapilatencyhigh\n      summary: '{{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn\n        rate is over expected.'\n      title: (page) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget\n        burn rate is too fast.\n  - alert: K8sApiserverLatencyAlert\n    expr: |\n      (\n          max(slo:sli_error:ratio_rate2h{sloth_id=\"k8s-apiserver-requests-latency\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency\"} &gt; (3 * 0.01)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate1d{sloth_id=\"k8s-apiserver-requests-latency\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency\"} &gt; (3 * 0.01)) without (sloth_window)\n      )\n      or\n      (\n          max(slo:sli_error:ratio_rate6h{sloth_id=\"k8s-apiserver-requests-latency\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency\"} &gt; (1 * 0.01)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate3d{sloth_id=\"k8s-apiserver-requests-latency\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency\"} &gt; (1 * 0.01)) without (sloth_window)\n      )\n    labels:\n      category: latency\n      severity: warning\n      sloth_severity: ticket\n    annotations:\n      runbook: https://github.com/kubernetes-monitoring/kubernetes-mixin/tree/master/runbook.md#alert-name-kubeapilatencyhigh\n      summary: '{{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn\n        rate is over expected.'\n      title: (ticket) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget\n        burn rate is too fast.\n</code></pre>"},{"location":"examples/default/multifile/","title":"Multi file","text":"SLO spec Generated <pre><code>---\nversion: \"prometheus/v1\"\nservice: \"myservice\"\nlabels:\n  owner: \"myteam\"\n  repo: \"myorg/myservice\"\n  tier: \"2\"\nslos:\n  # We allow failing (5xx and 429) 1 request every 1000 requests (99.9%).\n  - name: \"requests-availability\"\n    objective: 99.9\n    description: \"Common SLO based on availability for HTTP request responses.\"\n    sli:\n      events:\n        error_query: sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[{{.window}}]))\n        total_query: sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[{{.window}}]))\n    alerting:\n      name: MyServiceHighErrorRate\n      labels:\n        category: \"availability\"\n      annotations:\n        # Overwrite default Sloth SLO alert summmary on ticket and page alerts.\n        summary: \"High error rate on 'myservice' requests responses\"\n      page_alert:\n        labels:\n          severity: pageteam\n          routing_key: myteam\n      ticket_alert:\n        labels:\n          severity: \"slack\"\n          slack_channel: \"#alerts-myteam\"\n\n---\nversion: \"prometheus/v1\"\nservice: \"myservice2\"\nlabels:\n  owner: \"myteam2\"\n  repo: \"myorg/myservice2\"\n  tier: \"1\"\nslos:\n  # We allow failing (5xx and 429) 1 request every 1000 requests (99.9%).\n  - name: \"requests-availability\"\n    objective: 99.99\n    description: \"Common SLO based on availability for HTTP request responses.\"\n    sli:\n      events:\n        error_query: sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[{{.window}}]))\n        total_query: sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[{{.window}}]))\n    alerting:\n      name: MyServiceHighErrorRate\n      labels:\n        category: \"availability\"\n      annotations:\n        # Overwrite default Sloth SLO alert summmary on ticket and page alerts.\n        summary: \"High error rate on 'myservice' requests responses\"\n      page_alert:\n        labels:\n          severity: pageteam\n          routing_key: myteam\n      ticket_alert:\n        labels:\n          severity: \"slack\"\n          slack_channel: \"#alerts-myteam\"\n</code></pre> <pre><code>---\n# Code generated by Sloth (dev): https://github.com/slok/sloth.\n# DO NOT EDIT.\n\ngroups:\n- name: sloth-slo-sli-recordings-myservice-requests-availability\n  rules:\n  - record: slo:sli_error:ratio_rate5m\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[5m])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[5m])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 5m\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate30m\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[30m])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[30m])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 30m\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate1h\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[1h])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1h])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 1h\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate2h\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[2h])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[2h])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 2h\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate6h\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[6h])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[6h])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 6h\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate1d\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[1d])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1d])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 1d\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate3d\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[3d])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[3d])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 3d\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate30d\n    expr: |\n      sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}[30d])\n      / ignoring (sloth_window)\n      count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}[30d])\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 30d\n      tier: \"2\"\n- name: sloth-slo-meta-recordings-myservice-requests-availability\n  rules:\n  - record: slo:objective:ratio\n    expr: vector(0.9990000000000001)\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      tier: \"2\"\n  - record: slo:error_budget:ratio\n    expr: vector(1-0.9990000000000001)\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      tier: \"2\"\n  - record: slo:time_period:days\n    expr: vector(30)\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      tier: \"2\"\n  - record: slo:current_burn_rate:ratio\n    expr: |\n      slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n      / on(sloth_id, sloth_slo, sloth_service) group_left\n      slo:error_budget:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      tier: \"2\"\n  - record: slo:period_burn_rate:ratio\n    expr: |\n      slo:sli_error:ratio_rate30d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n      / on(sloth_id, sloth_slo, sloth_service) group_left\n      slo:error_budget:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      tier: \"2\"\n  - record: slo:period_error_budget_remaining:ratio\n    expr: 1 - slo:period_burn_rate:ratio{sloth_id=\"myservice-requests-availability\",\n      sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      tier: \"2\"\n  - record: sloth_slo_info\n    expr: vector(1)\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_mode: cli-gen-prom\n      sloth_objective: \"99.9\"\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_spec: prometheus/v1\n      sloth_version: dev\n      tier: \"2\"\n- name: sloth-slo-alerts-myservice-requests-availability\n  rules:\n  - alert: MyServiceHighErrorRate\n    expr: |\n      (\n          max(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (14.4 * 0.0009999999999999432)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate1h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (14.4 * 0.0009999999999999432)) without (sloth_window)\n      )\n      or\n      (\n          max(slo:sli_error:ratio_rate30m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (6 * 0.0009999999999999432)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate6h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (6 * 0.0009999999999999432)) without (sloth_window)\n      )\n    labels:\n      category: availability\n      routing_key: myteam\n      severity: pageteam\n      sloth_severity: page\n    annotations:\n      summary: High error rate on 'myservice' requests responses\n      title: (page) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget\n        burn rate is too fast.\n  - alert: MyServiceHighErrorRate\n    expr: |\n      (\n          max(slo:sli_error:ratio_rate2h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (3 * 0.0009999999999999432)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate1d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (3 * 0.0009999999999999432)) without (sloth_window)\n      )\n      or\n      (\n          max(slo:sli_error:ratio_rate6h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (1 * 0.0009999999999999432)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate3d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (1 * 0.0009999999999999432)) without (sloth_window)\n      )\n    labels:\n      category: availability\n      severity: slack\n      slack_channel: '#alerts-myteam'\n      sloth_severity: ticket\n    annotations:\n      summary: High error rate on 'myservice' requests responses\n      title: (ticket) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget\n        burn rate is too fast.\n\n---\n# Code generated by Sloth (dev): https://github.com/slok/sloth.\n# DO NOT EDIT.\n\ngroups:\n- name: sloth-slo-sli-recordings-myservice2-requests-availability\n  rules:\n  - record: slo:sli_error:ratio_rate5m\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[5m])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[5m])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam2\n      repo: myorg/myservice2\n      sloth_id: myservice2-requests-availability\n      sloth_service: myservice2\n      sloth_slo: requests-availability\n      sloth_window: 5m\n      tier: \"1\"\n  - record: slo:sli_error:ratio_rate30m\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[30m])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[30m])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam2\n      repo: myorg/myservice2\n      sloth_id: myservice2-requests-availability\n      sloth_service: myservice2\n      sloth_slo: requests-availability\n      sloth_window: 30m\n      tier: \"1\"\n  - record: slo:sli_error:ratio_rate1h\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[1h])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1h])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam2\n      repo: myorg/myservice2\n      sloth_id: myservice2-requests-availability\n      sloth_service: myservice2\n      sloth_slo: requests-availability\n      sloth_window: 1h\n      tier: \"1\"\n  - record: slo:sli_error:ratio_rate2h\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[2h])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[2h])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam2\n      repo: myorg/myservice2\n      sloth_id: myservice2-requests-availability\n      sloth_service: myservice2\n      sloth_slo: requests-availability\n      sloth_window: 2h\n      tier: \"1\"\n  - record: slo:sli_error:ratio_rate6h\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[6h])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[6h])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam2\n      repo: myorg/myservice2\n      sloth_id: myservice2-requests-availability\n      sloth_service: myservice2\n      sloth_slo: requests-availability\n      sloth_window: 6h\n      tier: \"1\"\n  - record: slo:sli_error:ratio_rate1d\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[1d])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1d])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam2\n      repo: myorg/myservice2\n      sloth_id: myservice2-requests-availability\n      sloth_service: myservice2\n      sloth_slo: requests-availability\n      sloth_window: 1d\n      tier: \"1\"\n  - record: slo:sli_error:ratio_rate3d\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[3d])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[3d])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam2\n      repo: myorg/myservice2\n      sloth_id: myservice2-requests-availability\n      sloth_service: myservice2\n      sloth_slo: requests-availability\n      sloth_window: 3d\n      tier: \"1\"\n  - record: slo:sli_error:ratio_rate30d\n    expr: |\n      sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"}[30d])\n      / ignoring (sloth_window)\n      count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"}[30d])\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam2\n      repo: myorg/myservice2\n      sloth_id: myservice2-requests-availability\n      sloth_service: myservice2\n      sloth_slo: requests-availability\n      sloth_window: 30d\n      tier: \"1\"\n- name: sloth-slo-meta-recordings-myservice2-requests-availability\n  rules:\n  - record: slo:objective:ratio\n    expr: vector(0.9998999999999999)\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam2\n      repo: myorg/myservice2\n      sloth_id: myservice2-requests-availability\n      sloth_service: myservice2\n      sloth_slo: requests-availability\n      tier: \"1\"\n  - record: slo:error_budget:ratio\n    expr: vector(1-0.9998999999999999)\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam2\n      repo: myorg/myservice2\n      sloth_id: myservice2-requests-availability\n      sloth_service: myservice2\n      sloth_slo: requests-availability\n      tier: \"1\"\n  - record: slo:time_period:days\n    expr: vector(30)\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam2\n      repo: myorg/myservice2\n      sloth_id: myservice2-requests-availability\n      sloth_service: myservice2\n      sloth_slo: requests-availability\n      tier: \"1\"\n  - record: slo:current_burn_rate:ratio\n    expr: |\n      slo:sli_error:ratio_rate5m{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"}\n      / on(sloth_id, sloth_slo, sloth_service) group_left\n      slo:error_budget:ratio{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"}\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam2\n      repo: myorg/myservice2\n      sloth_id: myservice2-requests-availability\n      sloth_service: myservice2\n      sloth_slo: requests-availability\n      tier: \"1\"\n  - record: slo:period_burn_rate:ratio\n    expr: |\n      slo:sli_error:ratio_rate30d{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"}\n      / on(sloth_id, sloth_slo, sloth_service) group_left\n      slo:error_budget:ratio{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"}\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam2\n      repo: myorg/myservice2\n      sloth_id: myservice2-requests-availability\n      sloth_service: myservice2\n      sloth_slo: requests-availability\n      tier: \"1\"\n  - record: slo:period_error_budget_remaining:ratio\n    expr: 1 - slo:period_burn_rate:ratio{sloth_id=\"myservice2-requests-availability\",\n      sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"}\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam2\n      repo: myorg/myservice2\n      sloth_id: myservice2-requests-availability\n      sloth_service: myservice2\n      sloth_slo: requests-availability\n      tier: \"1\"\n  - record: sloth_slo_info\n    expr: vector(1)\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam2\n      repo: myorg/myservice2\n      sloth_id: myservice2-requests-availability\n      sloth_mode: cli-gen-prom\n      sloth_objective: \"99.99\"\n      sloth_service: myservice2\n      sloth_slo: requests-availability\n      sloth_spec: prometheus/v1\n      sloth_version: dev\n      tier: \"1\"\n- name: sloth-slo-alerts-myservice2-requests-availability\n  rules:\n  - alert: MyServiceHighErrorRate\n    expr: |\n      (\n          max(slo:sli_error:ratio_rate5m{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} &gt; (14.4 * 0.00010000000000005117)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate1h{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} &gt; (14.4 * 0.00010000000000005117)) without (sloth_window)\n      )\n      or\n      (\n          max(slo:sli_error:ratio_rate30m{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} &gt; (6 * 0.00010000000000005117)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate6h{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} &gt; (6 * 0.00010000000000005117)) without (sloth_window)\n      )\n    labels:\n      category: availability\n      routing_key: myteam\n      severity: pageteam\n      sloth_severity: page\n    annotations:\n      summary: High error rate on 'myservice' requests responses\n      title: (page) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget\n        burn rate is too fast.\n  - alert: MyServiceHighErrorRate\n    expr: |\n      (\n          max(slo:sli_error:ratio_rate2h{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} &gt; (3 * 0.00010000000000005117)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate1d{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} &gt; (3 * 0.00010000000000005117)) without (sloth_window)\n      )\n      or\n      (\n          max(slo:sli_error:ratio_rate6h{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} &gt; (1 * 0.00010000000000005117)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate3d{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} &gt; (1 * 0.00010000000000005117)) without (sloth_window)\n      )\n    labels:\n      category: availability\n      severity: slack\n      slack_channel: '#alerts-myteam'\n      sloth_severity: ticket\n    annotations:\n      summary: High error rate on 'myservice' requests responses\n      title: (ticket) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget\n        burn rate is too fast.\n</code></pre>"},{"location":"examples/default/no-alerts/","title":"No alerts","text":"SLO spec Generated <pre><code># This example shows a simple service level by implementing a single SLO without alerts.\n# It disables page (critical) and ticket (warning) alerts.\n# The SLO SLI measures the event errors as the http request respones with the code &gt;=500 and 429.\n#\n# `sloth generate -i ./examples/no-alerts.yml`\n#\nversion: \"prometheus/v1\"\nservice: \"myapp\"\nlabels:\n  owner: \"myteam\"\nslos:\n  - name: \"http-availability\"\n    objective: 99.99\n    description: \"Common SLO based on availability for HTTP request responses.\"\n    sli:\n      events:\n        error_query: |\n          sum(\n            rate(http_request_duration_seconds_count{job=\"myapp\", code=~\"(5..|429)\"}[{{.window}}])\n          )\n        total_query: |\n          sum(\n            rate(http_request_duration_seconds_count{job=\"myapp\"}[{{.window}}])\n          )\n    alerting:\n      page_alert:\n        disable: true\n      ticket_alert:\n        disable: true\n</code></pre> <pre><code>---\n# Code generated by Sloth (dev): https://github.com/slok/sloth.\n# DO NOT EDIT.\n\ngroups:\n- name: sloth-slo-sli-recordings-myapp-http-availability\n  rules:\n  - record: slo:sli_error:ratio_rate5m\n    expr: |\n      (sum(\n        rate(http_request_duration_seconds_count{job=\"myapp\", code=~\"(5..|429)\"}[5m])\n      )\n      )\n      /\n      (sum(\n        rate(http_request_duration_seconds_count{job=\"myapp\"}[5m])\n      )\n      )\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      sloth_id: myapp-http-availability\n      sloth_service: myapp\n      sloth_slo: http-availability\n      sloth_window: 5m\n  - record: slo:sli_error:ratio_rate30m\n    expr: |\n      (sum(\n        rate(http_request_duration_seconds_count{job=\"myapp\", code=~\"(5..|429)\"}[30m])\n      )\n      )\n      /\n      (sum(\n        rate(http_request_duration_seconds_count{job=\"myapp\"}[30m])\n      )\n      )\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      sloth_id: myapp-http-availability\n      sloth_service: myapp\n      sloth_slo: http-availability\n      sloth_window: 30m\n  - record: slo:sli_error:ratio_rate1h\n    expr: |\n      (sum(\n        rate(http_request_duration_seconds_count{job=\"myapp\", code=~\"(5..|429)\"}[1h])\n      )\n      )\n      /\n      (sum(\n        rate(http_request_duration_seconds_count{job=\"myapp\"}[1h])\n      )\n      )\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      sloth_id: myapp-http-availability\n      sloth_service: myapp\n      sloth_slo: http-availability\n      sloth_window: 1h\n  - record: slo:sli_error:ratio_rate2h\n    expr: |\n      (sum(\n        rate(http_request_duration_seconds_count{job=\"myapp\", code=~\"(5..|429)\"}[2h])\n      )\n      )\n      /\n      (sum(\n        rate(http_request_duration_seconds_count{job=\"myapp\"}[2h])\n      )\n      )\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      sloth_id: myapp-http-availability\n      sloth_service: myapp\n      sloth_slo: http-availability\n      sloth_window: 2h\n  - record: slo:sli_error:ratio_rate6h\n    expr: |\n      (sum(\n        rate(http_request_duration_seconds_count{job=\"myapp\", code=~\"(5..|429)\"}[6h])\n      )\n      )\n      /\n      (sum(\n        rate(http_request_duration_seconds_count{job=\"myapp\"}[6h])\n      )\n      )\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      sloth_id: myapp-http-availability\n      sloth_service: myapp\n      sloth_slo: http-availability\n      sloth_window: 6h\n  - record: slo:sli_error:ratio_rate1d\n    expr: |\n      (sum(\n        rate(http_request_duration_seconds_count{job=\"myapp\", code=~\"(5..|429)\"}[1d])\n      )\n      )\n      /\n      (sum(\n        rate(http_request_duration_seconds_count{job=\"myapp\"}[1d])\n      )\n      )\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      sloth_id: myapp-http-availability\n      sloth_service: myapp\n      sloth_slo: http-availability\n      sloth_window: 1d\n  - record: slo:sli_error:ratio_rate3d\n    expr: |\n      (sum(\n        rate(http_request_duration_seconds_count{job=\"myapp\", code=~\"(5..|429)\"}[3d])\n      )\n      )\n      /\n      (sum(\n        rate(http_request_duration_seconds_count{job=\"myapp\"}[3d])\n      )\n      )\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      sloth_id: myapp-http-availability\n      sloth_service: myapp\n      sloth_slo: http-availability\n      sloth_window: 3d\n  - record: slo:sli_error:ratio_rate30d\n    expr: |\n      sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myapp-http-availability\", sloth_service=\"myapp\", sloth_slo=\"http-availability\"}[30d])\n      / ignoring (sloth_window)\n      count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myapp-http-availability\", sloth_service=\"myapp\", sloth_slo=\"http-availability\"}[30d])\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      sloth_id: myapp-http-availability\n      sloth_service: myapp\n      sloth_slo: http-availability\n      sloth_window: 30d\n- name: sloth-slo-meta-recordings-myapp-http-availability\n  rules:\n  - record: slo:objective:ratio\n    expr: vector(0.9998999999999999)\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      sloth_id: myapp-http-availability\n      sloth_service: myapp\n      sloth_slo: http-availability\n  - record: slo:error_budget:ratio\n    expr: vector(1-0.9998999999999999)\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      sloth_id: myapp-http-availability\n      sloth_service: myapp\n      sloth_slo: http-availability\n  - record: slo:time_period:days\n    expr: vector(30)\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      sloth_id: myapp-http-availability\n      sloth_service: myapp\n      sloth_slo: http-availability\n  - record: slo:current_burn_rate:ratio\n    expr: |\n      slo:sli_error:ratio_rate5m{sloth_id=\"myapp-http-availability\", sloth_service=\"myapp\", sloth_slo=\"http-availability\"}\n      / on(sloth_id, sloth_slo, sloth_service) group_left\n      slo:error_budget:ratio{sloth_id=\"myapp-http-availability\", sloth_service=\"myapp\", sloth_slo=\"http-availability\"}\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      sloth_id: myapp-http-availability\n      sloth_service: myapp\n      sloth_slo: http-availability\n  - record: slo:period_burn_rate:ratio\n    expr: |\n      slo:sli_error:ratio_rate30d{sloth_id=\"myapp-http-availability\", sloth_service=\"myapp\", sloth_slo=\"http-availability\"}\n      / on(sloth_id, sloth_slo, sloth_service) group_left\n      slo:error_budget:ratio{sloth_id=\"myapp-http-availability\", sloth_service=\"myapp\", sloth_slo=\"http-availability\"}\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      sloth_id: myapp-http-availability\n      sloth_service: myapp\n      sloth_slo: http-availability\n  - record: slo:period_error_budget_remaining:ratio\n    expr: 1 - slo:period_burn_rate:ratio{sloth_id=\"myapp-http-availability\", sloth_service=\"myapp\",\n      sloth_slo=\"http-availability\"}\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      sloth_id: myapp-http-availability\n      sloth_service: myapp\n      sloth_slo: http-availability\n  - record: sloth_slo_info\n    expr: vector(1)\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      sloth_id: myapp-http-availability\n      sloth_mode: cli-gen-prom\n      sloth_objective: \"99.99\"\n      sloth_service: myapp\n      sloth_slo: http-availability\n      sloth_spec: prometheus/v1\n      sloth_version: dev\n</code></pre>"},{"location":"examples/default/raw-sli/","title":"Raw SLI","text":"SLO spec Generated <pre><code># This example shows another less accurate or simpler way of creating the home wifi SLO.\n#\n# The metrics already give us a metric in ratio for each wifi connection satisfaction, instead of getting\n# good and bad events as connection with a minimum satisfaction ratio, we will calculate the averate of all\n# ratio satisfaction connections over the time window.\n# So we can't use the `events` SLI because we are not going to divide bad and total events.\n#\n# - `wifi-client-satisfaction`\n#   - This SLO warn us that we have an average wifi connection satisfaction.\n#   - SLI error: Calculated internally by ubiquitis metrics, we use directly the ratio.\n#   - SLO objective (95%): We allow the average wifi connection satisfaction is &gt;=95%\n#\n# `sloth generate -i ./examples/raw-home-wifi.yml`\n#\nversion: \"prometheus/v1\"\nservice: \"home-wifi\"\nlabels:\n  cluster: \"valhalla\"\n  component: \"ubiquiti\"\n  context: \"home\"\nslos:\n  - name: \"wifi-client-satisfaction\"\n    objective: 95\n    description: \"Warn us that we have an average wifi connection satisfaction.\"\n    sli:\n      raw:\n        # Get the averate satisfaction ratio and rest 1 (max good) to get the error ratio.\n        error_ratio_query: |\n          1 - (\n            sum(sum_over_time(unifipoller_client_satisfaction_ratio[{{.window}}]))\n            /\n            sum(count_over_time(unifipoller_client_satisfaction_ratio[{{.window}}]))\n          )\n    alerting:\n      name: WifiClientSatisfaction\n      page_alert:\n        labels:\n          severity: home\n      ticket_alert:\n        labels:\n          severity: warning\n</code></pre> <pre><code>---\n# Code generated by Sloth (dev): https://github.com/slok/sloth.\n# DO NOT EDIT.\n\ngroups:\n- name: sloth-slo-sli-recordings-home-wifi-wifi-client-satisfaction\n  rules:\n  - record: slo:sli_error:ratio_rate5m\n    expr: |-\n      (1 - (\n        sum(sum_over_time(unifipoller_client_satisfaction_ratio[5m]))\n        /\n        sum(count_over_time(unifipoller_client_satisfaction_ratio[5m]))\n      )\n      )\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: wifi-client-satisfaction\n      sloth_window: 5m\n  - record: slo:sli_error:ratio_rate30m\n    expr: |-\n      (1 - (\n        sum(sum_over_time(unifipoller_client_satisfaction_ratio[30m]))\n        /\n        sum(count_over_time(unifipoller_client_satisfaction_ratio[30m]))\n      )\n      )\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: wifi-client-satisfaction\n      sloth_window: 30m\n  - record: slo:sli_error:ratio_rate1h\n    expr: |-\n      (1 - (\n        sum(sum_over_time(unifipoller_client_satisfaction_ratio[1h]))\n        /\n        sum(count_over_time(unifipoller_client_satisfaction_ratio[1h]))\n      )\n      )\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: wifi-client-satisfaction\n      sloth_window: 1h\n  - record: slo:sli_error:ratio_rate2h\n    expr: |-\n      (1 - (\n        sum(sum_over_time(unifipoller_client_satisfaction_ratio[2h]))\n        /\n        sum(count_over_time(unifipoller_client_satisfaction_ratio[2h]))\n      )\n      )\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: wifi-client-satisfaction\n      sloth_window: 2h\n  - record: slo:sli_error:ratio_rate6h\n    expr: |-\n      (1 - (\n        sum(sum_over_time(unifipoller_client_satisfaction_ratio[6h]))\n        /\n        sum(count_over_time(unifipoller_client_satisfaction_ratio[6h]))\n      )\n      )\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: wifi-client-satisfaction\n      sloth_window: 6h\n  - record: slo:sli_error:ratio_rate1d\n    expr: |-\n      (1 - (\n        sum(sum_over_time(unifipoller_client_satisfaction_ratio[1d]))\n        /\n        sum(count_over_time(unifipoller_client_satisfaction_ratio[1d]))\n      )\n      )\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: wifi-client-satisfaction\n      sloth_window: 1d\n  - record: slo:sli_error:ratio_rate3d\n    expr: |-\n      (1 - (\n        sum(sum_over_time(unifipoller_client_satisfaction_ratio[3d]))\n        /\n        sum(count_over_time(unifipoller_client_satisfaction_ratio[3d]))\n      )\n      )\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: wifi-client-satisfaction\n      sloth_window: 3d\n  - record: slo:sli_error:ratio_rate30d\n    expr: |\n      sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"wifi-client-satisfaction\"}[30d])\n      / ignoring (sloth_window)\n      count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"wifi-client-satisfaction\"}[30d])\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: wifi-client-satisfaction\n      sloth_window: 30d\n- name: sloth-slo-meta-recordings-home-wifi-wifi-client-satisfaction\n  rules:\n  - record: slo:objective:ratio\n    expr: vector(0.95)\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: wifi-client-satisfaction\n  - record: slo:error_budget:ratio\n    expr: vector(1-0.95)\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: wifi-client-satisfaction\n  - record: slo:time_period:days\n    expr: vector(30)\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: wifi-client-satisfaction\n  - record: slo:current_burn_rate:ratio\n    expr: |\n      slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"wifi-client-satisfaction\"}\n      / on(sloth_id, sloth_slo, sloth_service) group_left\n      slo:error_budget:ratio{sloth_id=\"home-wifi-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"wifi-client-satisfaction\"}\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: wifi-client-satisfaction\n  - record: slo:period_burn_rate:ratio\n    expr: |\n      slo:sli_error:ratio_rate30d{sloth_id=\"home-wifi-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"wifi-client-satisfaction\"}\n      / on(sloth_id, sloth_slo, sloth_service) group_left\n      slo:error_budget:ratio{sloth_id=\"home-wifi-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"wifi-client-satisfaction\"}\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: wifi-client-satisfaction\n  - record: slo:period_error_budget_remaining:ratio\n    expr: 1 - slo:period_burn_rate:ratio{sloth_id=\"home-wifi-wifi-client-satisfaction\",\n      sloth_service=\"home-wifi\", sloth_slo=\"wifi-client-satisfaction\"}\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-wifi-client-satisfaction\n      sloth_service: home-wifi\n      sloth_slo: wifi-client-satisfaction\n  - record: sloth_slo_info\n    expr: vector(1)\n    labels:\n      cluster: valhalla\n      cmd: examplesgen.sh\n      component: ubiquiti\n      context: home\n      sloth_id: home-wifi-wifi-client-satisfaction\n      sloth_mode: cli-gen-prom\n      sloth_objective: \"95\"\n      sloth_service: home-wifi\n      sloth_slo: wifi-client-satisfaction\n      sloth_spec: prometheus/v1\n      sloth_version: dev\n- name: sloth-slo-alerts-home-wifi-wifi-client-satisfaction\n  rules:\n  - alert: WifiClientSatisfaction\n    expr: |\n      (\n          max(slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"wifi-client-satisfaction\"} &gt; (14.4 * 0.05)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate1h{sloth_id=\"home-wifi-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"wifi-client-satisfaction\"} &gt; (14.4 * 0.05)) without (sloth_window)\n      )\n      or\n      (\n          max(slo:sli_error:ratio_rate30m{sloth_id=\"home-wifi-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"wifi-client-satisfaction\"} &gt; (6 * 0.05)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate6h{sloth_id=\"home-wifi-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"wifi-client-satisfaction\"} &gt; (6 * 0.05)) without (sloth_window)\n      )\n    labels:\n      severity: home\n      sloth_severity: page\n    annotations:\n      summary: '{{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn\n        rate is over expected.'\n      title: (page) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget\n        burn rate is too fast.\n  - alert: WifiClientSatisfaction\n    expr: |\n      (\n          max(slo:sli_error:ratio_rate2h{sloth_id=\"home-wifi-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"wifi-client-satisfaction\"} &gt; (3 * 0.05)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate1d{sloth_id=\"home-wifi-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"wifi-client-satisfaction\"} &gt; (3 * 0.05)) without (sloth_window)\n      )\n      or\n      (\n          max(slo:sli_error:ratio_rate6h{sloth_id=\"home-wifi-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"wifi-client-satisfaction\"} &gt; (1 * 0.05)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate3d{sloth_id=\"home-wifi-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"wifi-client-satisfaction\"} &gt; (1 * 0.05)) without (sloth_window)\n      )\n    labels:\n      severity: warning\n      sloth_severity: ticket\n    annotations:\n      summary: '{{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn\n        rate is over expected.'\n      title: (ticket) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget\n        burn rate is too fast.\n</code></pre>"},{"location":"examples/default/sli-plugin/","title":"SLI plugin","text":"SLO spec Generated SLI Plugin <pre><code>version: \"prometheus/v1\"\nservice: \"myservice\"\nlabels:\n  owner: \"myteam\"\n  repo: \"myorg/myservice\"\n  tier: \"2\"\nslos:\n  # We allow failing (5xx and 429) 1 request every 1000 requests (99.9%).\n  - name: \"requests-availability\"\n    objective: 99.9\n    description: \"Common SLO based on availability for HTTP request responses.\"\n    sli:\n      plugin:\n        id: \"getting_started_availability\"\n        options:\n          job: \"myservice\"\n          filter: 'f1=\"v1\",f2=\"v2\"'\n    alerting:\n      name: MyServiceHighErrorRate\n      labels:\n        category: \"availability\"\n      annotations:\n        # Overwrite default Sloth SLO alert summmary on ticket and page alerts.\n        summary: \"High error rate on 'myservice' requests responses\"\n      page_alert:\n        labels:\n          severity: pageteam\n          routing_key: myteam\n      ticket_alert:\n        labels:\n          severity: \"slack\"\n          slack_channel: \"#alerts-myteam\"\n</code></pre> <pre><code>---\n# Code generated by Sloth (dev): https://github.com/slok/sloth.\n# DO NOT EDIT.\n\ngroups:\n- name: sloth-slo-sli-recordings-myservice-requests-availability\n  rules:\n  - record: slo:sli_error:ratio_rate5m\n    expr: |-\n      (\n      sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\",code=~\"(5..|429)\" }[5m]))\n      /\n      sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\" }[5m])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 5m\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate30m\n    expr: |-\n      (\n      sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\",code=~\"(5..|429)\" }[30m]))\n      /\n      sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\" }[30m])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 30m\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate1h\n    expr: |-\n      (\n      sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\",code=~\"(5..|429)\" }[1h]))\n      /\n      sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\" }[1h])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 1h\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate2h\n    expr: |-\n      (\n      sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\",code=~\"(5..|429)\" }[2h]))\n      /\n      sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\" }[2h])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 2h\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate6h\n    expr: |-\n      (\n      sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\",code=~\"(5..|429)\" }[6h]))\n      /\n      sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\" }[6h])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 6h\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate1d\n    expr: |-\n      (\n      sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\",code=~\"(5..|429)\" }[1d]))\n      /\n      sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\" }[1d])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 1d\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate3d\n    expr: |-\n      (\n      sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\",code=~\"(5..|429)\" }[3d]))\n      /\n      sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\" }[3d])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 3d\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate30d\n    expr: |\n      sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}[30d])\n      / ignoring (sloth_window)\n      count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}[30d])\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 30d\n      tier: \"2\"\n- name: sloth-slo-meta-recordings-myservice-requests-availability\n  rules:\n  - record: slo:objective:ratio\n    expr: vector(0.9990000000000001)\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      tier: \"2\"\n  - record: slo:error_budget:ratio\n    expr: vector(1-0.9990000000000001)\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      tier: \"2\"\n  - record: slo:time_period:days\n    expr: vector(30)\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      tier: \"2\"\n  - record: slo:current_burn_rate:ratio\n    expr: |\n      slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n      / on(sloth_id, sloth_slo, sloth_service) group_left\n      slo:error_budget:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      tier: \"2\"\n  - record: slo:period_burn_rate:ratio\n    expr: |\n      slo:sli_error:ratio_rate30d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n      / on(sloth_id, sloth_slo, sloth_service) group_left\n      slo:error_budget:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      tier: \"2\"\n  - record: slo:period_error_budget_remaining:ratio\n    expr: 1 - slo:period_burn_rate:ratio{sloth_id=\"myservice-requests-availability\",\n      sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      tier: \"2\"\n  - record: sloth_slo_info\n    expr: vector(1)\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_mode: cli-gen-prom\n      sloth_objective: \"99.9\"\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_spec: prometheus/v1\n      sloth_version: dev\n      tier: \"2\"\n- name: sloth-slo-alerts-myservice-requests-availability\n  rules:\n  - alert: MyServiceHighErrorRate\n    expr: |\n      (\n          max(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (14.4 * 0.0009999999999999432)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate1h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (14.4 * 0.0009999999999999432)) without (sloth_window)\n      )\n      or\n      (\n          max(slo:sli_error:ratio_rate30m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (6 * 0.0009999999999999432)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate6h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (6 * 0.0009999999999999432)) without (sloth_window)\n      )\n    labels:\n      category: availability\n      routing_key: myteam\n      severity: pageteam\n      sloth_severity: page\n    annotations:\n      summary: High error rate on 'myservice' requests responses\n      title: (page) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget\n        burn rate is too fast.\n  - alert: MyServiceHighErrorRate\n    expr: |\n      (\n          max(slo:sli_error:ratio_rate2h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (3 * 0.0009999999999999432)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate1d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (3 * 0.0009999999999999432)) without (sloth_window)\n      )\n      or\n      (\n          max(slo:sli_error:ratio_rate6h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (1 * 0.0009999999999999432)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate3d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (1 * 0.0009999999999999432)) without (sloth_window)\n      )\n    labels:\n      category: availability\n      severity: slack\n      slack_channel: '#alerts-myteam'\n      sloth_severity: ticket\n    annotations:\n      summary: High error rate on 'myservice' requests responses\n      title: (ticket) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget\n        burn rate is too fast.\n</code></pre> <pre><code>package availability\n\nimport (\n    \"bytes\"\n    \"context\"\n    \"fmt\"\n    \"regexp\"\n    \"strings\"\n    \"text/template\"\n)\n\nconst (\n    SLIPluginVersion = \"prometheus/v1\"\n    SLIPluginID      = \"getting_started_availability\"\n)\n\nvar queryTpl = template.Must(template.New(\"\").Parse(`\nsum(rate(http_request_duration_seconds_count{ {{.filter}}job=\"{{.job}}\",code=~\"(5..|429)\" }[{{\"{{.window}}\"}}]))\n/\nsum(rate(http_request_duration_seconds_count{ {{.filter}}job=\"{{.job}}\" }[{{\"{{.window}}\"}}]))`))\n\nvar filterRegex = regexp.MustCompile(`([^=]+=\"[^=,\"]+\",)+`)\n\n// SLIPlugin is the getting started plugin example.\n//\n// It will return an Sloth error ratio raw query that returns the error ratio of HTTP requests based\n// on the HTTP response status code, taking 5xx and 429 as error events.\nfunc SLIPlugin(ctx context.Context, meta, labels, options map[string]string) (string, error) {\n    // Get job.\n    job, ok := options[\"job\"]\n    if !ok {\n        return \"\", fmt.Errorf(\"job options is required\")\n    }\n\n    // Validate labels.\n    err := validateLabels(labels, \"owner\", \"tier\")\n    if err != nil {\n        return \"\", fmt.Errorf(\"invalid labels: %w\", err)\n    }\n\n    // Sanitize filter.\n    filter := options[\"filter\"]\n    if filter != \"\" {\n        filter = strings.Trim(filter, \"{}\")\n        filter = strings.Trim(filter, \",\")\n        filter = filter + \",\"\n        match := filterRegex.MatchString(filter)\n        if !match {\n            return \"\", fmt.Errorf(\"invalid prometheus filter: %s\", filter)\n        }\n    }\n\n    // Create query.\n    var b bytes.Buffer\n    data := map[string]string{\n        \"job\":    job,\n        \"filter\": filter,\n    }\n    err = queryTpl.Execute(&amp;b, data)\n    if err != nil {\n        return \"\", fmt.Errorf(\"could not execute template: %w\", err)\n    }\n\n    return b.String(), nil\n}\n\n// validateLabels will check the labels exist.\nfunc validateLabels(labels map[string]string, requiredKeys ...string) error {\n    for _, k := range requiredKeys {\n        v, ok := labels[k]\n        if !ok || (ok &amp;&amp; v == \"\") {\n            return fmt.Errorf(\"%q label is required\", k)\n        }\n    }\n\n    return nil\n}\n</code></pre>"},{"location":"examples/default/slo-plugin/","title":"SLO plugin","text":"SLO spec Generated Execution logs <pre><code>version: \"prometheus/v1\"\nservice: \"myservice\"\nlabels:\n  owner: \"myteam\"\n  repo: \"myorg/myservice\"\n  tier: \"2\"\nslo_plugins:\n  chain:\n    - id: \"sloth.dev/core/debug/v1\"\n      priority: 9999999\n      config: {msg: \"Plugin 99\"}\n    - id: \"sloth.dev/core/debug/v1\"\n      priority: -999999\n      config: {msg: \"Plugin 0\"}\n\nslos:\n  # We allow failing (5xx and 429) 1 request every 1000 requests (99.9%).\n  - name: \"requests-availability\"\n    objective: 99.9\n    description: \"Common SLO based on availability for HTTP request responses.\"\n    plugins:\n      chain:\n        - id: \"sloth.dev/core/debug/v1\"\n          priority: 1050\n          config: {msg: \"Plugin 5\"}\n        - id: \"sloth.dev/core/debug/v1\"\n          priority: -1000\n          config: {msg: \"Plugin 1\"}\n        - id: \"sloth.dev/core/debug/v1\"\n          priority: 1000\n          config: {msg: \"Plugin 4\"}\n        - id: \"sloth.dev/core/debug/v1\"\n          priority: -200\n          config: {msg: \"Plugin 2\"}\n        - id: \"sloth.dev/core/debug/v1\"\n          config: {msg: \"Plugin 3\"}\n\n    sli:\n      events:\n        error_query: sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[{{.window}}]))\n        total_query: sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[{{.window}}]))\n    alerting:\n      name: MyServiceHighErrorRate\n      labels:\n        category: \"availability\"\n      annotations:\n        # Overwrite default Sloth SLO alert summmary on ticket and page alerts.\n        summary: \"High error rate on 'myservice' requests responses\"\n      page_alert:\n        labels:\n          severity: pageteam\n          routing_key: myteam\n      ticket_alert:\n        labels:\n          severity: \"slack\"\n          slack_channel: \"#alerts-myteam\"\n</code></pre> <pre><code>---\n# Code generated by Sloth (dev): https://github.com/slok/sloth.\n# DO NOT EDIT.\n\ngroups:\n- name: sloth-slo-sli-recordings-myservice-requests-availability\n  rules:\n  - record: slo:sli_error:ratio_rate5m\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[5m])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[5m])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 5m\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate30m\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[30m])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[30m])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 30m\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate1h\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[1h])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1h])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 1h\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate2h\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[2h])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[2h])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 2h\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate6h\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[6h])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[6h])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 6h\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate1d\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[1d])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1d])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 1d\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate3d\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[3d])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[3d])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 3d\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate30d\n    expr: |\n      sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}[30d])\n      / ignoring (sloth_window)\n      count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}[30d])\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 30d\n      tier: \"2\"\n- name: sloth-slo-meta-recordings-myservice-requests-availability\n  rules:\n  - record: slo:objective:ratio\n    expr: vector(0.9990000000000001)\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      tier: \"2\"\n  - record: slo:error_budget:ratio\n    expr: vector(1-0.9990000000000001)\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      tier: \"2\"\n  - record: slo:time_period:days\n    expr: vector(30)\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      tier: \"2\"\n  - record: slo:current_burn_rate:ratio\n    expr: |\n      slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n      / on(sloth_id, sloth_slo, sloth_service) group_left\n      slo:error_budget:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      tier: \"2\"\n  - record: slo:period_burn_rate:ratio\n    expr: |\n      slo:sli_error:ratio_rate30d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n      / on(sloth_id, sloth_slo, sloth_service) group_left\n      slo:error_budget:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      tier: \"2\"\n  - record: slo:period_error_budget_remaining:ratio\n    expr: 1 - slo:period_burn_rate:ratio{sloth_id=\"myservice-requests-availability\",\n      sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      tier: \"2\"\n  - record: sloth_slo_info\n    expr: vector(1)\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_mode: cli-gen-prom\n      sloth_objective: \"99.9\"\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_spec: prometheus/v1\n      sloth_version: dev\n      tier: \"2\"\n- name: sloth-slo-alerts-myservice-requests-availability\n  rules:\n  - alert: MyServiceHighErrorRate\n    expr: |\n      (\n          max(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (14.4 * 0.0009999999999999432)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate1h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (14.4 * 0.0009999999999999432)) without (sloth_window)\n      )\n      or\n      (\n          max(slo:sli_error:ratio_rate30m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (6 * 0.0009999999999999432)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate6h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (6 * 0.0009999999999999432)) without (sloth_window)\n      )\n    labels:\n      category: availability\n      routing_key: myteam\n      severity: pageteam\n      sloth_severity: page\n    annotations:\n      summary: High error rate on 'myservice' requests responses\n      title: (page) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget\n        burn rate is too fast.\n  - alert: MyServiceHighErrorRate\n    expr: |\n      (\n          max(slo:sli_error:ratio_rate2h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (3 * 0.0009999999999999432)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate1d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (3 * 0.0009999999999999432)) without (sloth_window)\n      )\n      or\n      (\n          max(slo:sli_error:ratio_rate6h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (1 * 0.0009999999999999432)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate3d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (1 * 0.0009999999999999432)) without (sloth_window)\n      )\n    labels:\n      category: availability\n      severity: slack\n      slack_channel: '#alerts-myteam'\n      sloth_severity: ticket\n    annotations:\n      summary: High error rate on 'myservice' requests responses\n      title: (ticket) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget\n        burn rate is too fast.\n</code></pre> <pre><code>DEBU[0000] Debug level is enabled                        version=dev\nDEBU[0000] SLO plugin discovered and loaded              slo-plugin-id=sloth.dev/contrib/grouped_slo/v1 version=dev window=30d\nDEBU[0000] SLO plugin discovered and loaded              slo-plugin-id=sloth.dev/contrib/info_labels/v1 version=dev window=30d\nDEBU[0000] SLO plugin discovered and loaded              slo-plugin-id=sloth.dev/contrib/rule_intervals/v1 version=dev window=30d\nDEBU[0000] SLO plugin discovered and loaded              slo-plugin-id=github.com/slok/sloth-test-slo-plugins/spec_as_labels/v1 version=dev window=30d\nDEBU[0000] SLO plugin discovered and loaded              slo-plugin-id=sloth.dev/core/alert_rules/v1 version=dev window=30d\nDEBU[0000] SLO plugin discovered and loaded              slo-plugin-id=sloth.dev/core/debug/v1 version=dev window=30d\nDEBU[0000] SLO plugin discovered and loaded              slo-plugin-id=sloth.dev/core/metadata_rules/v1 version=dev window=30d\nDEBU[0000] SLO plugin discovered and loaded              slo-plugin-id=sloth.dev/core/noop/v1 version=dev window=30d\nDEBU[0000] SLO plugin discovered and loaded              slo-plugin-id=sloth.dev/core/sli_rules/v1 version=dev window=30d\nDEBU[0000] SLO plugin discovered and loaded              slo-plugin-id=sloth.dev/core/validate/v1 version=dev window=30d\nINFO[0000] Plugins loaded                                sli-plugins=0 slo-plugins=10 version=dev window=30d\nINFO[0000] SLO period windows loaded                     svc=alert.WindowsRepo version=dev window=30d windows=2\nINFO[0000] Generating from Kubernetes Prometheus spec    version=dev window=30d\nDEBU[0000] Multiwindow-multiburn alerts generated        out=- slo=myservice-requests-availability svc=generate.prometheus.Service version=dev window=30d\nDEBU[0000] SLO plugin discovered and loaded              slo-plugin-id=sloth.dev/core/alert_rules/v1 version=dev window=30d\nDEBU[0000] SLO plugin discovered and loaded              slo-plugin-id=sloth.dev/core/debug/v1 version=dev window=30d\nDEBU[0000] SLO plugin discovered and loaded              slo-plugin-id=sloth.dev/core/metadata_rules/v1 version=dev window=30d\nDEBU[0000] SLO plugin discovered and loaded              slo-plugin-id=sloth.dev/core/noop/v1 version=dev window=30d\nDEBU[0000] SLO plugin discovered and loaded              slo-plugin-id=sloth.dev/core/sli_rules/v1 version=dev window=30d\nDEBU[0000] SLO plugin discovered and loaded              slo-plugin-id=sloth.dev/core/validate/v1 version=dev window=30d\nINFO[0000] Plugins loaded                                sli-plugins=0 slo-plugins=10 version=dev window=30d\nINFO[0000] SLO period windows loaded                     svc=alert.WindowsRepo version=dev window=30d windows=2\nINFO[0000] Generating from Prometheus spec               version=dev window=30d\nDEBU[0000] Multiwindow-multiburn alerts generated        out=- slo=myservice-requests-availability svc=generate.prometheus.Service version=dev window=30d\nDEBU[0000] Plugin 0                                      out=- plugin=sloth.dev/core/debug/v1 slo=myservice-requests-availability svc=generate.prometheus.Service version=dev window=30d\nDEBU[0000] Plugin 1                                      out=- plugin=sloth.dev/core/debug/v1 slo=myservice-requests-availability svc=generate.prometheus.Service version=dev window=30d\nDEBU[0000] Plugin 2                                      out=- plugin=sloth.dev/core/debug/v1 slo=myservice-requests-availability svc=generate.prometheus.Service version=dev window=30d\nDEBU[0000] Plugin 3                                      out=- plugin=sloth.dev/core/debug/v1 slo=myservice-requests-availability svc=generate.prometheus.Service version=dev window=30d\nDEBU[0000] Plugin 4                                      out=- plugin=sloth.dev/core/debug/v1 slo=myservice-requests-availability svc=generate.prometheus.Service version=dev window=30d\nDEBU[0000] Plugin 5                                      out=- plugin=sloth.dev/core/debug/v1 slo=myservice-requests-availability svc=generate.prometheus.Service version=dev window=30d\nDEBU[0000] Plugin 99                                     out=- plugin=sloth.dev/core/debug/v1 slo=myservice-requests-availability svc=generate.prometheus.Service version=dev window=30d\nINFO[0000] Prometheus rules written                      groups=3 out=- svc=storageio.StdPrometheusGroupedRulesYAMLRepo version=dev window=30d\n</code></pre>"},{"location":"examples/kubernetes/getting-started/","title":"Getting started","text":"SLO spec Generated <pre><code># This example shows the same example as getting-started.yml but using Sloth Kubernetes CRD.\n# It will generate the Prometheus rules in a Kubernetes prometheus-operator PrometheusRules CRD.\n#\n# `sloth generate -i ./examples/k8s-getting-started.yml`\n#\napiVersion: sloth.slok.dev/v1\nkind: PrometheusServiceLevel\nmetadata:\n  name: sloth-slo-my-service\n  namespace: monitoring\nspec:\n  service: \"myservice\"\n  labels:\n    owner: \"myteam\"\n    repo: \"myorg/myservice\"\n    tier: \"2\"\n  slos:\n    - name: \"requests-availability\"\n      objective: 99.9\n      description: \"Common SLO based on availability for HTTP request responses.\"\n      sli:\n        events:\n          errorQuery: sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[{{.window}}]))\n          totalQuery: sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[{{.window}}]))\n      alerting:\n        name: MyServiceHighErrorRate\n        labels:\n          category: \"availability\"\n        annotations:\n          summary: \"High error rate on 'myservice' requests responses\"\n        pageAlert:\n          labels:\n            severity: pageteam\n            routing_key: myteam\n        ticketAlert:\n          labels:\n            severity: \"slack\"\n            slack_channel: \"#alerts-myteam\"\n</code></pre> <pre><code>---\n# Code generated by Sloth (dev): https://github.com/slok/sloth.\n# DO NOT EDIT.\n\napiVersion: monitoring.coreos.com/v1\nkind: PrometheusRule\nmetadata:\n  creationTimestamp: null\n  labels:\n    app.kubernetes.io/component: SLO\n    app.kubernetes.io/managed-by: sloth\n  name: sloth-slo-my-service\n  namespace: monitoring\nspec:\n  groups:\n  - name: sloth-slo-sli-recordings-myservice-requests-availability\n    rules:\n    - expr: |\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[5m])))\n        /\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[5m])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_window: 5m\n        tier: \"2\"\n      record: slo:sli_error:ratio_rate5m\n    - expr: |\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[30m])))\n        /\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[30m])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_window: 30m\n        tier: \"2\"\n      record: slo:sli_error:ratio_rate30m\n    - expr: |\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[1h])))\n        /\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1h])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_window: 1h\n        tier: \"2\"\n      record: slo:sli_error:ratio_rate1h\n    - expr: |\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[2h])))\n        /\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[2h])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_window: 2h\n        tier: \"2\"\n      record: slo:sli_error:ratio_rate2h\n    - expr: |\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[6h])))\n        /\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[6h])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_window: 6h\n        tier: \"2\"\n      record: slo:sli_error:ratio_rate6h\n    - expr: |\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[1d])))\n        /\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1d])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_window: 1d\n        tier: \"2\"\n      record: slo:sli_error:ratio_rate1d\n    - expr: |\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[3d])))\n        /\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[3d])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_window: 3d\n        tier: \"2\"\n      record: slo:sli_error:ratio_rate3d\n    - expr: |\n        sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}[30d])\n        / ignoring (sloth_window)\n        count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}[30d])\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_window: 30d\n        tier: \"2\"\n      record: slo:sli_error:ratio_rate30d\n  - name: sloth-slo-meta-recordings-myservice-requests-availability\n    rules:\n    - expr: vector(0.9990000000000001)\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        tier: \"2\"\n      record: slo:objective:ratio\n    - expr: vector(1-0.9990000000000001)\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        tier: \"2\"\n      record: slo:error_budget:ratio\n    - expr: vector(30)\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        tier: \"2\"\n      record: slo:time_period:days\n    - expr: |\n        slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n        / on(sloth_id, sloth_slo, sloth_service) group_left\n        slo:error_budget:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        tier: \"2\"\n      record: slo:current_burn_rate:ratio\n    - expr: |\n        slo:sli_error:ratio_rate30d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n        / on(sloth_id, sloth_slo, sloth_service) group_left\n        slo:error_budget:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        tier: \"2\"\n      record: slo:period_burn_rate:ratio\n    - expr: 1 - slo:period_burn_rate:ratio{sloth_id=\"myservice-requests-availability\",\n        sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        tier: \"2\"\n      record: slo:period_error_budget_remaining:ratio\n    - expr: vector(1)\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_mode: cli-gen-k8s\n        sloth_objective: \"99.9\"\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_spec: sloth.slok.dev/v1\n        sloth_version: dev\n        tier: \"2\"\n      record: sloth_slo_info\n  - name: sloth-slo-alerts-myservice-requests-availability\n    rules:\n    - alert: MyServiceHighErrorRate\n      annotations:\n        summary: High error rate on 'myservice' requests responses\n        title: (page) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget\n          burn rate is too fast.\n      expr: |\n        (\n            max(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (14.4 * 0.0009999999999999432)) without (sloth_window)\n            and\n            max(slo:sli_error:ratio_rate1h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (14.4 * 0.0009999999999999432)) without (sloth_window)\n        )\n        or\n        (\n            max(slo:sli_error:ratio_rate30m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (6 * 0.0009999999999999432)) without (sloth_window)\n            and\n            max(slo:sli_error:ratio_rate6h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (6 * 0.0009999999999999432)) without (sloth_window)\n        )\n      labels:\n        category: availability\n        routing_key: myteam\n        severity: pageteam\n        sloth_severity: page\n    - alert: MyServiceHighErrorRate\n      annotations:\n        summary: High error rate on 'myservice' requests responses\n        title: (ticket) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error\n          budget burn rate is too fast.\n      expr: |\n        (\n            max(slo:sli_error:ratio_rate2h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (3 * 0.0009999999999999432)) without (sloth_window)\n            and\n            max(slo:sli_error:ratio_rate1d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (3 * 0.0009999999999999432)) without (sloth_window)\n        )\n        or\n        (\n            max(slo:sli_error:ratio_rate6h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (1 * 0.0009999999999999432)) without (sloth_window)\n            and\n            max(slo:sli_error:ratio_rate3d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (1 * 0.0009999999999999432)) without (sloth_window)\n        )\n      labels:\n        category: availability\n        severity: slack\n        slack_channel: '#alerts-myteam'\n        sloth_severity: ticket\n</code></pre>"},{"location":"examples/kubernetes/home-wifi/","title":"Home WiFi","text":"SLO spec Generated <pre><code># This example shows the same example as home-wifi.yml but using Sloth Kubernetes CRD.\n# It will generate the Prometheus rules in a Kubernetes prometheus-operator PrometheusRules CRD.\n#\n# `sloth generate -i ./examples/k8s-home-wifi.yml`\n#\napiVersion: sloth.slok.dev/v1\nkind: PrometheusServiceLevel\nmetadata:\n  name: sloth-slo-home-wifi\n  namespace: monitoring\n  labels:\n    prometheus: prometheus\n    role: alert-rules\n    app: sloth\nspec:\n  service: \"home-wifi\"\n  labels:\n    cluster: \"valhalla\"\n    component: \"ubiquiti\"\n    context: \"home\"\n  slos:\n    - name: \"good-wifi-client-satisfaction\"\n      objective: 95\n      description: \"Will warn us that we don't have a good wifi at home.\"\n      sli:\n        events:\n          errorQuery: sum_over_time((count(unifipoller_client_satisfaction_ratio &lt; 0.75))[{{.window}}:]) OR on() vector(0)\n          totalQuery: sum_over_time((count(unifipoller_client_satisfaction_ratio))[{{.window}}:])\n      alerting:\n        name: GoodWifiClientSatisfaction\n        pageAlert:\n          labels:\n            severity: home\n        ticketAlert:\n          labels:\n            severity: warning\n\n    - name: \"risk-wifi-client-satisfaction\"\n      objective: 99.9\n      description: \"Will warn us that we something very bad is happenning with our home wifi.\"\n      sli:\n        events:\n          errorQuery: sum_over_time((count(unifipoller_client_satisfaction_ratio &lt; 0.5))[{{.window}}:]) OR on() vector(0)\n          totalQuery: sum_over_time((count(unifipoller_client_satisfaction_ratio))[{{.window}}:])\n      alerting:\n        name: RiskWifiClientSatisfaction\n        pageAlert:\n          labels:\n            severity: home\n        ticketAlert:\n          labels:\n            severity: warning\n</code></pre> <pre><code>---\n# Code generated by Sloth (dev): https://github.com/slok/sloth.\n# DO NOT EDIT.\n\napiVersion: monitoring.coreos.com/v1\nkind: PrometheusRule\nmetadata:\n  creationTimestamp: null\n  labels:\n    app: sloth\n    app.kubernetes.io/component: SLO\n    app.kubernetes.io/managed-by: sloth\n    prometheus: prometheus\n    role: alert-rules\n  name: sloth-slo-home-wifi\n  namespace: monitoring\nspec:\n  groups:\n  - name: sloth-slo-sli-recordings-home-wifi-good-wifi-client-satisfaction\n    rules:\n    - expr: |\n        (sum_over_time((count(unifipoller_client_satisfaction_ratio &lt; 0.75))[5m:]) OR on() vector(0))\n        /\n        (sum_over_time((count(unifipoller_client_satisfaction_ratio))[5m:]))\n      labels:\n        cluster: valhalla\n        cmd: examplesgen.sh\n        component: ubiquiti\n        context: home\n        sloth_id: home-wifi-good-wifi-client-satisfaction\n        sloth_service: home-wifi\n        sloth_slo: good-wifi-client-satisfaction\n        sloth_window: 5m\n      record: slo:sli_error:ratio_rate5m\n    - expr: |\n        (sum_over_time((count(unifipoller_client_satisfaction_ratio &lt; 0.75))[30m:]) OR on() vector(0))\n        /\n        (sum_over_time((count(unifipoller_client_satisfaction_ratio))[30m:]))\n      labels:\n        cluster: valhalla\n        cmd: examplesgen.sh\n        component: ubiquiti\n        context: home\n        sloth_id: home-wifi-good-wifi-client-satisfaction\n        sloth_service: home-wifi\n        sloth_slo: good-wifi-client-satisfaction\n        sloth_window: 30m\n      record: slo:sli_error:ratio_rate30m\n    - expr: |\n        (sum_over_time((count(unifipoller_client_satisfaction_ratio &lt; 0.75))[1h:]) OR on() vector(0))\n        /\n        (sum_over_time((count(unifipoller_client_satisfaction_ratio))[1h:]))\n      labels:\n        cluster: valhalla\n        cmd: examplesgen.sh\n        component: ubiquiti\n        context: home\n        sloth_id: home-wifi-good-wifi-client-satisfaction\n        sloth_service: home-wifi\n        sloth_slo: good-wifi-client-satisfaction\n        sloth_window: 1h\n      record: slo:sli_error:ratio_rate1h\n    - expr: |\n        (sum_over_time((count(unifipoller_client_satisfaction_ratio &lt; 0.75))[2h:]) OR on() vector(0))\n        /\n        (sum_over_time((count(unifipoller_client_satisfaction_ratio))[2h:]))\n      labels:\n        cluster: valhalla\n        cmd: examplesgen.sh\n        component: ubiquiti\n        context: home\n        sloth_id: home-wifi-good-wifi-client-satisfaction\n        sloth_service: home-wifi\n        sloth_slo: good-wifi-client-satisfaction\n        sloth_window: 2h\n      record: slo:sli_error:ratio_rate2h\n    - expr: |\n        (sum_over_time((count(unifipoller_client_satisfaction_ratio &lt; 0.75))[6h:]) OR on() vector(0))\n        /\n        (sum_over_time((count(unifipoller_client_satisfaction_ratio))[6h:]))\n      labels:\n        cluster: valhalla\n        cmd: examplesgen.sh\n        component: ubiquiti\n        context: home\n        sloth_id: home-wifi-good-wifi-client-satisfaction\n        sloth_service: home-wifi\n        sloth_slo: good-wifi-client-satisfaction\n        sloth_window: 6h\n      record: slo:sli_error:ratio_rate6h\n    - expr: |\n        (sum_over_time((count(unifipoller_client_satisfaction_ratio &lt; 0.75))[1d:]) OR on() vector(0))\n        /\n        (sum_over_time((count(unifipoller_client_satisfaction_ratio))[1d:]))\n      labels:\n        cluster: valhalla\n        cmd: examplesgen.sh\n        component: ubiquiti\n        context: home\n        sloth_id: home-wifi-good-wifi-client-satisfaction\n        sloth_service: home-wifi\n        sloth_slo: good-wifi-client-satisfaction\n        sloth_window: 1d\n      record: slo:sli_error:ratio_rate1d\n    - expr: |\n        (sum_over_time((count(unifipoller_client_satisfaction_ratio &lt; 0.75))[3d:]) OR on() vector(0))\n        /\n        (sum_over_time((count(unifipoller_client_satisfaction_ratio))[3d:]))\n      labels:\n        cluster: valhalla\n        cmd: examplesgen.sh\n        component: ubiquiti\n        context: home\n        sloth_id: home-wifi-good-wifi-client-satisfaction\n        sloth_service: home-wifi\n        sloth_slo: good-wifi-client-satisfaction\n        sloth_window: 3d\n      record: slo:sli_error:ratio_rate3d\n    - expr: |\n        sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"}[30d])\n        / ignoring (sloth_window)\n        count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"}[30d])\n      labels:\n        cluster: valhalla\n        cmd: examplesgen.sh\n        component: ubiquiti\n        context: home\n        sloth_id: home-wifi-good-wifi-client-satisfaction\n        sloth_service: home-wifi\n        sloth_slo: good-wifi-client-satisfaction\n        sloth_window: 30d\n      record: slo:sli_error:ratio_rate30d\n  - name: sloth-slo-meta-recordings-home-wifi-good-wifi-client-satisfaction\n    rules:\n    - expr: vector(0.95)\n      labels:\n        cluster: valhalla\n        cmd: examplesgen.sh\n        component: ubiquiti\n        context: home\n        sloth_id: home-wifi-good-wifi-client-satisfaction\n        sloth_service: home-wifi\n        sloth_slo: good-wifi-client-satisfaction\n      record: slo:objective:ratio\n    - expr: vector(1-0.95)\n      labels:\n        cluster: valhalla\n        cmd: examplesgen.sh\n        component: ubiquiti\n        context: home\n        sloth_id: home-wifi-good-wifi-client-satisfaction\n        sloth_service: home-wifi\n        sloth_slo: good-wifi-client-satisfaction\n      record: slo:error_budget:ratio\n    - expr: vector(30)\n      labels:\n        cluster: valhalla\n        cmd: examplesgen.sh\n        component: ubiquiti\n        context: home\n        sloth_id: home-wifi-good-wifi-client-satisfaction\n        sloth_service: home-wifi\n        sloth_slo: good-wifi-client-satisfaction\n      record: slo:time_period:days\n    - expr: |\n        slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"}\n        / on(sloth_id, sloth_slo, sloth_service) group_left\n        slo:error_budget:ratio{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"}\n      labels:\n        cluster: valhalla\n        cmd: examplesgen.sh\n        component: ubiquiti\n        context: home\n        sloth_id: home-wifi-good-wifi-client-satisfaction\n        sloth_service: home-wifi\n        sloth_slo: good-wifi-client-satisfaction\n      record: slo:current_burn_rate:ratio\n    - expr: |\n        slo:sli_error:ratio_rate30d{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"}\n        / on(sloth_id, sloth_slo, sloth_service) group_left\n        slo:error_budget:ratio{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"}\n      labels:\n        cluster: valhalla\n        cmd: examplesgen.sh\n        component: ubiquiti\n        context: home\n        sloth_id: home-wifi-good-wifi-client-satisfaction\n        sloth_service: home-wifi\n        sloth_slo: good-wifi-client-satisfaction\n      record: slo:period_burn_rate:ratio\n    - expr: 1 - slo:period_burn_rate:ratio{sloth_id=\"home-wifi-good-wifi-client-satisfaction\",\n        sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"}\n      labels:\n        cluster: valhalla\n        cmd: examplesgen.sh\n        component: ubiquiti\n        context: home\n        sloth_id: home-wifi-good-wifi-client-satisfaction\n        sloth_service: home-wifi\n        sloth_slo: good-wifi-client-satisfaction\n      record: slo:period_error_budget_remaining:ratio\n    - expr: vector(1)\n      labels:\n        cluster: valhalla\n        cmd: examplesgen.sh\n        component: ubiquiti\n        context: home\n        sloth_id: home-wifi-good-wifi-client-satisfaction\n        sloth_mode: cli-gen-k8s\n        sloth_objective: \"95\"\n        sloth_service: home-wifi\n        sloth_slo: good-wifi-client-satisfaction\n        sloth_spec: sloth.slok.dev/v1\n        sloth_version: dev\n      record: sloth_slo_info\n  - name: sloth-slo-alerts-home-wifi-good-wifi-client-satisfaction\n    rules:\n    - alert: GoodWifiClientSatisfaction\n      annotations:\n        summary: '{{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget\n          burn rate is over expected.'\n        title: (page) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget\n          burn rate is too fast.\n      expr: |\n        (\n            max(slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} &gt; (14.4 * 0.05)) without (sloth_window)\n            and\n            max(slo:sli_error:ratio_rate1h{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} &gt; (14.4 * 0.05)) without (sloth_window)\n        )\n        or\n        (\n            max(slo:sli_error:ratio_rate30m{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} &gt; (6 * 0.05)) without (sloth_window)\n            and\n            max(slo:sli_error:ratio_rate6h{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} &gt; (6 * 0.05)) without (sloth_window)\n        )\n      labels:\n        severity: home\n        sloth_severity: page\n    - alert: GoodWifiClientSatisfaction\n      annotations:\n        summary: '{{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget\n          burn rate is over expected.'\n        title: (ticket) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error\n          budget burn rate is too fast.\n      expr: |\n        (\n            max(slo:sli_error:ratio_rate2h{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} &gt; (3 * 0.05)) without (sloth_window)\n            and\n            max(slo:sli_error:ratio_rate1d{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} &gt; (3 * 0.05)) without (sloth_window)\n        )\n        or\n        (\n            max(slo:sli_error:ratio_rate6h{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} &gt; (1 * 0.05)) without (sloth_window)\n            and\n            max(slo:sli_error:ratio_rate3d{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} &gt; (1 * 0.05)) without (sloth_window)\n        )\n      labels:\n        severity: warning\n        sloth_severity: ticket\n  - name: sloth-slo-sli-recordings-home-wifi-risk-wifi-client-satisfaction\n    rules:\n    - expr: |\n        (sum_over_time((count(unifipoller_client_satisfaction_ratio &lt; 0.5))[5m:]) OR on() vector(0))\n        /\n        (sum_over_time((count(unifipoller_client_satisfaction_ratio))[5m:]))\n      labels:\n        cluster: valhalla\n        cmd: examplesgen.sh\n        component: ubiquiti\n        context: home\n        sloth_id: home-wifi-risk-wifi-client-satisfaction\n        sloth_service: home-wifi\n        sloth_slo: risk-wifi-client-satisfaction\n        sloth_window: 5m\n      record: slo:sli_error:ratio_rate5m\n    - expr: |\n        (sum_over_time((count(unifipoller_client_satisfaction_ratio &lt; 0.5))[30m:]) OR on() vector(0))\n        /\n        (sum_over_time((count(unifipoller_client_satisfaction_ratio))[30m:]))\n      labels:\n        cluster: valhalla\n        cmd: examplesgen.sh\n        component: ubiquiti\n        context: home\n        sloth_id: home-wifi-risk-wifi-client-satisfaction\n        sloth_service: home-wifi\n        sloth_slo: risk-wifi-client-satisfaction\n        sloth_window: 30m\n      record: slo:sli_error:ratio_rate30m\n    - expr: |\n        (sum_over_time((count(unifipoller_client_satisfaction_ratio &lt; 0.5))[1h:]) OR on() vector(0))\n        /\n        (sum_over_time((count(unifipoller_client_satisfaction_ratio))[1h:]))\n      labels:\n        cluster: valhalla\n        cmd: examplesgen.sh\n        component: ubiquiti\n        context: home\n        sloth_id: home-wifi-risk-wifi-client-satisfaction\n        sloth_service: home-wifi\n        sloth_slo: risk-wifi-client-satisfaction\n        sloth_window: 1h\n      record: slo:sli_error:ratio_rate1h\n    - expr: |\n        (sum_over_time((count(unifipoller_client_satisfaction_ratio &lt; 0.5))[2h:]) OR on() vector(0))\n        /\n        (sum_over_time((count(unifipoller_client_satisfaction_ratio))[2h:]))\n      labels:\n        cluster: valhalla\n        cmd: examplesgen.sh\n        component: ubiquiti\n        context: home\n        sloth_id: home-wifi-risk-wifi-client-satisfaction\n        sloth_service: home-wifi\n        sloth_slo: risk-wifi-client-satisfaction\n        sloth_window: 2h\n      record: slo:sli_error:ratio_rate2h\n    - expr: |\n        (sum_over_time((count(unifipoller_client_satisfaction_ratio &lt; 0.5))[6h:]) OR on() vector(0))\n        /\n        (sum_over_time((count(unifipoller_client_satisfaction_ratio))[6h:]))\n      labels:\n        cluster: valhalla\n        cmd: examplesgen.sh\n        component: ubiquiti\n        context: home\n        sloth_id: home-wifi-risk-wifi-client-satisfaction\n        sloth_service: home-wifi\n        sloth_slo: risk-wifi-client-satisfaction\n        sloth_window: 6h\n      record: slo:sli_error:ratio_rate6h\n    - expr: |\n        (sum_over_time((count(unifipoller_client_satisfaction_ratio &lt; 0.5))[1d:]) OR on() vector(0))\n        /\n        (sum_over_time((count(unifipoller_client_satisfaction_ratio))[1d:]))\n      labels:\n        cluster: valhalla\n        cmd: examplesgen.sh\n        component: ubiquiti\n        context: home\n        sloth_id: home-wifi-risk-wifi-client-satisfaction\n        sloth_service: home-wifi\n        sloth_slo: risk-wifi-client-satisfaction\n        sloth_window: 1d\n      record: slo:sli_error:ratio_rate1d\n    - expr: |\n        (sum_over_time((count(unifipoller_client_satisfaction_ratio &lt; 0.5))[3d:]) OR on() vector(0))\n        /\n        (sum_over_time((count(unifipoller_client_satisfaction_ratio))[3d:]))\n      labels:\n        cluster: valhalla\n        cmd: examplesgen.sh\n        component: ubiquiti\n        context: home\n        sloth_id: home-wifi-risk-wifi-client-satisfaction\n        sloth_service: home-wifi\n        sloth_slo: risk-wifi-client-satisfaction\n        sloth_window: 3d\n      record: slo:sli_error:ratio_rate3d\n    - expr: |\n        sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"}[30d])\n        / ignoring (sloth_window)\n        count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"}[30d])\n      labels:\n        cluster: valhalla\n        cmd: examplesgen.sh\n        component: ubiquiti\n        context: home\n        sloth_id: home-wifi-risk-wifi-client-satisfaction\n        sloth_service: home-wifi\n        sloth_slo: risk-wifi-client-satisfaction\n        sloth_window: 30d\n      record: slo:sli_error:ratio_rate30d\n  - name: sloth-slo-meta-recordings-home-wifi-risk-wifi-client-satisfaction\n    rules:\n    - expr: vector(0.9990000000000001)\n      labels:\n        cluster: valhalla\n        cmd: examplesgen.sh\n        component: ubiquiti\n        context: home\n        sloth_id: home-wifi-risk-wifi-client-satisfaction\n        sloth_service: home-wifi\n        sloth_slo: risk-wifi-client-satisfaction\n      record: slo:objective:ratio\n    - expr: vector(1-0.9990000000000001)\n      labels:\n        cluster: valhalla\n        cmd: examplesgen.sh\n        component: ubiquiti\n        context: home\n        sloth_id: home-wifi-risk-wifi-client-satisfaction\n        sloth_service: home-wifi\n        sloth_slo: risk-wifi-client-satisfaction\n      record: slo:error_budget:ratio\n    - expr: vector(30)\n      labels:\n        cluster: valhalla\n        cmd: examplesgen.sh\n        component: ubiquiti\n        context: home\n        sloth_id: home-wifi-risk-wifi-client-satisfaction\n        sloth_service: home-wifi\n        sloth_slo: risk-wifi-client-satisfaction\n      record: slo:time_period:days\n    - expr: |\n        slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"}\n        / on(sloth_id, sloth_slo, sloth_service) group_left\n        slo:error_budget:ratio{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"}\n      labels:\n        cluster: valhalla\n        cmd: examplesgen.sh\n        component: ubiquiti\n        context: home\n        sloth_id: home-wifi-risk-wifi-client-satisfaction\n        sloth_service: home-wifi\n        sloth_slo: risk-wifi-client-satisfaction\n      record: slo:current_burn_rate:ratio\n    - expr: |\n        slo:sli_error:ratio_rate30d{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"}\n        / on(sloth_id, sloth_slo, sloth_service) group_left\n        slo:error_budget:ratio{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"}\n      labels:\n        cluster: valhalla\n        cmd: examplesgen.sh\n        component: ubiquiti\n        context: home\n        sloth_id: home-wifi-risk-wifi-client-satisfaction\n        sloth_service: home-wifi\n        sloth_slo: risk-wifi-client-satisfaction\n      record: slo:period_burn_rate:ratio\n    - expr: 1 - slo:period_burn_rate:ratio{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\",\n        sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"}\n      labels:\n        cluster: valhalla\n        cmd: examplesgen.sh\n        component: ubiquiti\n        context: home\n        sloth_id: home-wifi-risk-wifi-client-satisfaction\n        sloth_service: home-wifi\n        sloth_slo: risk-wifi-client-satisfaction\n      record: slo:period_error_budget_remaining:ratio\n    - expr: vector(1)\n      labels:\n        cluster: valhalla\n        cmd: examplesgen.sh\n        component: ubiquiti\n        context: home\n        sloth_id: home-wifi-risk-wifi-client-satisfaction\n        sloth_mode: cli-gen-k8s\n        sloth_objective: \"99.9\"\n        sloth_service: home-wifi\n        sloth_slo: risk-wifi-client-satisfaction\n        sloth_spec: sloth.slok.dev/v1\n        sloth_version: dev\n      record: sloth_slo_info\n  - name: sloth-slo-alerts-home-wifi-risk-wifi-client-satisfaction\n    rules:\n    - alert: RiskWifiClientSatisfaction\n      annotations:\n        summary: '{{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget\n          burn rate is over expected.'\n        title: (page) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget\n          burn rate is too fast.\n      expr: |\n        (\n            max(slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} &gt; (14.4 * 0.0009999999999999432)) without (sloth_window)\n            and\n            max(slo:sli_error:ratio_rate1h{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} &gt; (14.4 * 0.0009999999999999432)) without (sloth_window)\n        )\n        or\n        (\n            max(slo:sli_error:ratio_rate30m{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} &gt; (6 * 0.0009999999999999432)) without (sloth_window)\n            and\n            max(slo:sli_error:ratio_rate6h{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} &gt; (6 * 0.0009999999999999432)) without (sloth_window)\n        )\n      labels:\n        severity: home\n        sloth_severity: page\n    - alert: RiskWifiClientSatisfaction\n      annotations:\n        summary: '{{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget\n          burn rate is over expected.'\n        title: (ticket) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error\n          budget burn rate is too fast.\n      expr: |\n        (\n            max(slo:sli_error:ratio_rate2h{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} &gt; (3 * 0.0009999999999999432)) without (sloth_window)\n            and\n            max(slo:sli_error:ratio_rate1d{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} &gt; (3 * 0.0009999999999999432)) without (sloth_window)\n        )\n        or\n        (\n            max(slo:sli_error:ratio_rate6h{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} &gt; (1 * 0.0009999999999999432)) without (sloth_window)\n            and\n            max(slo:sli_error:ratio_rate3d{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} &gt; (1 * 0.0009999999999999432)) without (sloth_window)\n        )\n      labels:\n        severity: warning\n        sloth_severity: ticket\n</code></pre>"},{"location":"examples/kubernetes/multifile/","title":"Multi file","text":"SLO spec Generated <pre><code>---\n# This example shows the same example as getting-started.yml but using Sloth Kubernetes CRD and multifile.\n# It will generate the Prometheus rules in a Kubernetes prometheus-operator PrometheusRules CRD.\n#\n# `sloth generate -i ./examples/k8s-multifile.yml`\n#\napiVersion: sloth.slok.dev/v1\nkind: PrometheusServiceLevel\nmetadata:\n  name: sloth-slo-my-service\n  namespace: monitoring\nspec:\n  service: \"myservice\"\n  labels:\n    owner: \"myteam\"\n    repo: \"myorg/myservice\"\n    tier: \"2\"\n  slos:\n    - name: \"requests-availability\"\n      objective: 99.9\n      description: \"Common SLO based on availability for HTTP request responses.\"\n      sli:\n        events:\n          errorQuery: sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[{{.window}}]))\n          totalQuery: sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[{{.window}}]))\n      alerting:\n        name: MyServiceHighErrorRate\n        labels:\n          category: \"availability\"\n        annotations:\n          summary: \"High error rate on 'myservice' requests responses\"\n        pageAlert:\n          labels:\n            severity: pageteam\n            routing_key: myteam\n        ticketAlert:\n          labels:\n            severity: \"slack\"\n            slack_channel: \"#alerts-myteam\"\n---\napiVersion: sloth.slok.dev/v1\nkind: PrometheusServiceLevel\nmetadata:\n  name: sloth-slo-my-service2\n  namespace: monitoring\nspec:\n  service: \"myservice2\"\n  labels:\n    owner: \"myteam2\"\n    repo: \"myorg/myservice2\"\n    tier: \"1\"\n  slos:\n    - name: \"requests-availability\"\n      objective: 99.99\n      description: \"Common SLO based on availability for HTTP request responses.\"\n      sli:\n        events:\n          errorQuery: sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[{{.window}}]))\n          totalQuery: sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[{{.window}}]))\n      alerting:\n        name: MyServiceHighErrorRate\n        labels:\n          category: \"availability\"\n        annotations:\n          summary: \"High error rate on 'myservice' requests responses\"\n        pageAlert:\n          labels:\n            severity: pageteam\n            routing_key: myteam\n        ticketAlert:\n          labels:\n            severity: \"slack\"\n            slack_channel: \"#alerts-myteam\"\n</code></pre> <pre><code>---\n# Code generated by Sloth (dev): https://github.com/slok/sloth.\n# DO NOT EDIT.\n\napiVersion: monitoring.coreos.com/v1\nkind: PrometheusRule\nmetadata:\n  creationTimestamp: null\n  labels:\n    app.kubernetes.io/component: SLO\n    app.kubernetes.io/managed-by: sloth\n  name: sloth-slo-my-service\n  namespace: monitoring\nspec:\n  groups:\n  - name: sloth-slo-sli-recordings-myservice-requests-availability\n    rules:\n    - expr: |\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[5m])))\n        /\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[5m])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_window: 5m\n        tier: \"2\"\n      record: slo:sli_error:ratio_rate5m\n    - expr: |\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[30m])))\n        /\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[30m])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_window: 30m\n        tier: \"2\"\n      record: slo:sli_error:ratio_rate30m\n    - expr: |\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[1h])))\n        /\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1h])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_window: 1h\n        tier: \"2\"\n      record: slo:sli_error:ratio_rate1h\n    - expr: |\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[2h])))\n        /\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[2h])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_window: 2h\n        tier: \"2\"\n      record: slo:sli_error:ratio_rate2h\n    - expr: |\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[6h])))\n        /\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[6h])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_window: 6h\n        tier: \"2\"\n      record: slo:sli_error:ratio_rate6h\n    - expr: |\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[1d])))\n        /\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1d])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_window: 1d\n        tier: \"2\"\n      record: slo:sli_error:ratio_rate1d\n    - expr: |\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[3d])))\n        /\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[3d])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_window: 3d\n        tier: \"2\"\n      record: slo:sli_error:ratio_rate3d\n    - expr: |\n        sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}[30d])\n        / ignoring (sloth_window)\n        count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}[30d])\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_window: 30d\n        tier: \"2\"\n      record: slo:sli_error:ratio_rate30d\n  - name: sloth-slo-meta-recordings-myservice-requests-availability\n    rules:\n    - expr: vector(0.9990000000000001)\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        tier: \"2\"\n      record: slo:objective:ratio\n    - expr: vector(1-0.9990000000000001)\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        tier: \"2\"\n      record: slo:error_budget:ratio\n    - expr: vector(30)\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        tier: \"2\"\n      record: slo:time_period:days\n    - expr: |\n        slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n        / on(sloth_id, sloth_slo, sloth_service) group_left\n        slo:error_budget:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        tier: \"2\"\n      record: slo:current_burn_rate:ratio\n    - expr: |\n        slo:sli_error:ratio_rate30d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n        / on(sloth_id, sloth_slo, sloth_service) group_left\n        slo:error_budget:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        tier: \"2\"\n      record: slo:period_burn_rate:ratio\n    - expr: 1 - slo:period_burn_rate:ratio{sloth_id=\"myservice-requests-availability\",\n        sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        tier: \"2\"\n      record: slo:period_error_budget_remaining:ratio\n    - expr: vector(1)\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_mode: cli-gen-k8s\n        sloth_objective: \"99.9\"\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_spec: sloth.slok.dev/v1\n        sloth_version: dev\n        tier: \"2\"\n      record: sloth_slo_info\n  - name: sloth-slo-alerts-myservice-requests-availability\n    rules:\n    - alert: MyServiceHighErrorRate\n      annotations:\n        summary: High error rate on 'myservice' requests responses\n        title: (page) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget\n          burn rate is too fast.\n      expr: |\n        (\n            max(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (14.4 * 0.0009999999999999432)) without (sloth_window)\n            and\n            max(slo:sli_error:ratio_rate1h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (14.4 * 0.0009999999999999432)) without (sloth_window)\n        )\n        or\n        (\n            max(slo:sli_error:ratio_rate30m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (6 * 0.0009999999999999432)) without (sloth_window)\n            and\n            max(slo:sli_error:ratio_rate6h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (6 * 0.0009999999999999432)) without (sloth_window)\n        )\n      labels:\n        category: availability\n        routing_key: myteam\n        severity: pageteam\n        sloth_severity: page\n    - alert: MyServiceHighErrorRate\n      annotations:\n        summary: High error rate on 'myservice' requests responses\n        title: (ticket) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error\n          budget burn rate is too fast.\n      expr: |\n        (\n            max(slo:sli_error:ratio_rate2h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (3 * 0.0009999999999999432)) without (sloth_window)\n            and\n            max(slo:sli_error:ratio_rate1d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (3 * 0.0009999999999999432)) without (sloth_window)\n        )\n        or\n        (\n            max(slo:sli_error:ratio_rate6h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (1 * 0.0009999999999999432)) without (sloth_window)\n            and\n            max(slo:sli_error:ratio_rate3d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (1 * 0.0009999999999999432)) without (sloth_window)\n        )\n      labels:\n        category: availability\n        severity: slack\n        slack_channel: '#alerts-myteam'\n        sloth_severity: ticket\n\n---\n# Code generated by Sloth (dev): https://github.com/slok/sloth.\n# DO NOT EDIT.\n\napiVersion: monitoring.coreos.com/v1\nkind: PrometheusRule\nmetadata:\n  creationTimestamp: null\n  labels:\n    app.kubernetes.io/component: SLO\n    app.kubernetes.io/managed-by: sloth\n  name: sloth-slo-my-service2\n  namespace: monitoring\nspec:\n  groups:\n  - name: sloth-slo-sli-recordings-myservice2-requests-availability\n    rules:\n    - expr: |\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[5m])))\n        /\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[5m])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam2\n        repo: myorg/myservice2\n        sloth_id: myservice2-requests-availability\n        sloth_service: myservice2\n        sloth_slo: requests-availability\n        sloth_window: 5m\n        tier: \"1\"\n      record: slo:sli_error:ratio_rate5m\n    - expr: |\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[30m])))\n        /\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[30m])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam2\n        repo: myorg/myservice2\n        sloth_id: myservice2-requests-availability\n        sloth_service: myservice2\n        sloth_slo: requests-availability\n        sloth_window: 30m\n        tier: \"1\"\n      record: slo:sli_error:ratio_rate30m\n    - expr: |\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[1h])))\n        /\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1h])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam2\n        repo: myorg/myservice2\n        sloth_id: myservice2-requests-availability\n        sloth_service: myservice2\n        sloth_slo: requests-availability\n        sloth_window: 1h\n        tier: \"1\"\n      record: slo:sli_error:ratio_rate1h\n    - expr: |\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[2h])))\n        /\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[2h])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam2\n        repo: myorg/myservice2\n        sloth_id: myservice2-requests-availability\n        sloth_service: myservice2\n        sloth_slo: requests-availability\n        sloth_window: 2h\n        tier: \"1\"\n      record: slo:sli_error:ratio_rate2h\n    - expr: |\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[6h])))\n        /\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[6h])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam2\n        repo: myorg/myservice2\n        sloth_id: myservice2-requests-availability\n        sloth_service: myservice2\n        sloth_slo: requests-availability\n        sloth_window: 6h\n        tier: \"1\"\n      record: slo:sli_error:ratio_rate6h\n    - expr: |\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[1d])))\n        /\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1d])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam2\n        repo: myorg/myservice2\n        sloth_id: myservice2-requests-availability\n        sloth_service: myservice2\n        sloth_slo: requests-availability\n        sloth_window: 1d\n        tier: \"1\"\n      record: slo:sli_error:ratio_rate1d\n    - expr: |\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[3d])))\n        /\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[3d])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam2\n        repo: myorg/myservice2\n        sloth_id: myservice2-requests-availability\n        sloth_service: myservice2\n        sloth_slo: requests-availability\n        sloth_window: 3d\n        tier: \"1\"\n      record: slo:sli_error:ratio_rate3d\n    - expr: |\n        sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"}[30d])\n        / ignoring (sloth_window)\n        count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"}[30d])\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam2\n        repo: myorg/myservice2\n        sloth_id: myservice2-requests-availability\n        sloth_service: myservice2\n        sloth_slo: requests-availability\n        sloth_window: 30d\n        tier: \"1\"\n      record: slo:sli_error:ratio_rate30d\n  - name: sloth-slo-meta-recordings-myservice2-requests-availability\n    rules:\n    - expr: vector(0.9998999999999999)\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam2\n        repo: myorg/myservice2\n        sloth_id: myservice2-requests-availability\n        sloth_service: myservice2\n        sloth_slo: requests-availability\n        tier: \"1\"\n      record: slo:objective:ratio\n    - expr: vector(1-0.9998999999999999)\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam2\n        repo: myorg/myservice2\n        sloth_id: myservice2-requests-availability\n        sloth_service: myservice2\n        sloth_slo: requests-availability\n        tier: \"1\"\n      record: slo:error_budget:ratio\n    - expr: vector(30)\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam2\n        repo: myorg/myservice2\n        sloth_id: myservice2-requests-availability\n        sloth_service: myservice2\n        sloth_slo: requests-availability\n        tier: \"1\"\n      record: slo:time_period:days\n    - expr: |\n        slo:sli_error:ratio_rate5m{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"}\n        / on(sloth_id, sloth_slo, sloth_service) group_left\n        slo:error_budget:ratio{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"}\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam2\n        repo: myorg/myservice2\n        sloth_id: myservice2-requests-availability\n        sloth_service: myservice2\n        sloth_slo: requests-availability\n        tier: \"1\"\n      record: slo:current_burn_rate:ratio\n    - expr: |\n        slo:sli_error:ratio_rate30d{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"}\n        / on(sloth_id, sloth_slo, sloth_service) group_left\n        slo:error_budget:ratio{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"}\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam2\n        repo: myorg/myservice2\n        sloth_id: myservice2-requests-availability\n        sloth_service: myservice2\n        sloth_slo: requests-availability\n        tier: \"1\"\n      record: slo:period_burn_rate:ratio\n    - expr: 1 - slo:period_burn_rate:ratio{sloth_id=\"myservice2-requests-availability\",\n        sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"}\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam2\n        repo: myorg/myservice2\n        sloth_id: myservice2-requests-availability\n        sloth_service: myservice2\n        sloth_slo: requests-availability\n        tier: \"1\"\n      record: slo:period_error_budget_remaining:ratio\n    - expr: vector(1)\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam2\n        repo: myorg/myservice2\n        sloth_id: myservice2-requests-availability\n        sloth_mode: cli-gen-k8s\n        sloth_objective: \"99.99\"\n        sloth_service: myservice2\n        sloth_slo: requests-availability\n        sloth_spec: sloth.slok.dev/v1\n        sloth_version: dev\n        tier: \"1\"\n      record: sloth_slo_info\n  - name: sloth-slo-alerts-myservice2-requests-availability\n    rules:\n    - alert: MyServiceHighErrorRate\n      annotations:\n        summary: High error rate on 'myservice' requests responses\n        title: (page) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget\n          burn rate is too fast.\n      expr: |\n        (\n            max(slo:sli_error:ratio_rate5m{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} &gt; (14.4 * 0.00010000000000005117)) without (sloth_window)\n            and\n            max(slo:sli_error:ratio_rate1h{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} &gt; (14.4 * 0.00010000000000005117)) without (sloth_window)\n        )\n        or\n        (\n            max(slo:sli_error:ratio_rate30m{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} &gt; (6 * 0.00010000000000005117)) without (sloth_window)\n            and\n            max(slo:sli_error:ratio_rate6h{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} &gt; (6 * 0.00010000000000005117)) without (sloth_window)\n        )\n      labels:\n        category: availability\n        routing_key: myteam\n        severity: pageteam\n        sloth_severity: page\n    - alert: MyServiceHighErrorRate\n      annotations:\n        summary: High error rate on 'myservice' requests responses\n        title: (ticket) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error\n          budget burn rate is too fast.\n      expr: |\n        (\n            max(slo:sli_error:ratio_rate2h{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} &gt; (3 * 0.00010000000000005117)) without (sloth_window)\n            and\n            max(slo:sli_error:ratio_rate1d{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} &gt; (3 * 0.00010000000000005117)) without (sloth_window)\n        )\n        or\n        (\n            max(slo:sli_error:ratio_rate6h{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} &gt; (1 * 0.00010000000000005117)) without (sloth_window)\n            and\n            max(slo:sli_error:ratio_rate3d{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} &gt; (1 * 0.00010000000000005117)) without (sloth_window)\n        )\n      labels:\n        category: availability\n        severity: slack\n        slack_channel: '#alerts-myteam'\n        sloth_severity: ticket\n</code></pre>"},{"location":"examples/kubernetes/sli-plugin/","title":"SLI plugin","text":"SLO spec Generated SLI Plugin <pre><code># This example shows the same example as home-wifi.yml but using Sloth Kubernetes CRD.\n# It will generate the Prometheus rules in a Kubernetes prometheus-operator PrometheusRules CRD.\n#\n# `sloth generate -i ./examples/plugin-k8s-home-wifi.yml` -p ./examples\n#\napiVersion: sloth.slok.dev/v1\nkind: PrometheusServiceLevel\nmetadata:\n  name: sloth-slo-home-wifi\n  namespace: monitoring\n  labels:\n    prometheus: prometheus\n    role: alert-rules\n    app: sloth\nspec:\n  service: \"myservice\"\n  labels:\n    owner: \"myteam\"\n    repo: \"myorg/myservice\"\n    tier: \"2\"\n  slos:\n    # We allow failing (5xx and 429) 1 request every 1000 requests (99.9%).\n    - name: \"requests-availability\"\n      objective: 99.9\n      description: \"Common SLO based on availability for HTTP request responses.\"\n      sli:\n        plugin:\n          id: \"getting_started_availability\"\n          options:\n            job: \"myservice\"\n            filter: 'f1=\"v1\",f2=\"v2\"'\n      alerting:\n        name: MyServiceHighErrorRate\n        labels:\n          category: \"availability\"\n        annotations:\n          # Overwrite default Sloth SLO alert summmary on ticket and page alerts.\n          summary: \"High error rate on 'myservice' requests responses\"\n        page_alert:\n          labels:\n            severity: pageteam\n            routing_key: myteam\n        ticket_alert:\n          labels:\n            severity: \"slack\"\n            slack_channel: \"#alerts-myteam\"\n</code></pre> <pre><code>---\n# Code generated by Sloth (dev): https://github.com/slok/sloth.\n# DO NOT EDIT.\n\napiVersion: monitoring.coreos.com/v1\nkind: PrometheusRule\nmetadata:\n  creationTimestamp: null\n  labels:\n    app: sloth\n    app.kubernetes.io/component: SLO\n    app.kubernetes.io/managed-by: sloth\n    prometheus: prometheus\n    role: alert-rules\n  name: sloth-slo-home-wifi\n  namespace: monitoring\nspec:\n  groups:\n  - name: sloth-slo-sli-recordings-myservice-requests-availability\n    rules:\n    - expr: |-\n        (\n        sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\",code=~\"(5..|429)\" }[5m]))\n        /\n        sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\" }[5m])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_window: 5m\n        tier: \"2\"\n      record: slo:sli_error:ratio_rate5m\n    - expr: |-\n        (\n        sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\",code=~\"(5..|429)\" }[30m]))\n        /\n        sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\" }[30m])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_window: 30m\n        tier: \"2\"\n      record: slo:sli_error:ratio_rate30m\n    - expr: |-\n        (\n        sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\",code=~\"(5..|429)\" }[1h]))\n        /\n        sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\" }[1h])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_window: 1h\n        tier: \"2\"\n      record: slo:sli_error:ratio_rate1h\n    - expr: |-\n        (\n        sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\",code=~\"(5..|429)\" }[2h]))\n        /\n        sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\" }[2h])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_window: 2h\n        tier: \"2\"\n      record: slo:sli_error:ratio_rate2h\n    - expr: |-\n        (\n        sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\",code=~\"(5..|429)\" }[6h]))\n        /\n        sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\" }[6h])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_window: 6h\n        tier: \"2\"\n      record: slo:sli_error:ratio_rate6h\n    - expr: |-\n        (\n        sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\",code=~\"(5..|429)\" }[1d]))\n        /\n        sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\" }[1d])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_window: 1d\n        tier: \"2\"\n      record: slo:sli_error:ratio_rate1d\n    - expr: |-\n        (\n        sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\",code=~\"(5..|429)\" }[3d]))\n        /\n        sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\" }[3d])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_window: 3d\n        tier: \"2\"\n      record: slo:sli_error:ratio_rate3d\n    - expr: |\n        sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}[30d])\n        / ignoring (sloth_window)\n        count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}[30d])\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_window: 30d\n        tier: \"2\"\n      record: slo:sli_error:ratio_rate30d\n  - name: sloth-slo-meta-recordings-myservice-requests-availability\n    rules:\n    - expr: vector(0.9990000000000001)\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        tier: \"2\"\n      record: slo:objective:ratio\n    - expr: vector(1-0.9990000000000001)\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        tier: \"2\"\n      record: slo:error_budget:ratio\n    - expr: vector(30)\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        tier: \"2\"\n      record: slo:time_period:days\n    - expr: |\n        slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n        / on(sloth_id, sloth_slo, sloth_service) group_left\n        slo:error_budget:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        tier: \"2\"\n      record: slo:current_burn_rate:ratio\n    - expr: |\n        slo:sli_error:ratio_rate30d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n        / on(sloth_id, sloth_slo, sloth_service) group_left\n        slo:error_budget:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        tier: \"2\"\n      record: slo:period_burn_rate:ratio\n    - expr: 1 - slo:period_burn_rate:ratio{sloth_id=\"myservice-requests-availability\",\n        sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        tier: \"2\"\n      record: slo:period_error_budget_remaining:ratio\n    - expr: vector(1)\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_mode: cli-gen-k8s\n        sloth_objective: \"99.9\"\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_spec: sloth.slok.dev/v1\n        sloth_version: dev\n        tier: \"2\"\n      record: sloth_slo_info\n  - name: sloth-slo-alerts-myservice-requests-availability\n    rules:\n    - alert: MyServiceHighErrorRate\n      annotations:\n        summary: High error rate on 'myservice' requests responses\n        title: (page) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget\n          burn rate is too fast.\n      expr: |\n        (\n            max(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (14.4 * 0.0009999999999999432)) without (sloth_window)\n            and\n            max(slo:sli_error:ratio_rate1h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (14.4 * 0.0009999999999999432)) without (sloth_window)\n        )\n        or\n        (\n            max(slo:sli_error:ratio_rate30m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (6 * 0.0009999999999999432)) without (sloth_window)\n            and\n            max(slo:sli_error:ratio_rate6h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (6 * 0.0009999999999999432)) without (sloth_window)\n        )\n      labels:\n        category: availability\n        sloth_severity: page\n    - alert: MyServiceHighErrorRate\n      annotations:\n        summary: High error rate on 'myservice' requests responses\n        title: (ticket) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error\n          budget burn rate is too fast.\n      expr: |\n        (\n            max(slo:sli_error:ratio_rate2h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (3 * 0.0009999999999999432)) without (sloth_window)\n            and\n            max(slo:sli_error:ratio_rate1d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (3 * 0.0009999999999999432)) without (sloth_window)\n        )\n        or\n        (\n            max(slo:sli_error:ratio_rate6h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (1 * 0.0009999999999999432)) without (sloth_window)\n            and\n            max(slo:sli_error:ratio_rate3d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (1 * 0.0009999999999999432)) without (sloth_window)\n        )\n      labels:\n        category: availability\n        sloth_severity: ticket\n</code></pre> <pre><code>package availability\n\nimport (\n    \"bytes\"\n    \"context\"\n    \"fmt\"\n    \"regexp\"\n    \"strings\"\n    \"text/template\"\n)\n\nconst (\n    SLIPluginVersion = \"prometheus/v1\"\n    SLIPluginID      = \"getting_started_availability\"\n)\n\nvar queryTpl = template.Must(template.New(\"\").Parse(`\nsum(rate(http_request_duration_seconds_count{ {{.filter}}job=\"{{.job}}\",code=~\"(5..|429)\" }[{{\"{{.window}}\"}}]))\n/\nsum(rate(http_request_duration_seconds_count{ {{.filter}}job=\"{{.job}}\" }[{{\"{{.window}}\"}}]))`))\n\nvar filterRegex = regexp.MustCompile(`([^=]+=\"[^=,\"]+\",)+`)\n\n// SLIPlugin is the getting started plugin example.\n//\n// It will return an Sloth error ratio raw query that returns the error ratio of HTTP requests based\n// on the HTTP response status code, taking 5xx and 429 as error events.\nfunc SLIPlugin(ctx context.Context, meta, labels, options map[string]string) (string, error) {\n    // Get job.\n    job, ok := options[\"job\"]\n    if !ok {\n        return \"\", fmt.Errorf(\"job options is required\")\n    }\n\n    // Validate labels.\n    err := validateLabels(labels, \"owner\", \"tier\")\n    if err != nil {\n        return \"\", fmt.Errorf(\"invalid labels: %w\", err)\n    }\n\n    // Sanitize filter.\n    filter := options[\"filter\"]\n    if filter != \"\" {\n        filter = strings.Trim(filter, \"{}\")\n        filter = strings.Trim(filter, \",\")\n        filter = filter + \",\"\n        match := filterRegex.MatchString(filter)\n        if !match {\n            return \"\", fmt.Errorf(\"invalid prometheus filter: %s\", filter)\n        }\n    }\n\n    // Create query.\n    var b bytes.Buffer\n    data := map[string]string{\n        \"job\":    job,\n        \"filter\": filter,\n    }\n    err = queryTpl.Execute(&amp;b, data)\n    if err != nil {\n        return \"\", fmt.Errorf(\"could not execute template: %w\", err)\n    }\n\n    return b.String(), nil\n}\n\n// validateLabels will check the labels exist.\nfunc validateLabels(labels map[string]string, requiredKeys ...string) error {\n    for _, k := range requiredKeys {\n        v, ok := labels[k]\n        if !ok || (ok &amp;&amp; v == \"\") {\n            return fmt.Errorf(\"%q label is required\", k)\n        }\n    }\n\n    return nil\n}\n</code></pre>"},{"location":"examples/kubernetes/slo-plugin/","title":"SLO plugin","text":"SLO spec Generated Execution logs <pre><code># This example shows the same example as getting-started.yml but using Sloth Kubernetes CRD and SLO plugins.\n# It will generate the Prometheus rules in a Kubernetes prometheus-operator PrometheusRules CRD.\n#\n# `sloth generate --debug -i ./examples/slo-plugin-k8s-getting-started.yml`\n#\napiVersion: sloth.slok.dev/v1\nkind: PrometheusServiceLevel\nmetadata:\n  name: sloth-slo-my-service-with-slo-plugins\n  namespace: monitoring\nspec:\n  service: \"myservice\"\n  labels:\n    owner: \"myteam\"\n    repo: \"myorg/myservice\"\n    tier: \"2\"\n  sloPlugins:\n    chain:\n      - id: \"sloth.dev/core/debug/v1\"\n        priority: 9999999\n        config: {msg: \"Plugin 99\"}\n      - id: \"sloth.dev/core/debug/v1\"\n        priority: -999999\n        config: {msg: \"Plugin 0\"}\n  slos:\n    - name: \"requests-availability\"\n      objective: 99.9\n      description: \"Common SLO based on availability for HTTP request responses.\"\n      plugins:\n        chain:\n          - id: \"sloth.dev/core/debug/v1\"\n            priority: 1050\n            config: {msg: \"Plugin 5\"}\n          - id: \"sloth.dev/core/debug/v1\"\n            priority: -1000\n            config: {msg: \"Plugin 1\"}\n          - id: \"sloth.dev/core/debug/v1\"\n            priority: 1000\n            config: {msg: \"Plugin 4\"}\n          - id: \"sloth.dev/core/debug/v1\"\n            priority: -200\n            config: {msg: \"Plugin 2\"}\n          - id: \"sloth.dev/core/debug/v1\"\n            config: {msg: \"Plugin 3\"}\n      sli:\n        events:\n          errorQuery: sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[{{.window}}]))\n          totalQuery: sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[{{.window}}]))\n      alerting:\n        name: MyServiceHighErrorRate\n        labels:\n          category: \"availability\"\n        annotations:\n          summary: \"High error rate on 'myservice' requests responses\"\n        pageAlert:\n          labels:\n            severity: pageteam\n            routing_key: myteam\n        ticketAlert:\n          labels:\n            severity: \"slack\"\n            slack_channel: \"#alerts-myteam\"\n</code></pre> <pre><code>---\n# Code generated by Sloth (dev): https://github.com/slok/sloth.\n# DO NOT EDIT.\n\napiVersion: monitoring.coreos.com/v1\nkind: PrometheusRule\nmetadata:\n  creationTimestamp: null\n  labels:\n    app.kubernetes.io/component: SLO\n    app.kubernetes.io/managed-by: sloth\n  name: sloth-slo-my-service-with-slo-plugins\n  namespace: monitoring\nspec:\n  groups:\n  - name: sloth-slo-sli-recordings-myservice-requests-availability\n    rules:\n    - expr: |\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[5m])))\n        /\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[5m])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_window: 5m\n        tier: \"2\"\n      record: slo:sli_error:ratio_rate5m\n    - expr: |\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[30m])))\n        /\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[30m])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_window: 30m\n        tier: \"2\"\n      record: slo:sli_error:ratio_rate30m\n    - expr: |\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[1h])))\n        /\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1h])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_window: 1h\n        tier: \"2\"\n      record: slo:sli_error:ratio_rate1h\n    - expr: |\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[2h])))\n        /\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[2h])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_window: 2h\n        tier: \"2\"\n      record: slo:sli_error:ratio_rate2h\n    - expr: |\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[6h])))\n        /\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[6h])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_window: 6h\n        tier: \"2\"\n      record: slo:sli_error:ratio_rate6h\n    - expr: |\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[1d])))\n        /\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1d])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_window: 1d\n        tier: \"2\"\n      record: slo:sli_error:ratio_rate1d\n    - expr: |\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[3d])))\n        /\n        (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[3d])))\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_window: 3d\n        tier: \"2\"\n      record: slo:sli_error:ratio_rate3d\n    - expr: |\n        sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}[30d])\n        / ignoring (sloth_window)\n        count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}[30d])\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_window: 30d\n        tier: \"2\"\n      record: slo:sli_error:ratio_rate30d\n  - name: sloth-slo-meta-recordings-myservice-requests-availability\n    rules:\n    - expr: vector(0.9990000000000001)\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        tier: \"2\"\n      record: slo:objective:ratio\n    - expr: vector(1-0.9990000000000001)\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        tier: \"2\"\n      record: slo:error_budget:ratio\n    - expr: vector(30)\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        tier: \"2\"\n      record: slo:time_period:days\n    - expr: |\n        slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n        / on(sloth_id, sloth_slo, sloth_service) group_left\n        slo:error_budget:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        tier: \"2\"\n      record: slo:current_burn_rate:ratio\n    - expr: |\n        slo:sli_error:ratio_rate30d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n        / on(sloth_id, sloth_slo, sloth_service) group_left\n        slo:error_budget:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        tier: \"2\"\n      record: slo:period_burn_rate:ratio\n    - expr: 1 - slo:period_burn_rate:ratio{sloth_id=\"myservice-requests-availability\",\n        sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        tier: \"2\"\n      record: slo:period_error_budget_remaining:ratio\n    - expr: vector(1)\n      labels:\n        cmd: examplesgen.sh\n        owner: myteam\n        repo: myorg/myservice\n        sloth_id: myservice-requests-availability\n        sloth_mode: cli-gen-k8s\n        sloth_objective: \"99.9\"\n        sloth_service: myservice\n        sloth_slo: requests-availability\n        sloth_spec: sloth.slok.dev/v1\n        sloth_version: dev\n        tier: \"2\"\n      record: sloth_slo_info\n  - name: sloth-slo-alerts-myservice-requests-availability\n    rules:\n    - alert: MyServiceHighErrorRate\n      annotations:\n        summary: High error rate on 'myservice' requests responses\n        title: (page) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget\n          burn rate is too fast.\n      expr: |\n        (\n            max(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (14.4 * 0.0009999999999999432)) without (sloth_window)\n            and\n            max(slo:sli_error:ratio_rate1h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (14.4 * 0.0009999999999999432)) without (sloth_window)\n        )\n        or\n        (\n            max(slo:sli_error:ratio_rate30m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (6 * 0.0009999999999999432)) without (sloth_window)\n            and\n            max(slo:sli_error:ratio_rate6h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (6 * 0.0009999999999999432)) without (sloth_window)\n        )\n      labels:\n        category: availability\n        routing_key: myteam\n        severity: pageteam\n        sloth_severity: page\n    - alert: MyServiceHighErrorRate\n      annotations:\n        summary: High error rate on 'myservice' requests responses\n        title: (ticket) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error\n          budget burn rate is too fast.\n      expr: |\n        (\n            max(slo:sli_error:ratio_rate2h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (3 * 0.0009999999999999432)) without (sloth_window)\n            and\n            max(slo:sli_error:ratio_rate1d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (3 * 0.0009999999999999432)) without (sloth_window)\n        )\n        or\n        (\n            max(slo:sli_error:ratio_rate6h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (1 * 0.0009999999999999432)) without (sloth_window)\n            and\n            max(slo:sli_error:ratio_rate3d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (1 * 0.0009999999999999432)) without (sloth_window)\n        )\n      labels:\n        category: availability\n        severity: slack\n        slack_channel: '#alerts-myteam'\n        sloth_severity: ticket\n</code></pre> <pre><code>DEBU[0000] Debug level is enabled                        version=dev\nDEBU[0000] SLO plugin discovered and loaded              slo-plugin-id=sloth.dev/contrib/grouped_slo/v1 version=dev window=30d\nDEBU[0000] SLO plugin discovered and loaded              slo-plugin-id=sloth.dev/contrib/info_labels/v1 version=dev window=30d\nDEBU[0000] SLO plugin discovered and loaded              slo-plugin-id=sloth.dev/contrib/rule_intervals/v1 version=dev window=30d\nDEBU[0000] SLO plugin discovered and loaded              slo-plugin-id=github.com/slok/sloth-test-slo-plugins/spec_as_labels/v1 version=dev window=30d\nDEBU[0000] SLO plugin discovered and loaded              slo-plugin-id=sloth.dev/core/alert_rules/v1 version=dev window=30d\nDEBU[0000] SLO plugin discovered and loaded              slo-plugin-id=sloth.dev/core/debug/v1 version=dev window=30d\nDEBU[0000] SLO plugin discovered and loaded              slo-plugin-id=sloth.dev/core/metadata_rules/v1 version=dev window=30d\nDEBU[0000] SLO plugin discovered and loaded              slo-plugin-id=sloth.dev/core/noop/v1 version=dev window=30d\nDEBU[0000] SLO plugin discovered and loaded              slo-plugin-id=sloth.dev/core/sli_rules/v1 version=dev window=30d\nDEBU[0000] SLO plugin discovered and loaded              slo-plugin-id=sloth.dev/core/validate/v1 version=dev window=30d\nINFO[0000] Plugins loaded                                sli-plugins=0 slo-plugins=10 version=dev window=30d\nINFO[0000] SLO period windows loaded                     svc=alert.WindowsRepo version=dev window=30d windows=2\nINFO[0000] Generating from Kubernetes Prometheus spec    version=dev window=30d\nDEBU[0000] Multiwindow-multiburn alerts generated        out=- slo=myservice-requests-availability svc=generate.prometheus.Service version=dev window=30d\nDEBU[0000] SLO plugin discovered and loaded              slo-plugin-id=sloth.dev/core/alert_rules/v1 version=dev window=30d\nDEBU[0000] SLO plugin discovered and loaded              slo-plugin-id=sloth.dev/core/debug/v1 version=dev window=30d\nDEBU[0000] SLO plugin discovered and loaded              slo-plugin-id=sloth.dev/core/metadata_rules/v1 version=dev window=30d\nDEBU[0000] SLO plugin discovered and loaded              slo-plugin-id=sloth.dev/core/noop/v1 version=dev window=30d\nDEBU[0000] SLO plugin discovered and loaded              slo-plugin-id=sloth.dev/core/sli_rules/v1 version=dev window=30d\nDEBU[0000] SLO plugin discovered and loaded              slo-plugin-id=sloth.dev/core/validate/v1 version=dev window=30d\nINFO[0000] Plugins loaded                                sli-plugins=0 slo-plugins=10 version=dev window=30d\nINFO[0000] SLO period windows loaded                     svc=alert.WindowsRepo version=dev window=30d windows=2\nINFO[0000] Generating from qq Prometheus spec    version=dev window=30d\nDEBU[0000] Multiwindow-multiburn alerts generated        out=- slo=myservice-requests-availability svc=generate.prometheus.Service version=dev window=30d\nDEBU[0000] Plugin 0                                      out=- plugin=sloth.dev/core/debug/v1 slo=myservice-requests-availability svc=generate.prometheus.Service version=dev window=30d\nDEBU[0000] Plugin 1                                      out=- plugin=sloth.dev/core/debug/v1 slo=myservice-requests-availability svc=generate.prometheus.Service version=dev window=30d\nDEBU[0000] Plugin 2                                      out=- plugin=sloth.dev/core/debug/v1 slo=myservice-requests-availability svc=generate.prometheus.Service version=dev window=30d\nDEBU[0000] Plugin 3                                      out=- plugin=sloth.dev/core/debug/v1 slo=myservice-requests-availability svc=generate.prometheus.Service version=dev window=30d\nDEBU[0000] Plugin 4                                      out=- plugin=sloth.dev/core/debug/v1 slo=myservice-requests-availability svc=generate.prometheus.Service version=dev window=30d\nDEBU[0000] Plugin 5                                      out=- plugin=sloth.dev/core/debug/v1 slo=myservice-requests-availability svc=generate.prometheus.Service version=dev window=30d\nDEBU[0000] Plugin 99                                     out=- plugin=sloth.dev/core/debug/v1 slo=myservice-requests-availability svc=generate.prometheus.Service version=dev window=30d\n</code></pre>"},{"location":"examples/openslo/getting-started/","title":"Getting started","text":"SLO spec Generated <pre><code># This example shows the same example as getting-started.yml but using OpenSLO spec.\n# It will generate the Prometheus rules in a Prometheus rules format.\n#\n# `sloth generate -i ./examples/openslo-getting-started.yml`\n#\napiVersion: openslo/v1alpha\nkind: SLO\nmetadata:\n  name: sloth-slo-my-service\n  displayName: Requests Availability\nspec:\n  service: my-service\n  description: \"Common SLO based on availability for HTTP request responses.\"\n  budgetingMethod: Occurrences\n  objectives:\n    - ratioMetrics:\n        good:\n          source: prometheus\n          queryType: promql\n          query: sum(rate(http_request_duration_seconds_count{job=\"myservice\",code!~\"(5..|429)\"}[{{.window}}]))\n        total:\n          source: prometheus\n          queryType: promql\n          query: sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[{{.window}}]))\n      target: 0.999\n  timeWindows:\n    - count: 30\n      unit: Day\n</code></pre> <pre><code>---\n# Code generated by Sloth (dev): https://github.com/slok/sloth.\n# DO NOT EDIT.\n\ngroups:\n- name: sloth-slo-sli-recordings-my-service-sloth-slo-my-service-0\n  rules:\n  - record: slo:sli_error:ratio_rate5m\n    expr: |-\n      (\n        1 - (\n          (\n            sum(rate(http_request_duration_seconds_count{job=\"myservice\",code!~\"(5..|429)\"}[5m]))\n          )\n          /\n          (\n            sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[5m]))\n          )\n        )\n      )\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: my-service-sloth-slo-my-service-0\n      sloth_service: my-service\n      sloth_slo: sloth-slo-my-service-0\n      sloth_window: 5m\n  - record: slo:sli_error:ratio_rate30m\n    expr: |-\n      (\n        1 - (\n          (\n            sum(rate(http_request_duration_seconds_count{job=\"myservice\",code!~\"(5..|429)\"}[30m]))\n          )\n          /\n          (\n            sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[30m]))\n          )\n        )\n      )\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: my-service-sloth-slo-my-service-0\n      sloth_service: my-service\n      sloth_slo: sloth-slo-my-service-0\n      sloth_window: 30m\n  - record: slo:sli_error:ratio_rate1h\n    expr: |-\n      (\n        1 - (\n          (\n            sum(rate(http_request_duration_seconds_count{job=\"myservice\",code!~\"(5..|429)\"}[1h]))\n          )\n          /\n          (\n            sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1h]))\n          )\n        )\n      )\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: my-service-sloth-slo-my-service-0\n      sloth_service: my-service\n      sloth_slo: sloth-slo-my-service-0\n      sloth_window: 1h\n  - record: slo:sli_error:ratio_rate2h\n    expr: |-\n      (\n        1 - (\n          (\n            sum(rate(http_request_duration_seconds_count{job=\"myservice\",code!~\"(5..|429)\"}[2h]))\n          )\n          /\n          (\n            sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[2h]))\n          )\n        )\n      )\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: my-service-sloth-slo-my-service-0\n      sloth_service: my-service\n      sloth_slo: sloth-slo-my-service-0\n      sloth_window: 2h\n  - record: slo:sli_error:ratio_rate6h\n    expr: |-\n      (\n        1 - (\n          (\n            sum(rate(http_request_duration_seconds_count{job=\"myservice\",code!~\"(5..|429)\"}[6h]))\n          )\n          /\n          (\n            sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[6h]))\n          )\n        )\n      )\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: my-service-sloth-slo-my-service-0\n      sloth_service: my-service\n      sloth_slo: sloth-slo-my-service-0\n      sloth_window: 6h\n  - record: slo:sli_error:ratio_rate1d\n    expr: |-\n      (\n        1 - (\n          (\n            sum(rate(http_request_duration_seconds_count{job=\"myservice\",code!~\"(5..|429)\"}[1d]))\n          )\n          /\n          (\n            sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1d]))\n          )\n        )\n      )\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: my-service-sloth-slo-my-service-0\n      sloth_service: my-service\n      sloth_slo: sloth-slo-my-service-0\n      sloth_window: 1d\n  - record: slo:sli_error:ratio_rate3d\n    expr: |-\n      (\n        1 - (\n          (\n            sum(rate(http_request_duration_seconds_count{job=\"myservice\",code!~\"(5..|429)\"}[3d]))\n          )\n          /\n          (\n            sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[3d]))\n          )\n        )\n      )\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: my-service-sloth-slo-my-service-0\n      sloth_service: my-service\n      sloth_slo: sloth-slo-my-service-0\n      sloth_window: 3d\n  - record: slo:sli_error:ratio_rate30d\n    expr: |\n      sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"my-service-sloth-slo-my-service-0\", sloth_service=\"my-service\", sloth_slo=\"sloth-slo-my-service-0\"}[30d])\n      / ignoring (sloth_window)\n      count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"my-service-sloth-slo-my-service-0\", sloth_service=\"my-service\", sloth_slo=\"sloth-slo-my-service-0\"}[30d])\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: my-service-sloth-slo-my-service-0\n      sloth_service: my-service\n      sloth_slo: sloth-slo-my-service-0\n      sloth_window: 30d\n- name: sloth-slo-meta-recordings-my-service-sloth-slo-my-service-0\n  rules:\n  - record: slo:objective:ratio\n    expr: vector(0.9990000000000001)\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: my-service-sloth-slo-my-service-0\n      sloth_service: my-service\n      sloth_slo: sloth-slo-my-service-0\n  - record: slo:error_budget:ratio\n    expr: vector(1-0.9990000000000001)\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: my-service-sloth-slo-my-service-0\n      sloth_service: my-service\n      sloth_slo: sloth-slo-my-service-0\n  - record: slo:time_period:days\n    expr: vector(30)\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: my-service-sloth-slo-my-service-0\n      sloth_service: my-service\n      sloth_slo: sloth-slo-my-service-0\n  - record: slo:current_burn_rate:ratio\n    expr: |\n      slo:sli_error:ratio_rate5m{sloth_id=\"my-service-sloth-slo-my-service-0\", sloth_service=\"my-service\", sloth_slo=\"sloth-slo-my-service-0\"}\n      / on(sloth_id, sloth_slo, sloth_service) group_left\n      slo:error_budget:ratio{sloth_id=\"my-service-sloth-slo-my-service-0\", sloth_service=\"my-service\", sloth_slo=\"sloth-slo-my-service-0\"}\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: my-service-sloth-slo-my-service-0\n      sloth_service: my-service\n      sloth_slo: sloth-slo-my-service-0\n  - record: slo:period_burn_rate:ratio\n    expr: |\n      slo:sli_error:ratio_rate30d{sloth_id=\"my-service-sloth-slo-my-service-0\", sloth_service=\"my-service\", sloth_slo=\"sloth-slo-my-service-0\"}\n      / on(sloth_id, sloth_slo, sloth_service) group_left\n      slo:error_budget:ratio{sloth_id=\"my-service-sloth-slo-my-service-0\", sloth_service=\"my-service\", sloth_slo=\"sloth-slo-my-service-0\"}\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: my-service-sloth-slo-my-service-0\n      sloth_service: my-service\n      sloth_slo: sloth-slo-my-service-0\n  - record: slo:period_error_budget_remaining:ratio\n    expr: 1 - slo:period_burn_rate:ratio{sloth_id=\"my-service-sloth-slo-my-service-0\",\n      sloth_service=\"my-service\", sloth_slo=\"sloth-slo-my-service-0\"}\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: my-service-sloth-slo-my-service-0\n      sloth_service: my-service\n      sloth_slo: sloth-slo-my-service-0\n  - record: sloth_slo_info\n    expr: vector(1)\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: my-service-sloth-slo-my-service-0\n      sloth_mode: cli-gen-openslo\n      sloth_objective: \"99.9\"\n      sloth_service: my-service\n      sloth_slo: sloth-slo-my-service-0\n      sloth_spec: openslo/v1alpha\n      sloth_version: dev\n</code></pre>"},{"location":"examples/openslo/kubernetes-apiserver/","title":"Kubernetes APIserver","text":"SLO spec Generated <pre><code># This example shows the same example as kubernetes-apiserver.yml but using OpenSLO spec.\n# It will generate the Prometheus rules in a Prometheus rules format.\n#\n# Take into account that OpenSLO spec has the concept of single SLO with multiple objectives\n#\n# `sloth generate -i ./examples/openslo-kubernetes-apiserver.yml`\n#\napiVersion: openslo/v1alpha\nkind: SLO\nmetadata:\n  name: requests-availability-openslo\n  displayName: Requests Availability\nspec:\n  service: k8s-apiserver\n  description: \"Apiserver are returning correctly the requests to the clients (kubectl users, controllers...).\"\n  budgetingMethod: Occurrences\n  objectives:\n    - ratioMetrics:\n        good:\n          source: prometheus\n          queryType: promql\n          query: sum(rate(apiserver_request_total{code!~\"(5..|429)\"}[{{.window}}]))\n        total:\n          source: prometheus\n          queryType: promql\n          query: sum(rate(apiserver_request_total[{{.window}}]))\n      target: 0.999\n\n  timeWindows:\n    - count: 30\n      unit: Day\n\n---\napiVersion: openslo/v1alpha\nkind: SLO\nmetadata:\n  name: requests-latency-openslo\n  displayName: Requests Latency\nspec:\n  service: k8s-apiserver\n  description: \"Apiserver responses are being fast enough and this will affect the clients (kubectl users, controllers...).\"\n  budgetingMethod: Occurrences\n  objectives:\n    - ratioMetrics:\n        good:\n          source: prometheus\n          queryType: promql\n          query: sum(rate(apiserver_request_duration_seconds_bucket{le=\"0.4\",verb!=\"WATCH\"}[{{.window}}]))\n        total:\n          source: prometheus\n          queryType: promql\n          query: sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[{{.window}}]))\n      target: 0.99\n\n    - ratioMetrics:\n        good:\n          source: prometheus\n          queryType: promql\n          query: sum(rate(apiserver_request_duration_seconds_bucket{le=\"5\",verb!=\"WATCH\"}[{{.window}}]))\n        total:\n          source: prometheus\n          queryType: promql\n          query: sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[{{.window}}]))\n      target: 0.999\n\n  timeWindows:\n    - count: 30\n      unit: Day\n</code></pre> <pre><code>---\n# Code generated by Sloth (dev): https://github.com/slok/sloth.\n# DO NOT EDIT.\n\ngroups:\n- name: sloth-slo-sli-recordings-k8s-apiserver-requests-availability-openslo-0\n  rules:\n  - record: slo:sli_error:ratio_rate5m\n    expr: |-\n      (\n        1 - (\n          (\n            sum(rate(apiserver_request_total{code!~\"(5..|429)\"}[5m]))\n          )\n          /\n          (\n            sum(rate(apiserver_request_total[5m]))\n          )\n        )\n      )\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-availability-openslo-0\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-availability-openslo-0\n      sloth_window: 5m\n  - record: slo:sli_error:ratio_rate30m\n    expr: |-\n      (\n        1 - (\n          (\n            sum(rate(apiserver_request_total{code!~\"(5..|429)\"}[30m]))\n          )\n          /\n          (\n            sum(rate(apiserver_request_total[30m]))\n          )\n        )\n      )\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-availability-openslo-0\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-availability-openslo-0\n      sloth_window: 30m\n  - record: slo:sli_error:ratio_rate1h\n    expr: |-\n      (\n        1 - (\n          (\n            sum(rate(apiserver_request_total{code!~\"(5..|429)\"}[1h]))\n          )\n          /\n          (\n            sum(rate(apiserver_request_total[1h]))\n          )\n        )\n      )\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-availability-openslo-0\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-availability-openslo-0\n      sloth_window: 1h\n  - record: slo:sli_error:ratio_rate2h\n    expr: |-\n      (\n        1 - (\n          (\n            sum(rate(apiserver_request_total{code!~\"(5..|429)\"}[2h]))\n          )\n          /\n          (\n            sum(rate(apiserver_request_total[2h]))\n          )\n        )\n      )\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-availability-openslo-0\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-availability-openslo-0\n      sloth_window: 2h\n  - record: slo:sli_error:ratio_rate6h\n    expr: |-\n      (\n        1 - (\n          (\n            sum(rate(apiserver_request_total{code!~\"(5..|429)\"}[6h]))\n          )\n          /\n          (\n            sum(rate(apiserver_request_total[6h]))\n          )\n        )\n      )\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-availability-openslo-0\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-availability-openslo-0\n      sloth_window: 6h\n  - record: slo:sli_error:ratio_rate1d\n    expr: |-\n      (\n        1 - (\n          (\n            sum(rate(apiserver_request_total{code!~\"(5..|429)\"}[1d]))\n          )\n          /\n          (\n            sum(rate(apiserver_request_total[1d]))\n          )\n        )\n      )\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-availability-openslo-0\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-availability-openslo-0\n      sloth_window: 1d\n  - record: slo:sli_error:ratio_rate3d\n    expr: |-\n      (\n        1 - (\n          (\n            sum(rate(apiserver_request_total{code!~\"(5..|429)\"}[3d]))\n          )\n          /\n          (\n            sum(rate(apiserver_request_total[3d]))\n          )\n        )\n      )\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-availability-openslo-0\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-availability-openslo-0\n      sloth_window: 3d\n  - record: slo:sli_error:ratio_rate30d\n    expr: |\n      sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"k8s-apiserver-requests-availability-openslo-0\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability-openslo-0\"}[30d])\n      / ignoring (sloth_window)\n      count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"k8s-apiserver-requests-availability-openslo-0\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability-openslo-0\"}[30d])\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-availability-openslo-0\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-availability-openslo-0\n      sloth_window: 30d\n- name: sloth-slo-meta-recordings-k8s-apiserver-requests-availability-openslo-0\n  rules:\n  - record: slo:objective:ratio\n    expr: vector(0.9990000000000001)\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-availability-openslo-0\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-availability-openslo-0\n  - record: slo:error_budget:ratio\n    expr: vector(1-0.9990000000000001)\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-availability-openslo-0\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-availability-openslo-0\n  - record: slo:time_period:days\n    expr: vector(30)\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-availability-openslo-0\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-availability-openslo-0\n  - record: slo:current_burn_rate:ratio\n    expr: |\n      slo:sli_error:ratio_rate5m{sloth_id=\"k8s-apiserver-requests-availability-openslo-0\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability-openslo-0\"}\n      / on(sloth_id, sloth_slo, sloth_service) group_left\n      slo:error_budget:ratio{sloth_id=\"k8s-apiserver-requests-availability-openslo-0\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability-openslo-0\"}\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-availability-openslo-0\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-availability-openslo-0\n  - record: slo:period_burn_rate:ratio\n    expr: |\n      slo:sli_error:ratio_rate30d{sloth_id=\"k8s-apiserver-requests-availability-openslo-0\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability-openslo-0\"}\n      / on(sloth_id, sloth_slo, sloth_service) group_left\n      slo:error_budget:ratio{sloth_id=\"k8s-apiserver-requests-availability-openslo-0\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability-openslo-0\"}\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-availability-openslo-0\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-availability-openslo-0\n  - record: slo:period_error_budget_remaining:ratio\n    expr: 1 - slo:period_burn_rate:ratio{sloth_id=\"k8s-apiserver-requests-availability-openslo-0\",\n      sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability-openslo-0\"}\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-availability-openslo-0\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-availability-openslo-0\n  - record: sloth_slo_info\n    expr: vector(1)\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-availability-openslo-0\n      sloth_mode: cli-gen-openslo\n      sloth_objective: \"99.9\"\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-availability-openslo-0\n      sloth_spec: openslo/v1alpha\n      sloth_version: dev\n\n---\n# Code generated by Sloth (dev): https://github.com/slok/sloth.\n# DO NOT EDIT.\n\ngroups:\n- name: sloth-slo-sli-recordings-k8s-apiserver-requests-latency-openslo-0\n  rules:\n  - record: slo:sli_error:ratio_rate5m\n    expr: |-\n      (\n        1 - (\n          (\n            sum(rate(apiserver_request_duration_seconds_bucket{le=\"0.4\",verb!=\"WATCH\"}[5m]))\n          )\n          /\n          (\n            sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[5m]))\n          )\n        )\n      )\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-latency-openslo-0\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency-openslo-0\n      sloth_window: 5m\n  - record: slo:sli_error:ratio_rate30m\n    expr: |-\n      (\n        1 - (\n          (\n            sum(rate(apiserver_request_duration_seconds_bucket{le=\"0.4\",verb!=\"WATCH\"}[30m]))\n          )\n          /\n          (\n            sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[30m]))\n          )\n        )\n      )\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-latency-openslo-0\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency-openslo-0\n      sloth_window: 30m\n  - record: slo:sli_error:ratio_rate1h\n    expr: |-\n      (\n        1 - (\n          (\n            sum(rate(apiserver_request_duration_seconds_bucket{le=\"0.4\",verb!=\"WATCH\"}[1h]))\n          )\n          /\n          (\n            sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[1h]))\n          )\n        )\n      )\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-latency-openslo-0\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency-openslo-0\n      sloth_window: 1h\n  - record: slo:sli_error:ratio_rate2h\n    expr: |-\n      (\n        1 - (\n          (\n            sum(rate(apiserver_request_duration_seconds_bucket{le=\"0.4\",verb!=\"WATCH\"}[2h]))\n          )\n          /\n          (\n            sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[2h]))\n          )\n        )\n      )\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-latency-openslo-0\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency-openslo-0\n      sloth_window: 2h\n  - record: slo:sli_error:ratio_rate6h\n    expr: |-\n      (\n        1 - (\n          (\n            sum(rate(apiserver_request_duration_seconds_bucket{le=\"0.4\",verb!=\"WATCH\"}[6h]))\n          )\n          /\n          (\n            sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[6h]))\n          )\n        )\n      )\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-latency-openslo-0\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency-openslo-0\n      sloth_window: 6h\n  - record: slo:sli_error:ratio_rate1d\n    expr: |-\n      (\n        1 - (\n          (\n            sum(rate(apiserver_request_duration_seconds_bucket{le=\"0.4\",verb!=\"WATCH\"}[1d]))\n          )\n          /\n          (\n            sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[1d]))\n          )\n        )\n      )\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-latency-openslo-0\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency-openslo-0\n      sloth_window: 1d\n  - record: slo:sli_error:ratio_rate3d\n    expr: |-\n      (\n        1 - (\n          (\n            sum(rate(apiserver_request_duration_seconds_bucket{le=\"0.4\",verb!=\"WATCH\"}[3d]))\n          )\n          /\n          (\n            sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[3d]))\n          )\n        )\n      )\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-latency-openslo-0\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency-openslo-0\n      sloth_window: 3d\n  - record: slo:sli_error:ratio_rate30d\n    expr: |\n      sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"k8s-apiserver-requests-latency-openslo-0\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency-openslo-0\"}[30d])\n      / ignoring (sloth_window)\n      count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"k8s-apiserver-requests-latency-openslo-0\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency-openslo-0\"}[30d])\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-latency-openslo-0\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency-openslo-0\n      sloth_window: 30d\n- name: sloth-slo-meta-recordings-k8s-apiserver-requests-latency-openslo-0\n  rules:\n  - record: slo:objective:ratio\n    expr: vector(0.99)\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-latency-openslo-0\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency-openslo-0\n  - record: slo:error_budget:ratio\n    expr: vector(1-0.99)\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-latency-openslo-0\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency-openslo-0\n  - record: slo:time_period:days\n    expr: vector(30)\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-latency-openslo-0\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency-openslo-0\n  - record: slo:current_burn_rate:ratio\n    expr: |\n      slo:sli_error:ratio_rate5m{sloth_id=\"k8s-apiserver-requests-latency-openslo-0\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency-openslo-0\"}\n      / on(sloth_id, sloth_slo, sloth_service) group_left\n      slo:error_budget:ratio{sloth_id=\"k8s-apiserver-requests-latency-openslo-0\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency-openslo-0\"}\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-latency-openslo-0\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency-openslo-0\n  - record: slo:period_burn_rate:ratio\n    expr: |\n      slo:sli_error:ratio_rate30d{sloth_id=\"k8s-apiserver-requests-latency-openslo-0\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency-openslo-0\"}\n      / on(sloth_id, sloth_slo, sloth_service) group_left\n      slo:error_budget:ratio{sloth_id=\"k8s-apiserver-requests-latency-openslo-0\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency-openslo-0\"}\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-latency-openslo-0\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency-openslo-0\n  - record: slo:period_error_budget_remaining:ratio\n    expr: 1 - slo:period_burn_rate:ratio{sloth_id=\"k8s-apiserver-requests-latency-openslo-0\",\n      sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency-openslo-0\"}\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-latency-openslo-0\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency-openslo-0\n  - record: sloth_slo_info\n    expr: vector(1)\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-latency-openslo-0\n      sloth_mode: cli-gen-openslo\n      sloth_objective: \"99\"\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency-openslo-0\n      sloth_spec: openslo/v1alpha\n      sloth_version: dev\n- name: sloth-slo-sli-recordings-k8s-apiserver-requests-latency-openslo-1\n  rules:\n  - record: slo:sli_error:ratio_rate5m\n    expr: |-\n      (\n        1 - (\n          (\n            sum(rate(apiserver_request_duration_seconds_bucket{le=\"5\",verb!=\"WATCH\"}[5m]))\n          )\n          /\n          (\n            sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[5m]))\n          )\n        )\n      )\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-latency-openslo-1\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency-openslo-1\n      sloth_window: 5m\n  - record: slo:sli_error:ratio_rate30m\n    expr: |-\n      (\n        1 - (\n          (\n            sum(rate(apiserver_request_duration_seconds_bucket{le=\"5\",verb!=\"WATCH\"}[30m]))\n          )\n          /\n          (\n            sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[30m]))\n          )\n        )\n      )\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-latency-openslo-1\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency-openslo-1\n      sloth_window: 30m\n  - record: slo:sli_error:ratio_rate1h\n    expr: |-\n      (\n        1 - (\n          (\n            sum(rate(apiserver_request_duration_seconds_bucket{le=\"5\",verb!=\"WATCH\"}[1h]))\n          )\n          /\n          (\n            sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[1h]))\n          )\n        )\n      )\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-latency-openslo-1\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency-openslo-1\n      sloth_window: 1h\n  - record: slo:sli_error:ratio_rate2h\n    expr: |-\n      (\n        1 - (\n          (\n            sum(rate(apiserver_request_duration_seconds_bucket{le=\"5\",verb!=\"WATCH\"}[2h]))\n          )\n          /\n          (\n            sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[2h]))\n          )\n        )\n      )\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-latency-openslo-1\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency-openslo-1\n      sloth_window: 2h\n  - record: slo:sli_error:ratio_rate6h\n    expr: |-\n      (\n        1 - (\n          (\n            sum(rate(apiserver_request_duration_seconds_bucket{le=\"5\",verb!=\"WATCH\"}[6h]))\n          )\n          /\n          (\n            sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[6h]))\n          )\n        )\n      )\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-latency-openslo-1\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency-openslo-1\n      sloth_window: 6h\n  - record: slo:sli_error:ratio_rate1d\n    expr: |-\n      (\n        1 - (\n          (\n            sum(rate(apiserver_request_duration_seconds_bucket{le=\"5\",verb!=\"WATCH\"}[1d]))\n          )\n          /\n          (\n            sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[1d]))\n          )\n        )\n      )\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-latency-openslo-1\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency-openslo-1\n      sloth_window: 1d\n  - record: slo:sli_error:ratio_rate3d\n    expr: |-\n      (\n        1 - (\n          (\n            sum(rate(apiserver_request_duration_seconds_bucket{le=\"5\",verb!=\"WATCH\"}[3d]))\n          )\n          /\n          (\n            sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[3d]))\n          )\n        )\n      )\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-latency-openslo-1\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency-openslo-1\n      sloth_window: 3d\n  - record: slo:sli_error:ratio_rate30d\n    expr: |\n      sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"k8s-apiserver-requests-latency-openslo-1\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency-openslo-1\"}[30d])\n      / ignoring (sloth_window)\n      count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"k8s-apiserver-requests-latency-openslo-1\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency-openslo-1\"}[30d])\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-latency-openslo-1\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency-openslo-1\n      sloth_window: 30d\n- name: sloth-slo-meta-recordings-k8s-apiserver-requests-latency-openslo-1\n  rules:\n  - record: slo:objective:ratio\n    expr: vector(0.9990000000000001)\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-latency-openslo-1\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency-openslo-1\n  - record: slo:error_budget:ratio\n    expr: vector(1-0.9990000000000001)\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-latency-openslo-1\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency-openslo-1\n  - record: slo:time_period:days\n    expr: vector(30)\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-latency-openslo-1\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency-openslo-1\n  - record: slo:current_burn_rate:ratio\n    expr: |\n      slo:sli_error:ratio_rate5m{sloth_id=\"k8s-apiserver-requests-latency-openslo-1\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency-openslo-1\"}\n      / on(sloth_id, sloth_slo, sloth_service) group_left\n      slo:error_budget:ratio{sloth_id=\"k8s-apiserver-requests-latency-openslo-1\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency-openslo-1\"}\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-latency-openslo-1\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency-openslo-1\n  - record: slo:period_burn_rate:ratio\n    expr: |\n      slo:sli_error:ratio_rate30d{sloth_id=\"k8s-apiserver-requests-latency-openslo-1\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency-openslo-1\"}\n      / on(sloth_id, sloth_slo, sloth_service) group_left\n      slo:error_budget:ratio{sloth_id=\"k8s-apiserver-requests-latency-openslo-1\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency-openslo-1\"}\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-latency-openslo-1\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency-openslo-1\n  - record: slo:period_error_budget_remaining:ratio\n    expr: 1 - slo:period_burn_rate:ratio{sloth_id=\"k8s-apiserver-requests-latency-openslo-1\",\n      sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency-openslo-1\"}\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-latency-openslo-1\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency-openslo-1\n  - record: sloth_slo_info\n    expr: vector(1)\n    labels:\n      cmd: examplesgen.sh\n      sloth_id: k8s-apiserver-requests-latency-openslo-1\n      sloth_mode: cli-gen-openslo\n      sloth_objective: \"99.9\"\n      sloth_service: k8s-apiserver\n      sloth_slo: requests-latency-openslo-1\n      sloth_spec: openslo/v1alpha\n      sloth_version: dev\n</code></pre>"},{"location":"faq/","title":"F.A.Q","text":""},{"location":"faq/#why-sloth","title":"Why Sloth","text":"<p>Creating Prometheus rules for SLI/SLO framework is hard, error prone and is pure toil.</p> <p>Sloth abstracts this task, and we also gain:</p> <ul> <li>Read friendlyness: Easy to read and declare SLI/SLOs.</li> <li>Gitops: Easy to integrate with CI flows like validation, checks...</li> <li>Reliability and testing: Generated prometheus rules are already known that work, no need the creation of tests.</li> <li>Centralize features and error fixes: An update in Sloth would be applied to all the SLOs managed/generated with it.</li> <li>Standardize the metrics: Same conventions, automatic dashboards...</li> <li>Rollout future features for free with the same specs: e.g automatic report creation.</li> </ul>"},{"location":"faq/#sli","title":"SLI?","text":"<p>Service level indicator. Is a way of quantify how your service should be responding to user.</p> <p>TL;DR: What is good/bad service for your users. E.g:</p> <ul> <li>Requests &gt;=500 considered errors.</li> <li>Requests &gt;200ms considered errors.</li> <li>Process executions with exit code &gt;0 considered errors.</li> </ul> <p>Normally is measured using events: <code>good/bad-events / total-events</code>.</p>"},{"location":"faq/#slo","title":"SLO?","text":"<p>Service level objective. A percent that will tell how many SLI errors your service can have in a specific period of time.</p>"},{"location":"faq/#error-budget","title":"Error budget?","text":"<p>An error budget is the ammount of errors (driven by the SLI) you can have in a specific period of time, this is driven by the SLO.</p> <p>Lets see an example:</p> <ul> <li>SLI Error: Requests status code &gt;= 500</li> <li>Period: 30 days</li> <li>SLO: 99.9%</li> <li>Error budget: 0.0999 (100-99.9)</li> <li>Total requests in 30 days: 10000</li> <li>Available error requests: 9.99 (10000 * 0.0999 / 100)</li> </ul> <p>If we have more than 9.99 request response with &gt;=500 status code, we would be burning more error budget than the available, if we have less errors, we would end without spending all the error budget.</p>"},{"location":"faq/#burn-rate","title":"Burn rate?","text":"<p>The speed you are consuming your error budget. This is key for SLO based alerting (Sloth will create all these alerts), because depending on the speed you are consuming your error budget, it will trigger your alerts.</p> <p>Speed/rate examples:</p> <ul> <li>1: You are consuming 100% of the error budget in the expected period (e.g if 30d period, then 30 days).</li> <li>2: You are consuming 200% of the error budget in the expected period (e.g if 30d period, then 15 days).</li> <li>60: You are consuming 6000% of the error budget in the expected period (e.g if 30d period, then 12h hour).</li> <li>1080: You are consuming 108000% of the error budget in the expected period (e.g if 30d period, then 40 minute).</li> </ul>"},{"location":"faq/#slo-based-alerting","title":"SLO based alerting?","text":"<p>With SLO based alerting you will get better alerting to a regular alerting system, because:</p> <ul> <li>Alerts on symptoms (SLIs), not causes.</li> <li>Trigger at different levels (warning/ticket and critical/page).</li> <li>Takes into account time and quantity, this is: speed of errors and number of errors on specific time.</li> </ul> <p>The result of these is:</p> <ul> <li>Correct time to trigger alerts (important == fast, not so important == slow).</li> <li>Reduce alert fatigue.</li> <li>Reduce false positives and negatives.</li> </ul>"},{"location":"faq/#what-are-ticket-and-page-alerts","title":"What are ticket and page alerts?","text":"<p>MWMB type alerting is based on two kinds of alerts, <code>ticket</code> and <code>page</code>:</p> <ul> <li><code>page</code>: Are critical alerts that normally are used to wake up, notify on important channels, trigger oncall...</li> <li><code>ticket</code>: The warning alerts that normally open tickets, post messages on non-important Slack channels...</li> </ul> <p>These are triggered in different ways, <code>page</code> alerts are triggered faster but require faster error budget burn rate, on the other side, <code>ticket</code> alerts are triggered slower and require a lower and constant error budget burn rate.</p>"},{"location":"faq/#can-i-disable-alerts","title":"Can I disable alerts?","text":"<p>Yes, use <code>disable: true</code> on <code>page</code> and <code>ticket</code>.</p>"},{"location":"faq/#grafana-dashboard","title":"Grafana dashboard?","text":"<p>Check grafana-dashboard, this dashboard will load the SLOs automatically.</p>"},{"location":"faq/#cli-vs-k8s-controller","title":"CLI VS K8s controller?","text":"<p>If you don't have Kubernetes and you need raw prometheus rules, its easy, the CLI (<code>generate</code>) mode is the only one that supports raw prometheus rules.</p> <p>On the other side if you have Kubernetes (and most likely prometheus-operator). Using <code>sloth.slok.dev/v1/PrometheusServiceLevel</code> CRD will output the same result used as a CLI or used as a Kubernetes controller.</p> <p>The only difference between the two modes is how Sloth application loads the SLOs manifest. For either mode, the output will be a Prometheus Operator Rules CRD.</p> <p>Both have pros and cons:</p> <ul> <li>The CLI in an advanced gitops flow gives you faster feedback loops because of the generation on the CI.</li> <li>Using as a controller the CRD integrates better in helm charts and similar because it removes that generation extra step.</li> <li>Having the SLO as CRs in K8s, improves the discovery as you can always do <code>kubectl get slos --all-namespaces</code>.</li> <li>The CLI doesn't require an app running, Sloth CRDs registered... the SLO generation process is simpler, so you have less PoFs.</li> </ul> <p>In a few words, theres no right or wrong answer, pick your own flavour based on your use case: teams size, engineers in the company or development flow...</p>"},{"location":"faq/#sli-types-on-manifests","title":"SLI types on manifests","text":"<p><code>prometheus/v1</code> (regular) and <code>sloth.slok.dev/v1/PrometheusServiceLevel</code> (Kubernetes CRD), support 3 ways of setting SLIs:</p> <ul> <li>Events: This are based on 2 queries, the one that returns the total/valid number of events and the one that returns the bad events. Sloht will make a query dividing them to get the final error ratio (0-1).</li> <li>Raw: This is a single raw prometheus query that when executed will return the error ratio (0-1).</li> <li>Plugins: Check plugins for more information. It reference plugins that will be preloaded and already developed. Sloth will execute them on generation and it will return a raw query. This is the best way to abstract queries from users or having SLOs at scale.</li> </ul>"},{"location":"faq/#slo-plugins-vs-sli-plugins-what-should-i-use","title":"SLO plugins VS SLI plugins, what should I use?","text":"<p>It depends on your use case:</p> <p>If you only need to act on the SLI query level \u2014 for example, to standardize or slightly modify the queries \u2014 then SLI plugins are likely enough. They\u2019re simpler and focused solely on how the SLI is calculated.</p> <p>If you need more flexibility, such as mutating the final generated Prometheus rules, injecting metadata, rewriting a full prom rule, adding a new Prometheus rule, or making changes before Sloth's validation step, then you should use SLO plugins.</p> <p>SLO plugins are more powerful and give you full control over the SLO Sloth rules generation process, but they come with added complexity. Use them when you need deep customization.</p>"},{"location":"faq/#slo-plugins-at-slo-group-level-or-slo-level","title":"SLO plugins at SLO group level or SLO level?","text":"<p>If all the SLOs in a group need the same plugin, use the SLO group level. If you need customization at the most isolated level of SLO, use the SLO level plugins.</p> <p>Remember plugins are a chain, so you can combine both, set the shared plugin ones at SLO Group level, and specific ones at SLO level.</p>"},{"location":"faq/#custom-slo-time-windows","title":"Custom SLO time windows?","text":"<p>Please Check SLO period windows section</p>"},{"location":"introduction/","title":"Getting started","text":"<p>Get sloth and execute with one of the examples:</p> <pre><code>sloth generate -i ./examples/getting-started.yml\n</code></pre> <p>From the spec, you will obtain the rules for Prometheus with the generated SLO recording rules and alert rules.</p>  SLO spec Generated <pre><code>version: \"prometheus/v1\"\nservice: \"myservice\"\nlabels:\n  owner: \"myteam\"\n  repo: \"myorg/myservice\"\n  tier: \"2\"\nslos:\n  # We allow failing (5xx and 429) 1 request every 1000 requests (99.9%).\n  - name: \"requests-availability\"\n    objective: 99.9\n    description: \"Common SLO based on availability for HTTP request responses.\"\n    sli:\n      events:\n        error_query: sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[{{.window}}]))\n        total_query: sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[{{.window}}]))\n    alerting:\n      name: MyServiceHighErrorRate\n      labels:\n        category: \"availability\"\n      annotations:\n        # Overwrite default Sloth SLO alert summmary on ticket and page alerts.\n        summary: \"High error rate on 'myservice' requests responses\"\n      page_alert:\n        labels:\n          severity: pageteam\n          routing_key: myteam\n      ticket_alert:\n        labels:\n          severity: \"slack\"\n          slack_channel: \"#alerts-myteam\"\n</code></pre> <pre><code>---\n# Code generated by Sloth (dev): https://github.com/slok/sloth.\n# DO NOT EDIT.\n\ngroups:\n- name: sloth-slo-sli-recordings-myservice-requests-availability\n  rules:\n  - record: slo:sli_error:ratio_rate5m\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[5m])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[5m])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 5m\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate30m\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[30m])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[30m])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 30m\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate1h\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[1h])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1h])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 1h\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate2h\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[2h])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[2h])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 2h\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate6h\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[6h])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[6h])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 6h\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate1d\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[1d])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1d])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 1d\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate3d\n    expr: |\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[3d])))\n      /\n      (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[3d])))\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 3d\n      tier: \"2\"\n  - record: slo:sli_error:ratio_rate30d\n    expr: |\n      sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}[30d])\n      / ignoring (sloth_window)\n      count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}[30d])\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_window: 30d\n      tier: \"2\"\n- name: sloth-slo-meta-recordings-myservice-requests-availability\n  rules:\n  - record: slo:objective:ratio\n    expr: vector(0.9990000000000001)\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      tier: \"2\"\n  - record: slo:error_budget:ratio\n    expr: vector(1-0.9990000000000001)\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      tier: \"2\"\n  - record: slo:time_period:days\n    expr: vector(30)\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      tier: \"2\"\n  - record: slo:current_burn_rate:ratio\n    expr: |\n      slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n      / on(sloth_id, sloth_slo, sloth_service) group_left\n      slo:error_budget:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      tier: \"2\"\n  - record: slo:period_burn_rate:ratio\n    expr: |\n      slo:sli_error:ratio_rate30d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n      / on(sloth_id, sloth_slo, sloth_service) group_left\n      slo:error_budget:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      tier: \"2\"\n  - record: slo:period_error_budget_remaining:ratio\n    expr: 1 - slo:period_burn_rate:ratio{sloth_id=\"myservice-requests-availability\",\n      sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      tier: \"2\"\n  - record: sloth_slo_info\n    expr: vector(1)\n    labels:\n      cmd: examplesgen.sh\n      owner: myteam\n      repo: myorg/myservice\n      sloth_id: myservice-requests-availability\n      sloth_mode: cli-gen-prom\n      sloth_objective: \"99.9\"\n      sloth_service: myservice\n      sloth_slo: requests-availability\n      sloth_spec: prometheus/v1\n      sloth_version: dev\n      tier: \"2\"\n- name: sloth-slo-alerts-myservice-requests-availability\n  rules:\n  - alert: MyServiceHighErrorRate\n    expr: |\n      (\n          max(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (14.4 * 0.0009999999999999432)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate1h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (14.4 * 0.0009999999999999432)) without (sloth_window)\n      )\n      or\n      (\n          max(slo:sli_error:ratio_rate30m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (6 * 0.0009999999999999432)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate6h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (6 * 0.0009999999999999432)) without (sloth_window)\n      )\n    labels:\n      category: availability\n      routing_key: myteam\n      severity: pageteam\n      sloth_severity: page\n    annotations:\n      summary: High error rate on 'myservice' requests responses\n      title: (page) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget\n        burn rate is too fast.\n  - alert: MyServiceHighErrorRate\n    expr: |\n      (\n          max(slo:sli_error:ratio_rate2h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (3 * 0.0009999999999999432)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate1d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (3 * 0.0009999999999999432)) without (sloth_window)\n      )\n      or\n      (\n          max(slo:sli_error:ratio_rate6h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (1 * 0.0009999999999999432)) without (sloth_window)\n          and\n          max(slo:sli_error:ratio_rate3d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} &gt; (1 * 0.0009999999999999432)) without (sloth_window)\n      )\n    labels:\n      category: availability\n      severity: slack\n      slack_channel: '#alerts-myteam'\n      sloth_severity: ticket\n    annotations:\n      summary: High error rate on 'myservice' requests responses\n      title: (ticket) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget\n        burn rate is too fast.\n</code></pre>"},{"location":"introduction/architecture/","title":"Architecture","text":""},{"location":"introduction/architecture/#how-does-it-work","title":"How does it work","text":"<p>Sloth uses Prometheus rules to generate SLOs. Based on the generated recording and alert rules it creates a reliable and uniform SLO implementation:</p> <pre><code>stateDiagram-v2\ndirection LR\n\ninput: 1 Sloth spec\nsloth: Sloth\noutput: N prometheus rules\n\ninput --&gt; sloth\nsloth --&gt; output\n\nstate sloth {\n    direction LR\n    load: Load SLO Spec\n    metadata: Gen Metadata rules\n    slis: Gen SLI rules\n    alerts: Gen Alert rules\n    save: Out format\n\n    load --&gt; metadata\n    load --&gt; slis\n    load --&gt; alerts\n    metadata --&gt; save\n    slis --&gt; save\n    alerts --&gt; save\n}</code></pre> <p>The Prometheus rules that Sloth generates, fall in 3 categories:</p> <ul> <li>SLIs: These rules are the base, they use the queries provided by the user to get a value used to show what is the error service level (availability). It creates multiple rules for different time windows, these different results will be used for the alerts.</li> <li>Metadata: These are used as informative metrics, like the remaining error budget, the SLO objective percent... These are very handy for SLO visualization, e.g Grafana dashboard.</li> <li>Alerts: These are the multiwindow-multiburn alerts that are based on the SLI rules.</li> </ul> <p>Sloth will take the service level spec and for each SLO in the spec will create 3 rule groups with the above categories.</p>"},{"location":"introduction/architecture/#metrics","title":"Metrics","text":"<p>The Sloth generated rules will share the same metric name across SLOs. However the labels are the key to identify the different services, SLO... This is how we obtain a uniform way of describing all the SLOs across different teams and services.</p> <p>To get all the available metric names created by Sloth, use this query:</p> <pre><code>count({sloth_id!=\"\"}) by (__name__)\n</code></pre>"},{"location":"introduction/architecture/#alerts","title":"Alerts","text":"<p>Sloth SLO alerts use multiwindow-multiburn method. It will generate 2 types of alerts:</p> <ul> <li>Critical/page: Pay attention right now.</li> <li>Warning/ticket: Take into account, however is not urgent.</li> </ul> <p>Using 4 different alerts across different time window periods:</p> <ul> <li>Critical/Page in short time window: Very very high rate of burning budget.</li> <li>Critical/Page in medium time window: High rate rate of burning budget.</li> <li>Warning/Ticket in medium time window: Constant normal rate of burning budget.</li> <li>Warning/Ticket in long time window: Constant low rate of burning budget.</li> </ul> <p>Sloth doesn't trigger/generate the alerts itself, Prometheus will by using Sloth generated alerting rules. Normally something connected with Prometheus (like alertmanager) will trigger these alerts notifications (e.g Slack, Pagerduty...).</p>"},{"location":"introduction/dashboards/","title":"Dashboards","text":"<p>Sloth comes with Grafana ready dashboards to be imported and used.</p>"},{"location":"introduction/dashboards/#detailed-slos","title":"Detailed SLOs","text":"<p>Get it here</p> <p>This dashboards features detailed view of each of the SLOs.</p> <p></p> <p></p> <p>Every SLO will show:</p> <ul> <li>SLI.</li> <li>SLO metadata details (name, objective...).</li> <li>SLO Burn rate.</li> <li>Remaining error budget for the current month (Since 1<sup>st</sup>).</li> <li>Remaining error budget for the last 30 days.</li> <li>In case of enabled alerts, show the state of the current alerts.</li> <li>Error budget month burndown chart.</li> <li>Burn rate magnitude.</li> </ul> <p></p> <p>Apart from this, the dashboards has a general view of the current exceeded SLO list and graph.</p>"},{"location":"introduction/dashboards/#high-level-overview","title":"High level overview","text":"<p>Get it here</p> <p>This dashboards shows a high level overview of all the SLOs in the system managed by sloth. Normally this dashboards will be used to check correlation between SLO error budget burns.</p> <p></p> <p>This dashboards comes with:</p> <ul> <li>Information of SLOs (quantity, average burn rate of all, triggering alerts...).</li> <li>Graph and tables of the SLOs currently burning budget at high rates.</li> <li>Timeline with all SLOS error budget burns.</li> </ul>"},{"location":"introduction/features/","title":"Features","text":"<ul> <li>Simple, maintainable and understandable SLO spec.</li> <li>Reliable SLO metrics and alerts.</li> <li>Based on Google SLO implementation and multi window multi burn alerts framework.</li> <li>Autogenerates Prometheus SLI recording rules in different time windows.</li> <li>Autogenerates Prometheus SLO metadata rules.</li> <li>Autogenerates Prometheus SLO multi window multi burn alert rules (Page and warning).</li> <li>SLO spec validation (including <code>validate</code> command for Gitops and CI).</li> <li>Customization of labels, disabling different type of alerts...</li> <li>A single way (uniform) of creating SLOs across all different services and teams.</li> <li>Automatic Grafana dashboard to see all your SLOs state.</li> <li>Single binary and easy to use CLI.</li> <li>Kubernetes (Prometheus-operator) support.</li> <li>Kubernetes Controller/operator mode with CRDs.</li> <li>Support different SLI types.</li> <li>Support for SLI plugins</li> <li>Fully customizable SLO rules generation logic using SLO plugins</li> <li>A library with common SLI plugins.</li> <li>OpenSLO support.</li> </ul>"},{"location":"introduction/install/","title":"Installing Sloth","text":""},{"location":"introduction/install/#binary-releases","title":"Binary releases","text":"<ul> <li> Using github releases: https://github.com/slok/sloth/releases</li> <li> Using asdf: https://github.com/slok/asdf-sloth</li> <li> Using Arch linux AUR: https://aur.archlinux.org/packages/sloth-bin</li> </ul>"},{"location":"introduction/install/#docker-images","title":"Docker images","text":"<p>Tip</p> <p>All merged PRs on <code>main</code> branch have a docker image release.</p> <p>Official multi arch container images in ghcr.</p> <pre><code>docker pull ghcr.io/slok/sloth\n</code></pre>"},{"location":"introduction/install/#building-from-source-code","title":"Building from source code","text":"<p>Clone the repository and build:</p> <pre><code>git clone git@github.com:slok/sloth.git &amp;&amp; \\\ncd ./sloth &amp;&amp; \\\nmake build &amp;&amp; \\\nls -la ./bin\n</code></pre>"},{"location":"introduction/install/#kubernetes","title":"Kubernetes","text":"<p>CRDs</p> <p>Kubernetes installation will require Sloth CRDs to work correctly.</p>  Raw Kustomize Helm <ul> <li>Raw Kubernetes manifests without common SLI plugins</li> <li>Raw Kubernetes manifests with common SLI plugins</li> <li>CRDs</li> </ul> <pre><code>apiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\n\nresources:\n- https://raw.githubusercontent.com/slok/sloth/v0.12.0/pkg/kubernetes/gen/crd/sloth.slok.dev_prometheusservicelevels.yaml\n- https://raw.githubusercontent.com/slok/sloth/v0.12.0/deploy/kubernetes/raw/sloth-with-common-plugins.yaml\n</code></pre> <p>Helm directory is here, however, Sloth has helm releases that can be used, example:</p> <pre><code>helm repo add sloth https://slok.github.io/sloth\nhelm repo update\nhelm template sloth/sloth --include-crds\n</code></pre>"},{"location":"sli-plugins/coredns-availability/","title":"CoreDNS availability","text":"<p>Availability plugin for CoreDNS.</p> <p>Uses the coreDNS dns response metrics and error rcodes to get the correct and invalid availability.</p> <p>By default the plugin will measure as errors the <code>SERVFAIL</code> rcodes, however this can be overwrite with a regex using <code>custom_rcode_regex</code> option.</p>"},{"location":"sli-plugins/coredns-availability/#options","title":"Options","text":"<ul> <li><code>filter</code>: (Optional) A prometheus filter string using concatenated labels (e.g: <code>exported_service=\"alertmanager-api\",service=\"alertgram\"</code>)</li> <li><code>custom_rcode_regex</code>: (Optional) Custom regex to match error rcodes (e.g: <code>(NXDOMAIN|SERVFAIL|FORMERR)</code>). More codes here. If not set it will be used <code>SERVFAIL</code> by default.</li> </ul>"},{"location":"sli-plugins/coredns-availability/#metric-requirements","title":"Metric requirements","text":"<ul> <li><code>coredns_dns_responses_total</code>: From coreDNS.</li> </ul>"},{"location":"sli-plugins/coredns-availability/#usage-examples","title":"Usage examples","text":""},{"location":"sli-plugins/coredns-availability/#without-filter-nor-custom-rcode-regex","title":"Without filter nor custom rcode regex","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/coredns/availability\"\n</code></pre>"},{"location":"sli-plugins/coredns-availability/#default-rcode-and-custom-filter","title":"Default rcode and custom filter","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/coredns/availability\"\n    options:\n      filter: job=\"kube-dns\",server=\"dns://:53\",service=\"kube-dns\", zone=\".\"\n</code></pre>"},{"location":"sli-plugins/coredns-availability/#custom-rcode-without-filters","title":"Custom rcode without filters","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/coredns/availability\"\n    options:\n      custom_rcode_regex: (NXDOMAIN|SERVFAIL|FORMERR)\n</code></pre>"},{"location":"sli-plugins/coredns-availability/#custom-rcode-with-filters","title":"Custom rcode with filters","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/coredns/availability\"\n    options:\n      filter: job=\"kube-dns\",server=\"dns://:53\",service=\"kube-dns\", zone=\".\"\n      custom_rcode_regex: (NXDOMAIN|SERVFAIL|FORMERR)\n</code></pre>"},{"location":"sli-plugins/coredns-latency/","title":"CoreDNS latency","text":"<p>Request/response latency plugin for CoreDNS.</p>"},{"location":"sli-plugins/coredns-latency/#options","title":"Options","text":"<ul> <li><code>bucket</code>: (Required) The max latency allowed histogram bucket.</li> <li><code>filter</code>: (Optional) A prometheus filter string using concatenated labels (e.g: <code>exported_service=\"alertmanager-api\",service=\"alertgram\"</code>)</li> </ul>"},{"location":"sli-plugins/coredns-latency/#metric-requirements","title":"Metric requirements","text":"<ul> <li><code>coredns_dns_request_duration_seconds_bucket</code>: From coreDNS.</li> <li><code>coredns_dns_request_duration_seconds_count</code>: From coreDNS.</li> </ul>"},{"location":"sli-plugins/coredns-latency/#usage-examples","title":"Usage examples","text":""},{"location":"sli-plugins/coredns-latency/#without-filter","title":"Without filter","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/coredns/latency\"\n    options:\n      bucket: \"0.25\"\n</code></pre>"},{"location":"sli-plugins/coredns-latency/#with-filter","title":"With filter","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/coredns/latency\"\n    options:\n      bucket: \"0.032\"\n      filter: job=\"kube-dns\",server=\"dns://:53\",service=\"kube-dns\", zone=\".\"\n</code></pre>"},{"location":"sli-plugins/fake/","title":"Fake","text":"<p>A plugin that can fake a burning rate based on speed/rate factor options. A good plugin for exploring/learning how SLOs, SLIs, error budget and SLO alerting works.</p> <p>You can get more information on the SRE workbook <code>Alert on burn rate</code> section.</p>"},{"location":"sli-plugins/fake/#options","title":"Options","text":"<ul> <li><code>burn_rate</code>: (Required) A number that tells the burn rate factor (e.g: <code>1</code>, <code>2</code>, <code>10</code>...).</li> <li><code>jitter_percent</code>: (Optional) A percent number that will add/remove jitter on the burned rate.</li> </ul>"},{"location":"sli-plugins/fake/#metric-requirements","title":"Metric requirements","text":"<p>Doesn't have any metric requirements.</p>"},{"location":"sli-plugins/fake/#usage-examples","title":"Usage examples","text":""},{"location":"sli-plugins/fake/#05x-speed-30d-window-consumed-in-60d","title":"0.5x speed <code>30d</code> window, consumed in <code>60d</code>","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/fake\"\n    options:\n      burn_rate: \"0.5\"\n</code></pre>"},{"location":"sli-plugins/fake/#1x-speed-30d-window-consumed-in-30d","title":"1x speed <code>30d</code> window, consumed in <code>30d</code>","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/fake\"\n    options:\n      burn_rate: \"1\"\n</code></pre>"},{"location":"sli-plugins/fake/#2x-speed-30d-window-consumed-in-15d","title":"2x speed <code>30d</code> window, consumed in <code>15d</code>","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/fake\"\n    options:\n      burn_rate: \"2\"\n</code></pre>"},{"location":"sli-plugins/fake/#10x-speed-30d-window-consumed-in-3d","title":"10x speed <code>30d</code> window, consumed in <code>3d</code>","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/fake\"\n    options:\n      burn_rate: \"10\"\n</code></pre>"},{"location":"sli-plugins/fake/#10x-speed-30d-window-consumed-in-43m","title":"10x speed <code>30d</code> window, consumed in <code>43m</code>","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/fake\"\n    options:\n      burn_rate: \"1000\"\n</code></pre>"},{"location":"sli-plugins/fake/#1x-speed-30d-window-consumed-in-30d-using-jitter","title":"1x speed <code>30d</code> window, consumed in <code>30d</code> using jitter","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/fake\"\n    options:\n      burn_rate: \"1\"\n      jitter_percent: \"10\"\n</code></pre>"},{"location":"sli-plugins/haproxy-frontend-availability/","title":"HAProxy availability","text":"<p>Availability plugin for the haproxy 2.x prometheus metrics.</p> <p>Uses the standard prometheus metrics from a haproxy 2.x release to create an sli against the frontend metrics based on http response codes.</p> <p>In other words, it counts as good events the &lt;500  HTTP response status codes.</p>"},{"location":"sli-plugins/haproxy-frontend-availability/#options","title":"Options","text":"<ul> <li><code>filter</code>: (Optional) A prometheus filter string using concatenated labels (e.g: <code>instance=~\"hostname.pattern.*\"</code>)</li> </ul>"},{"location":"sli-plugins/haproxy-frontend-availability/#metric-requirements","title":"Metric requirements","text":"<ul> <li><code>haproxy_frontend_http_responses_total</code>.</li> </ul>"},{"location":"sli-plugins/haproxy-frontend-availability/#usage-examples","title":"Usage examples","text":""},{"location":"sli-plugins/haproxy-frontend-availability/#without-filter","title":"Without filter","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/haproxy/frontend/availability\"\n</code></pre>"},{"location":"sli-plugins/haproxy-frontend-availability/#with-custom-filter","title":"With custom filter","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/haproxy/frontend/availability\"\n    options:\n      filter: instance=~\"web-front-load-balancers.*\"\n</code></pre>"},{"location":"sli-plugins/istio-v1-availability/","title":"Istio V1 availability","text":"<p>Availability plugin for Istio V1 services.</p> <p>Uses Istio v1 request metrics to get the availability on a service.</p>"},{"location":"sli-plugins/istio-v1-availability/#options","title":"Options","text":"<ul> <li><code>namespace</code>: (required) Kubernetes namespace of the service.</li> <li><code>service</code>: (required) Service name.</li> <li><code>filter</code>: (Optional) A prometheus filter string using concatenated labels</li> </ul>"},{"location":"sli-plugins/istio-v1-availability/#metric-requirements","title":"Metric requirements","text":"<ul> <li><code>istio_requests_total</code>: From istio.</li> </ul>"},{"location":"sli-plugins/istio-v1-availability/#usage-examples","title":"Usage examples","text":""},{"location":"sli-plugins/istio-v1-availability/#without-filter","title":"Without filter","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/istio/v1/availability\"\n    options:\n      namespace: \"default\"\n      service: \"test\"\n</code></pre>"},{"location":"sli-plugins/istio-v1-availability/#with-filters","title":"With filters","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/istio/v1/availability\"\n    options:\n      namespace: \"default\"\n      service: \"test\"\n      filter: request_protocol=\"http\"\n</code></pre>"},{"location":"sli-plugins/istio-v1-latency/","title":"Istio V1 latency","text":"<p>Latency plugin for Istio V1 services.</p> <p>Uses Istio v1 request metrics to get the latency on a service.</p>"},{"location":"sli-plugins/istio-v1-latency/#options","title":"Options","text":"<ul> <li><code>namespace</code>: (required) Kubernetes namespace of the service.</li> <li><code>service</code>: (required) Service name.</li> <li><code>bucket</code>: (Required) The max latency allowed histogram bucket.</li> <li><code>exclude_errors</code>: (Optional) Boolean that will exclude errored requests from valid events</li> <li><code>filter</code>: (Optional) A prometheus filter string using concatenated labels</li> </ul>"},{"location":"sli-plugins/istio-v1-latency/#metric-requirements","title":"Metric requirements","text":"<ul> <li><code>istio_request_duration_milliseconds_bucket</code>: From istio.</li> <li><code>istio_request_duration_milliseconds_count</code>: From istio.</li> </ul>"},{"location":"sli-plugins/istio-v1-latency/#usage-examples","title":"Usage examples","text":""},{"location":"sli-plugins/istio-v1-latency/#without-filter","title":"Without filter","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/istio/v1/latency\"\n    options:\n      namespace: \"default\"\n      service: \"test\"\n      bucket: \"300\"\n</code></pre>"},{"location":"sli-plugins/istio-v1-latency/#with-filters","title":"With filters","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/istio/v1/latency\"\n    options:\n      namespace: \"default\"\n      service: \"test\"\n      bucket: \"300\"\n      filter: request_protocol=\"http\"\n</code></pre>"},{"location":"sli-plugins/istio-v1-latency/#excluding-errors-5xx","title":"Excluding errors (5xx)","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/istio/v1/latency\"\n    options:\n      namespace: \"default\"\n      service: \"test\"\n      bucket: \"300\"\n      filter: request_protocol=\"http\"\n      exclude_errors: true\n</code></pre>"},{"location":"sli-plugins/kubernetes-apiserver-availability/","title":"Kubernetes apiserver availability","text":"<p>Availability plugin for the Kubernetes apiserver.</p> <p>Uses the API HTTP response status codes to measure the events as good or bad. It counts an error event when HTTP response status code is &gt;=500 or 429.</p> <p>In other words, it counts as good events the &lt;500 and !429 HTTP response status codes.</p>"},{"location":"sli-plugins/kubernetes-apiserver-availability/#options","title":"Options","text":"<ul> <li><code>filter</code>: (Optional) A prometheus filter string using concatenated labels (e.g: <code>job=\"k8sapiserver\",env=\"production\",cluster=\"k8s-42\"</code>)</li> </ul>"},{"location":"sli-plugins/kubernetes-apiserver-availability/#metric-requirements","title":"Metric requirements","text":"<ul> <li><code>apiserver_request_total</code>.</li> </ul>"},{"location":"sli-plugins/kubernetes-apiserver-availability/#usage-examples","title":"Usage examples","text":""},{"location":"sli-plugins/kubernetes-apiserver-availability/#without-filter","title":"Without filter","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/kubernetes/apiserver/availability\"\n</code></pre>"},{"location":"sli-plugins/kubernetes-apiserver-availability/#with-custom-filter","title":"With custom filter","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/kubernetes/apiserver/availability\"\n    options:\n      filter: job=\"k8sapiserver\",env=\"production\",cluster=\"k8s-42\"\n</code></pre>"},{"location":"sli-plugins/kubernetes-apiserver-latency/","title":"Kubernetes apiserver latency","text":"<p>Latency plugin for the Kubernetes apiserver.</p> <p>Uses the API HTTP response histogram to measure the events as good or bad. It counts as error events that don't fall in the provided bucket.</p> <p>For example if the bucket is <code>0.2</code>, We will measure as an error, the requests that fall in the buckets greater than <code>0.2</code>, in other words, that took longer than <code>200ms</code> .</p>"},{"location":"sli-plugins/kubernetes-apiserver-latency/#options","title":"Options","text":"<ul> <li><code>bucket</code>: (Required) The max latency allowed hitogram bucket.</li> <li><code>filter</code>: (Optional) A prometheus filter string using concatenated labels (e.g: <code>job=\"k8sapiserver\",env=\"production\",cluster=\"k8s-42\"</code>)</li> </ul>"},{"location":"sli-plugins/kubernetes-apiserver-latency/#metric-requirements","title":"Metric requirements","text":"<ul> <li><code>apiserver_request_duration_seconds_count</code>.</li> <li><code>apiserver_request_duration_seconds_bucket</code>.</li> </ul>"},{"location":"sli-plugins/kubernetes-apiserver-latency/#usage-examples","title":"Usage examples","text":""},{"location":"sli-plugins/kubernetes-apiserver-latency/#dont-allow-requests-50ms","title":"Don't allow requests &gt;50ms","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/kubernetes/apiserver/latency\"\n    options:\n      bucket: \"0.05\"\n</code></pre>"},{"location":"sli-plugins/kubernetes-apiserver-latency/#dont-allow-requests-200ms","title":"Don't allow requests &gt;200ms","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/kubernetes/apiserver/latency\"\n    options:\n      bucket: \"0.2\"\n</code></pre>"},{"location":"sli-plugins/kubernetes-apiserver-latency/#dont-allow-requests-1s","title":"Don't allow requests &gt;1s","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/kubernetes/apiserver/latency\"\n    options:\n      bucket: \"1\"\n</code></pre>"},{"location":"sli-plugins/kubernetes-apiserver-latency/#with-custom-filter","title":"With custom filter","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/kubernetes/apiserver/latency\"\n    options:\n      bucket: \"0.2\"\n      filter: job=\"k8sapiserver\",env=\"production\",cluster=\"k8s-42\"\n</code></pre>"},{"location":"sli-plugins/kubernetes-kooper-availability/","title":"Kubernetes Kooper availability","text":"<p>Availability plugin for the Kubernetes Kooper controller/operator library.</p> <p>Kooper library tracks the retries. These retries will be subtracted from the total events, so the number of retries doesn't affect the error ratio.</p> <p>Kooper retries are processed as a correct metrics.</p>"},{"location":"sli-plugins/kubernetes-kooper-availability/#options","title":"Options","text":"<ul> <li><code>controller</code>: (Required) The controller being measured.</li> <li><code>filter</code>: (Optional) Prometheus extra label filter.</li> </ul>"},{"location":"sli-plugins/kubernetes-kooper-availability/#metric-requirements","title":"Metric requirements","text":"<ul> <li><code>kooper_controller_processed_event_duration_seconds_count</code>.</li> <li><code>kooper_controller_queued_events_total</code>.</li> </ul>"},{"location":"sli-plugins/kubernetes-kooper-availability/#usage-examples","title":"Usage examples","text":""},{"location":"sli-plugins/kubernetes-kooper-availability/#without-filter","title":"Without filter","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/kubernetes/kooper/availability\"\n    options:\n      controller: \"sloth\"\n</code></pre>"},{"location":"sli-plugins/kubernetes-kooper-availability/#with-filter","title":"With filter","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/kubernetes/kooper/availability\"\n    options:\n      controller: \"sloth\"\n      filter: job=\"svc1\",env=\"prod\"\n</code></pre>"},{"location":"sli-plugins/kubernetes-kooper-latency/","title":"Kubernetes Kooper latency","text":"<p>Latency plugin for the Kubernetes Kooper controller/operator library.</p> <p>This SLI will measure the latency of handling events/k8s objects on the Kooper controller handlers.</p>"},{"location":"sli-plugins/kubernetes-kooper-latency/#options","title":"Options","text":"<ul> <li><code>controller</code>: (Required) The controller being measured.</li> <li><code>bucket</code>: (Required) The max latency allowed histogram bucket.</li> <li><code>filter</code>: (Optional) Prometheus extra label filter.</li> </ul>"},{"location":"sli-plugins/kubernetes-kooper-latency/#metric-requirements","title":"Metric requirements","text":"<ul> <li><code>kooper_controller_processed_event_duration_seconds_bucket</code>.</li> <li><code>kooper_controller_processed_event_duration_seconds_count</code>.</li> </ul>"},{"location":"sli-plugins/kubernetes-kooper-latency/#usage-examples","title":"Usage examples","text":""},{"location":"sli-plugins/kubernetes-kooper-latency/#without-filter","title":"Without filter","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/kubernetes/kooper/latency\"\n    options:\n      controller: \"sloth\"\n      bucket: \"0.25\"\n</code></pre>"},{"location":"sli-plugins/kubernetes-kooper-latency/#with-filter","title":"With filter","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/kubernetes/kooper/latency\"\n    options:\n      controller: \"sloth\"\n      bucket: \"0.25\"\n      filter: job=\"svc1\",env=\"prod\"\n</code></pre>"},{"location":"sli-plugins/kubernetes-kooper-queuecongestion/","title":"Kubernetes Kooper Queue congestion","text":"<p>Queue congestion plugin for the Kubernetes Kooper controller/operator library.</p> <p>This SLI will measure if there is a congestion on the event queue based on the duration an event is hold in the queue before being processed.</p>"},{"location":"sli-plugins/kubernetes-kooper-queuecongestion/#options","title":"Options","text":"<ul> <li><code>controller</code>: (Required) The controller being measured.</li> <li><code>bucket</code>: (Required) The max latency allowed hitogram bucket.</li> <li><code>filter</code>: (Optional) Prometheus extra label filter.</li> </ul>"},{"location":"sli-plugins/kubernetes-kooper-queuecongestion/#metric-requirements","title":"Metric requirements","text":"<ul> <li><code>kooper_controller_event_in_queue_duration_seconds_count</code>.</li> <li><code>kooper_controller_event_in_queue_duration_seconds_bucket</code>.</li> </ul>"},{"location":"sli-plugins/kubernetes-kooper-queuecongestion/#usage-examples","title":"Usage examples","text":""},{"location":"sli-plugins/kubernetes-kooper-queuecongestion/#without-filter","title":"Without filter","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/kubernetes/kooper/queue-congestion\"\n    options:\n      controller: \"sloth\"\n      bucket: \"0.25\"\n</code></pre>"},{"location":"sli-plugins/kubernetes-kooper-queuecongestion/#with-filter","title":"With filter","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/kubernetes/kooper/queue-congestion\"\n    options:\n      controller: \"sloth\"\n      bucket: \"0.25\"\n      filter: job=\"svc1\",env=\"prod\"\n</code></pre>"},{"location":"sli-plugins/kubernetes-nginx-ingress-availability/","title":"Kubernetes nginx-ingress availability","text":"<p>Availability plugin for services using the nginx ingress controller for exposure.</p> <p>Uses the HTTP response status codes to measure the events as good or bad. It counts an error event when HTTP response status code is &gt;=500 or 429.</p> <p>In other words, it counts as good events the &lt;500 and !429 HTTP response status codes.</p>"},{"location":"sli-plugins/kubernetes-nginx-ingress-availability/#options","title":"Options","text":"<ul> <li><code>filter</code>: (Optional) A prometheus filter string using concatenated labels (e.g: <code>job=\"k8sapiserver\",env=\"production\",cluster=\"k8s-42\"</code>)</li> </ul>"},{"location":"sli-plugins/kubernetes-nginx-ingress-availability/#metric-requirements","title":"Metric requirements","text":"<ul> <li><code>nginx_ingress_controller_requests</code>.</li> </ul>"},{"location":"sli-plugins/kubernetes-nginx-ingress-availability/#usage-examples","title":"Usage examples","text":""},{"location":"sli-plugins/kubernetes-nginx-ingress-availability/#without-filter","title":"Without filter","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/kubernetes/nginx-ingress/availability\"\n</code></pre>"},{"location":"sli-plugins/kubernetes-nginx-ingress-availability/#with-custom-filter","title":"With custom filter","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/kubernetes/nginx-ingress/availability\"\n    options:\n      filter: ingress=\"k8sapiserver\",host=\"my.example.com\",exported_namespace=\"my-production-app\"\n</code></pre>"},{"location":"sli-plugins/noop/","title":"Noop","text":"<p>A plugin that always returns a query that will return 0. the aim of this plugin is to use as a placeholder and example to create other plugins.</p>"},{"location":"sli-plugins/noop/#options","title":"Options","text":"<p>Doesn't have any options.</p>"},{"location":"sli-plugins/noop/#metric-requirements","title":"Metric requirements","text":"<p>Doesn't have any metric requirements.</p>"},{"location":"sli-plugins/noop/#usage-examples","title":"Usage examples","text":"<pre><code>#...\nsli:\n  plugin:\n  id: \"sloth-common/noop\"\n</code></pre>"},{"location":"sli-plugins/prometheus-rules-evalavailability/","title":"Prometheus rules evaluation availability","text":"<p>Availability plugin for the Prometheus rules evaluation.</p>"},{"location":"sli-plugins/prometheus-rules-evalavailability/#options","title":"Options","text":"<ul> <li><code>filter</code>: (Optional) Prometheus extra label filter.</li> </ul>"},{"location":"sli-plugins/prometheus-rules-evalavailability/#metric-requirements","title":"Metric requirements","text":"<ul> <li><code>prometheus_rule_evaluation_failures_total</code>.</li> <li><code>prometheus_rule_evaluations_total</code></li> </ul>"},{"location":"sli-plugins/prometheus-rules-evalavailability/#usage-examples","title":"Usage examples","text":""},{"location":"sli-plugins/prometheus-rules-evalavailability/#without-filter","title":"Without filter","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/prometheus/rules/eval-availability\"\n</code></pre>"},{"location":"sli-plugins/prometheus-rules-evalavailability/#with-filter","title":"With filter","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/prometheus/rules/eval-availability\"\n    options:\n      filter: job=\"svc1\",env=\"prod\"\n</code></pre>"},{"location":"sli-plugins/prometheus-targets-availability/","title":"Prometheus Target availability","text":"<p>Availability plugin for the Prometheus targets.</p> <p>A target will be counted as an error when is not up to be scraped by Prometheus.</p>"},{"location":"sli-plugins/prometheus-targets-availability/#options","title":"Options","text":"<ul> <li><code>filter</code>: (Optional) Prometheus extra label filter.</li> </ul>"},{"location":"sli-plugins/prometheus-targets-availability/#metric-requirements","title":"Metric requirements","text":"<ul> <li><code>up</code>.</li> </ul>"},{"location":"sli-plugins/prometheus-targets-availability/#usage-examples","title":"Usage examples","text":""},{"location":"sli-plugins/prometheus-targets-availability/#without-filter","title":"Without filter","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/prometheus/targets/availability\"\n</code></pre>"},{"location":"sli-plugins/prometheus-targets-availability/#with-filter","title":"With filter","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/prometheus/targets/availability\"\n    options:\n      filter: job=\"svc1\",env=\"prod\"\n</code></pre>"},{"location":"sli-plugins/slok-go-http-metrics-availability/","title":"slok/go-http-metrics availability","text":"<p>Availability plugin for slok/go-http-metrics.</p> <p>Uses the API HTTP response status codes to measure the events as good or bad. It counts an error event when HTTP response status code is &gt;=500 or 429.</p> <p>In other words, it counts as good events the &lt;500 and !429 HTTP response status codes.</p>"},{"location":"sli-plugins/slok-go-http-metrics-availability/#options","title":"Options","text":"<ul> <li><code>filter</code>: (Required) A prometheus filter string using concatenated labels (e.g: <code>exported_service=\"alertmanager-api\",service=\"alertgram\"</code>)</li> </ul>"},{"location":"sli-plugins/slok-go-http-metrics-availability/#metric-requirements","title":"Metric requirements","text":"<ul> <li><code>http_request_duration_seconds_count</code>: From slok/go-http-metrics.</li> </ul>"},{"location":"sli-plugins/slok-go-http-metrics-availability/#usage-examples","title":"Usage examples","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/slok-go-http-metrics/availability\"\n    options:\n      filter: exported_service=\"alertmanager-api\",service=\"alertgram\"\n</code></pre>"},{"location":"sli-plugins/slok-go-http-metrics-latency/","title":"slok/go-http-metrics latency","text":"<p>Latency plugin for slok/go-http-metrics.</p> <p>Uses the HTTP response histogram to measure the events as good or bad. It counts as error events that don't fall in the provided bucket.</p> <p>For example if the bucket is <code>0.25</code>, We will measure as an error, the requests that fall in the buckets greater than <code>0.25</code>, in other words, that took longer than <code>250ms</code> .</p>"},{"location":"sli-plugins/slok-go-http-metrics-latency/#options","title":"Options","text":"<ul> <li><code>bucket</code>: (Required) The max latency allowed histogram bucket.</li> <li><code>filter</code>: (Required) A prometheus filter string using concatenated labels (e.g: <code>exported_service=\"alertmanager-api\",service=\"alertgram\"</code>)</li> <li><code>exclude_errors</code>: (Optional) Boolean that will exclude errored requests from valid events when measuring latency requests.</li> </ul>"},{"location":"sli-plugins/slok-go-http-metrics-latency/#metric-requirements","title":"Metric requirements","text":"<ul> <li><code>http_request_duration_seconds_bucket</code>: From slok/go-http-metrics.</li> <li><code>http_request_duration_seconds_count</code>: From slok/go-http-metrics.</li> </ul>"},{"location":"sli-plugins/slok-go-http-metrics-latency/#usage-examples","title":"Usage examples","text":""},{"location":"sli-plugins/slok-go-http-metrics-latency/#default","title":"Default","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/slok-go-http-metrics/latency\"\n    options:\n      filter: exported_service=\"alertmanager-api\",service=\"alertgram\"\n      bucket: \"1\"\n</code></pre>"},{"location":"sli-plugins/slok-go-http-metrics-latency/#excluding-errors-5xx","title":"Excluding errors (5xx)","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/slok-go-http-metrics/latency\"\n    options:\n      filter: exported_service=\"alertmanager-api\",service=\"alertgram\"\n      bucket: \"0.25\"\n      exclude_errors: \"true\"\n</code></pre>"},{"location":"sli-plugins/traefik-v1-availability/","title":"Traefik V1 availability","text":"<p>Availability plugin for Traefik V1 backends.</p> <p>Uses Traefik v1 backend metrics to get the correct and invalid availability on the serving backends.</p>"},{"location":"sli-plugins/traefik-v1-availability/#options","title":"Options","text":"<ul> <li><code>filter</code>: (Optional) A prometheus filter string using concatenated labels</li> <li><code>backend_regex</code>: (required) Regex to match the traefik backends.</li> </ul>"},{"location":"sli-plugins/traefik-v1-availability/#metric-requirements","title":"Metric requirements","text":"<ul> <li><code>traefik_backend_requests_total</code>: From traefik.</li> </ul>"},{"location":"sli-plugins/traefik-v1-availability/#usage-examples","title":"Usage examples","text":""},{"location":"sli-plugins/traefik-v1-availability/#without-filter","title":"Without filter","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/traefik/v1/availability\"\n    options:\n      backend_regex: \"^github.com/slok/sloth/?$\"\n</code></pre>"},{"location":"sli-plugins/traefik-v1-availability/#with-filters","title":"With filters","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/traefik/v1/availability\"\n    options:\n      backend_regex: \"^github.com/slok/sloth/?$\"\n      filter: method=\"GET\"\n</code></pre>"},{"location":"sli-plugins/traefik-v1-latency/","title":"Traefik V1 latency","text":"<p>Latency plugin for Traefik V1 backends.</p> <p>Uses Traefik v1 backend metrics to get the latency on the serving backends.</p>"},{"location":"sli-plugins/traefik-v1-latency/#options","title":"Options","text":"<ul> <li><code>bucket</code>: (Required) The max latency allowed histogram bucket.</li> <li><code>backend_regex</code>: (required) Regex to match the traefik backends.</li> <li><code>filter</code>: (Optional) A prometheus filter string using concatenated labels</li> <li><code>exclude_errors</code>: (Optional) Boolean that will exclude errored requests from valid events when measuring latency requests.</li> </ul>"},{"location":"sli-plugins/traefik-v1-latency/#metric-requirements","title":"Metric requirements","text":"<ul> <li><code>traefik_backend_request_duration_seconds_bucket</code>: From traefik.</li> <li><code>traefik_backend_request_duration_seconds_count</code>: From traefik.</li> </ul>"},{"location":"sli-plugins/traefik-v1-latency/#usage-examples","title":"Usage examples","text":""},{"location":"sli-plugins/traefik-v1-latency/#without-filter","title":"Without filter","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/traefik/v1/latency\"\n    options:\n      backend_regex: \"^github.com/slok/sloth/?$\"\n      bucket: \"0.3\"\n</code></pre>"},{"location":"sli-plugins/traefik-v1-latency/#with-filters","title":"With filters","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/traefik/v1/latency\"\n    options:\n      backend_regex: \"^github.com/slok/sloth/?$\"\n      bucket: \"0.3\"\n      filter: method=\"GET\"\n</code></pre>"},{"location":"sli-plugins/traefik-v1-latency/#excluding-errors-5xx","title":"Excluding errors (5xx)","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/traefik/v1/latency\"\n    options:\n      backend_regex: \"^github.com/slok/sloth/?$\"\n      bucket: \"0.3\"\n      filter: method=\"GET\"\n      exclude_errors: \"true\"\n</code></pre>"},{"location":"sli-plugins/traefik-v2-availability/","title":"Traefik V2 availability","text":"<p>Availability plugin for Traefik V2 services.</p> <p>Uses Traefik v2 service metrics to get the correct and invalid availability on the serving services.</p>"},{"location":"sli-plugins/traefik-v2-availability/#options","title":"Options","text":"<ul> <li><code>filter</code>: (Optional) A prometheus filter string using concatenated labels</li> <li><code>service_name_regex</code>: (required) Regex to match the traefik services.</li> </ul>"},{"location":"sli-plugins/traefik-v2-availability/#metric-requirements","title":"Metric requirements","text":"<ul> <li><code>traefik_service_requests_total</code>: From traefik.</li> </ul>"},{"location":"sli-plugins/traefik-v2-availability/#usage-examples","title":"Usage examples","text":""},{"location":"sli-plugins/traefik-v2-availability/#without-filter","title":"Without filter","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/traefik/v2/availability\"\n    options:\n      service_name_regex: \"^default-slok-sloth$\"\n</code></pre>"},{"location":"sli-plugins/traefik-v2-availability/#with-filters","title":"With filters","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/traefik/v2/availability\"\n    options:\n      service_name_regex: \"^default-slok-sloth$\"\n      filter: method=\"GET\"\n</code></pre>"},{"location":"sli-plugins/traefik-v2-latency/","title":"Traefik V2 latency","text":"<p>Latency plugin for Traefik V2 services.</p> <p>Uses Traefik v2 service metrics to get the latency on the serving services.</p>"},{"location":"sli-plugins/traefik-v2-latency/#options","title":"Options","text":"<ul> <li><code>bucket</code>: (Required) The max latency allowed histogram bucket.</li> <li><code>service_name_regex</code>: (required) Regex to match the traefik service.</li> <li><code>filter</code>: (Optional) A prometheus filter string using concatenated labels</li> <li><code>exclude_errors</code>: (Optional) Boolean that will exclude errored requests from valid events when measuring latency requests.</li> </ul>"},{"location":"sli-plugins/traefik-v2-latency/#metric-requirements","title":"Metric requirements","text":"<ul> <li><code>traefik_service_request_duration_seconds_bucket</code>: From traefik.</li> <li><code>traefik_service_request_duration_seconds_count</code>: From traefik.</li> </ul>"},{"location":"sli-plugins/traefik-v2-latency/#usage-examples","title":"Usage examples","text":""},{"location":"sli-plugins/traefik-v2-latency/#without-filter","title":"Without filter","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/traefik/v2/latency\"\n    options:\n      service_name_regex: \"^default-slok-sloth$\"\n      bucket: \"0.3\"\n</code></pre>"},{"location":"sli-plugins/traefik-v2-latency/#with-filters","title":"With filters","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/traefik/v2/latency\"\n    options:\n      service_name_regex: \"^default-slok-sloth$\"\n      bucket: \"0.3\"\n      filter: method=\"GET\"\n</code></pre>"},{"location":"sli-plugins/traefik-v2-latency/#excluding-errors-5xx","title":"Excluding errors (5xx)","text":"<pre><code>sli:\n  plugin:\n    id: \"sloth-common/traefik/v2/latency\"\n    options:\n      service_name_regex: \"^default-slok-sloth$\"\n      bucket: \"0.3\"\n      filter: method=\"GET\"\n      exclude_errors: \"true\"\n</code></pre>"},{"location":"specs/default/","title":"Default (prometheus/v1)","text":"<p> Can't be used with Kubernetes controller</p> <p>This spec can't be used with Kubernetes CRDs, use Kubernetes spec instead.</p> <p>This is the default format for Sloth, doesn't depend on Kubernetes CRDs or anything.</p> <p>Normally this format is used when the integration you want is a vanilla Prometheus integration with raw Prometheus rules, so, this will generate the prometheus recording and alerting rules in Standard Prometheus YAML format.</p> <ul> <li>Spec</li> <li>Examples</li> </ul> <p>Example</p> <pre><code>$ sloth generate -i ./examples/home-wifi.yml -o /tmp/home-wifi.yml\nINFO[0000] Generating from Prometheus spec               version=v0.1.0-43-g5715af5\nINFO[0000] Multiwindow-multiburn alerts generated        slo=home-wifi-good-wifi-client-satisfaction svc=generate.prometheus.Service version=v0.1.0-43-g5715af5\nINFO[0000] SLI recording rules generated                 rules=8 slo=home-wifi-good-wifi-client-satisfaction svc=generate.prometheus.Service version=v0.1.0-43-g5715af5\nINFO[0000] Metadata recording rules generated            rules=7 slo=home-wifi-good-wifi-client-satisfaction svc=generate.prometheus.Service version=v0.1.0-43-g5715af5\nINFO[0000] SLO alert rules generated                     rules=2 slo=home-wifi-good-wifi-client-satisfaction svc=generate.prometheus.Service version=v0.1.0-43-g5715af5\nINFO[0000] Multiwindow-multiburn alerts generated        slo=home-wifi-risk-wifi-client-satisfaction svc=generate.prometheus.Service version=v0.1.0-43-g5715af5\nINFO[0000] SLI recording rules generated                 rules=8 slo=home-wifi-risk-wifi-client-satisfaction svc=generate.prometheus.Service version=v0.1.0-43-g5715af5\nINFO[0000] Metadata recording rules generated            rules=7 slo=home-wifi-risk-wifi-client-satisfaction svc=generate.prometheus.Service version=v0.1.0-43-g5715af5\nINFO[0000] SLO alert rules generated                     rules=2 slo=home-wifi-risk-wifi-client-satisfaction svc=generate.prometheus.Service version=v0.1.0-43-g5715af5\nINFO[0000] Prometheus rules written                      format=yaml groups=6 out=/tmp/home-wifi.yml svc=storage.IOWriter version=v0.1.0-43-g5715af5\n</code></pre>"},{"location":"specs/kubernetes/","title":"Kubernetes (CRD)","text":"<p> Compatible with CLI</p> <p>This spec can be used in the same way the default spec is used with the CLI.</p> <p> Compatible with Kubernetes</p> <p>This spec can be used as a Kubernetes resource using CR (needs CRD registered on Kubernetes APIserver).</p> <p>Kubernetes format means that the SLOs use a Kubernetes style spec. Is very similar to the default one, except that this format can be used in two ways, the regular CLI mode, and in Kubernetes controller mode using CRs.</p> <p>Check related resources:</p> <ul> <li>Spec.</li> <li>Examples</li> <li>K8s client.</li> <li>CRD manifest.</li> </ul> <p>Will generate from a Sloth CRD spec into [Prometheus-operator][crd rules][prom-op-rules]. This generates the prometheus operator CRDs based on the Sloth CRD template.</p> <p>Example</p> <pre><code>$ sloth generate -i ./examples/k8s-home-wifi.yml -o /tmp/k8s-home-wifi.yml\nINFO[0000] Generating from Kubernetes Prometheus spec    version=v0.1.0-43-g5715af5\nINFO[0000] Multiwindow-multiburn alerts generated        slo=home-wifi-good-wifi-client-satisfaction svc=generate.prometheus.Service version=v0.1.0-43-g5715af5\nINFO[0000] SLI recording rules generated                 rules=8 slo=home-wifi-good-wifi-client-satisfaction svc=generate.prometheus.Service version=v0.1.0-43-g5715af5\nINFO[0000] Metadata recording rules generated            rules=7 slo=home-wifi-good-wifi-client-satisfaction svc=generate.prometheus.Service version=v0.1.0-43-g5715af5\nINFO[0000] SLO alert rules generated                     rules=2 slo=home-wifi-good-wifi-client-satisfaction svc=generate.prometheus.Service version=v0.1.0-43-g5715af5\nINFO[0000] Multiwindow-multiburn alerts generated        slo=home-wifi-risk-wifi-client-satisfaction svc=generate.prometheus.Service version=v0.1.0-43-g5715af5\nINFO[0000] SLI recording rules generated                 rules=8 slo=home-wifi-risk-wifi-client-satisfaction svc=generate.prometheus.Service version=v0.1.0-43-g5715af5\nINFO[0000] Metadata recording rules generated            rules=7 slo=home-wifi-risk-wifi-client-satisfaction svc=generate.prometheus.Service version=v0.1.0-43-g5715af5\nINFO[0000] SLO alert rules generated                     rules=2 slo=home-wifi-risk-wifi-client-satisfaction svc=generate.prometheus.Service version=v0.1.0-43-g5715af5\n</code></pre>"},{"location":"specs/openslo/","title":"OpenSLO","text":"<p> Only Compatible with CLI, Not Kubernetes compatible</p> <p>This spec can't be used with Kubernetes CRDs, use Kubernetes spec instead.</p> <p>Sloth supports OpenSLO v1alpha spec, however we need to take into account that it has some restrictions:</p> <ul> <li>OpenSLO time window restricted to 30 days.</li> <li>Only Objective ratio metrics are supported.</li> <li>Only Prometheus and PromQL query types are supported.</li> <li>Configuration fields not required by Sloth will be ignored.</li> </ul> <p>Regarding Sloth features, OpenSLO spec doesn't support all of the sloth features:</p> <ul> <li>No Prometheus labels support.</li> <li>No alerting support.</li> <li>No SLI plugins support.</li> <li>No Kubernetes support (at least until official OpenSLO CRDs are released).</li> </ul> <p>Check Examples</p> <p>Example</p> <pre><code>sloth generate -i ./examples/openslo-getting-started.yml  -o /tmp/openslo-getting-started.yml\nINFO[0000] SLI plugins loaded                            plugins=0 svc=storage.FileSLIPlugin version=v0.6.0-8-ga8f37a2\nINFO[0000] Generating from OpenSLO spec                  version=v0.6.0-8-ga8f37a2\nINFO[0000] Multiwindow-multiburn alerts generated        out=/tmp/openslo-getting-started.yml slo=my-service-sloth-slo-my-service-0 svc=generate.prometheus.Service version=v0.6.0-8-ga8f37a2\nINFO[0000] SLI recording rules generated                 out=/tmp/openslo-getting-started.yml rules=8 slo=my-service-sloth-slo-my-service-0 svc=generate.prometheus.Service version=v0.6.0-8-ga8f37a2\nINFO[0000] Metadata recording rules generated            out=/tmp/openslo-getting-started.yml rules=7 slo=my-service-sloth-slo-my-service-0 svc=generate.prometheus.Service version=v0.6.0-8-ga8f37a2\nINFO[0000] SLO alert rules generated                     out=/tmp/openslo-getting-started.yml rules=0 slo=my-service-sloth-slo-my-service-0 svc=generate.prometheus.Service version=v0.6.0-8-ga8f37a2\nINFO[0000] Prometheus rules written                      format=yaml groups=2 out=/tmp/openslo-getting-started.yml svc=storage.IOWriter version=v0.6.0-8-ga8f37a2\n</code></pre>"},{"location":"usage/cli/","title":"CLI generate","text":"<p><code>generate</code> will generate Prometheus rules in different formats based on the specs.</p> <p>This mode only needs the CLI so its very useful for GitOps, CI, scripts or as a CLI on your toolbox.</p> <p><code>generate</code> command supports multiple spec types and will detect the input spec type based on the spec, accordingly it will generate the output in different formats depending on the loaded spec:</p> <ul> <li>Default spec generates vanilla Prometheus rules.</li> <li>Kubernetes spec generates Prometheus operator based CRD Prometheus rules.</li> </ul> <p>CLI mode doesn't need CRDs</p> <p>Sloth CRD is NOT required in the cluster because the generation happens offline as a CLI. For controller/operator K8s flow, check Kubernetes controller section.</p> <p>Kubernetes without prometheus-operator</p> <p>In this case, you will need default spec to get vanilla prometheus rules and deploy as you deploy other Prometheus rules in the Kubernetes cluster (e.g. Using configmaps).</p> <p>Kubernetes specs need prometheus-operator CRDs</p> <p>Kubernetes specs generate Prometheus operator Rules CRs, this means that the CRD is required to be registered in the cluster.</p> <p>Disable optimized rules</p> <p>By default Sloth will try optimizing long time windows (e.g 30 day) by sacrificing data precision. If you want to disable this use <code>--disable-optimized-rules</code>.  </p> <p>SLO directory discovery</p> <p>If the input and the output is a directory instead of a file, Sloth will discover all SLOs recursively in a directory and output the generated files with the corresponding structure in the output.</p> <p>If you are executing Sloth per file using bash loops, changing to this method is recommended (<code>&gt;=v0.10.0</code>) because it will have a huge impact performance (e.g: CI time).</p> <p>Example</p> <pre><code>$ sloth generate -i ./examples/home-wifi.yml -o /tmp/home-wifi.yml\nINFO[0000] Generating from Prometheus spec               version=v0.1.0-43-g5715af5\nINFO[0000] Multiwindow-multiburn alerts generated        slo=home-wifi-good-wifi-client-satisfaction svc=generate.prometheus.Service version=v0.1.0-43-g5715af5\nINFO[0000] SLI recording rules generated                 rules=8 slo=home-wifi-good-wifi-client-satisfaction svc=generate.prometheus.Service version=v0.1.0-43-g5715af5\nINFO[0000] Metadata recording rules generated            rules=7 slo=home-wifi-good-wifi-client-satisfaction svc=generate.prometheus.Service version=v0.1.0-43-g5715af5\nINFO[0000] SLO alert rules generated                     rules=2 slo=home-wifi-good-wifi-client-satisfaction svc=generate.prometheus.Service version=v0.1.0-43-g5715af5\nINFO[0000] Multiwindow-multiburn alerts generated        slo=home-wifi-risk-wifi-client-satisfaction svc=generate.prometheus.Service version=v0.1.0-43-g5715af5\nINFO[0000] SLI recording rules generated                 rules=8 slo=home-wifi-risk-wifi-client-satisfaction svc=generate.prometheus.Service version=v0.1.0-43-g5715af5\nINFO[0000] Metadata recording rules generated            rules=7 slo=home-wifi-risk-wifi-client-satisfaction svc=generate.prometheus.Service version=v0.1.0-43-g5715af5\nINFO[0000] SLO alert rules generated                     rules=2 slo=home-wifi-risk-wifi-client-satisfaction svc=generate.prometheus.Service version=v0.1.0-43-g5715af5\nINFO[0000] Prometheus rules written                      format=yaml groups=6 out=/tmp/home-wifi.yml svc=storage.IOWriter version=v0.1.0-43-g5715af5\n</code></pre>"},{"location":"usage/kubernetes/","title":"Kubernetes controller","text":"<p><code>kubernetes-controller</code> command runs Sloth as a controller/operator that will react on <code>sloth.slok.dev/v1/PrometheusServiceLevel</code> CRD.</p> <p>In the controller mode, Sloth will be running listening to Kubernetes Sloth SLO CR events and generate the required prometheus-operator CR rules</p> <p>In the end, the controller mode makes the same work as the CLI however integrates better with a native Kubernetes flow.</p> <p>Sloth CRD is required</p> <pre><code>$ kubectl apply -f ./pkg/kubernetes/gen/crd/sloth.slok.dev_prometheusservicelevels.yaml\n</code></pre> <p>Prometheus Operator Rules CRD is required</p> <pre><code>$ kubectl apply -f ./test/integration/crd/prometheus-operator-crd.yaml\n</code></pre> <p>Disable optimized rules</p> <p>By default Sloth will try optimizing long time windows (e.g 30 day) by sacrificing data precision. If you want to disable this use <code>--disable-optimized-rules</code>.  </p>"},{"location":"usage/kubernetes/#deploying-in-kubernetes","title":"Deploying in Kubernetes","text":"<p>Check Kubernetes installing section</p> <p>Example</p> <pre><code># Run sloth controller.\n$ kubectl create ns monitoring\n$ kubectl apply -f ./deploy/kubernetes/raw/sloth.yaml\n\n# Deploy some SLOs.\n$ kubectl apply -f ./examples/k8s-getting-started.yml\n\n# Get CRs.\n$ kubectl -n monitoring get slos\nNAME                   SERVICE           DESIRED SLOS   READY SLOS   GEN OK   GEN AGE   AGE\nsloth-slo-my-se rvice   myservice         1              1            true     27s       27s\n\n$ kubectl -n monitoring get prometheusrules\nNAME                  AGE\nsloth-slo-my-service  38s\n</code></pre>"},{"location":"usage/sli-plugins/","title":"SLI plugins","text":"<p>SLI plugins are small Go plugins (using Yaegi) that can be loaded on Sloth start.</p> <p>These plugins can be referenced as an SLI on the SLO specs and will return a raw SLI type.</p>"},{"location":"usage/sli-plugins/#common-plugins","title":"Common plugins","text":"<p>Sloth maintains a library with common SLI plugins that can be used on your SLOs or used as examples to develop your own ones.</p> <ul> <li>Check plugins source code here.</li> <li>Check the documentation here.</li> </ul>"},{"location":"usage/sli-plugins/#developing-plugins","title":"Developing plugins","text":""},{"location":"usage/sli-plugins/#prometheusv1","title":"<code>prometheus/v1</code>","text":"<p>Developing a <code>prometheus/v1</code> SLI plugin is very easy, however you need to meet some requirements:</p> <ul> <li>The plugin version used as a global called <code>SLIPluginVersion</code>.</li> <li>A plugin ID global called <code>SLIPluginID</code>.</li> <li>A Plugin logic function called <code>SLIPlugin</code>.</li> <li>The plugin must be in a single file named <code>plugin.go</code>.</li> <li>Plugins only can use the Go standard library (<code>reflect</code> and <code>unsafe</code> packages can't be used).</li> <li>Plugin received options are a <code>map[string]string</code> to avoid <code>interface{}</code> problems on dynamic execution code, the conversion to specific types are responsibility of the plugin.</li> <li>Plugins don't depend on go modules, GOPATH or similar (thanks to the previous requirements).</li> </ul> <p>Sloth knows how to autodiscover plugins giving a path (<code>--plugins-path</code>), and will load all the discovered ones.</p> <p>A very simple example:</p> <p>from <code>plugins/x/y/plugin.go</code></p> <pre><code>package testplugin\n\nimport \"context\"\n\nconst (\n  SLIPluginVersion = \"prometheus/v1\"\n  SLIPluginID      = \"test_plugin\"\n)\n\nfunc SLIPlugin(ctx context.Context, meta, labels, options map[string]string) (string, error) {\n  return \"rate(my_raw_error_ratio_query{}[{{.window}}])\", nil\n}\n</code></pre> <p>Used in SLO spec:</p> <pre><code>version: \"prometheus/v1\"\nservice: \"myservice\"\nslos:\n  - name: \"some-slo\"\n    objective: 99.9\n    sli:\n      plugin:\n        id: \"test_plugin\"\n        options:\n          opt1: \"something\"\n          opt2: \"something\"\n    alerting:\n#...\n</code></pre> <p>On spec load, Sloth will execute the referenced plugins with the options and use the result as a Raw SLI type, the one that returns the error ratio query.</p>"},{"location":"usage/sli-plugins/#why-should-i-use-plugins","title":"Why should I use plugins?","text":"<p>By default you shouldn't unless you have scenarios where they can simplify, add security or improve the SLO adoption on the team/company. Some examples:</p> <ul> <li>SLI custom validation (parameters, queries...).</li> <li>Company wide precreated SLIs for common used libraries.</li> <li>Complex Prometheus query SLIs.</li> <li>Precreated SLIs for the team or company that normally everyones uses on the SLOs.</li> <li>OSS SLI plugins that come with the apps, frameworks or libraries (e.g Kubernetes apiserver, http framework X...).</li> <li>The company or the team could have a repository with all the shared plugins and everyone could use them and contribute with new ones.</li> <li>Automation power when templates are not enough.</li> </ul>"},{"location":"usage/slo-period-windows/","title":"SLO period windows","text":"<p>Sloth tries simplifying SLO generation and maintainability, thats why uses safe defaults and removes a lot of knobs/settings. If you don't need custom SLO period windows is encouraged that you use Sloth's 30 day default one.</p>"},{"location":"usage/slo-period-windows/#default-slo-period-catalog","title":"Default SLO period catalog","text":"<p>Sloth can load a catalog of SLO period windows when it starts. By default Sloth comes with some well known SLO period windows loaded:</p> <ul> <li>30 day: SRE workbook month SLO period.</li> <li>28 day: Similar to the 30 day but in 4 weeks format.</li> </ul>"},{"location":"usage/slo-period-windows/#custom-slo-period-catalog","title":"Custom SLO period catalog","text":"<p>In case you want to fully customize your SLO period catalog (7 day period, adjust 30 day period alerting windows...). You can use <code>AlertWindows/v1</code> spec.</p> <p>Sloth will discover all SLO period window specs, load them on the SLO period catalog so the can be use them, by passing <code>--slo-period-windows-path</code>.</p> <p>Some spec examples:</p> 7 dayCustom 30 day <pre><code>apiVersion: sloth.slok.dev/v1\nkind: AlertWindows\nspec:\n  sloPeriod: 7d\n  page:\n    quick:\n      errorBudgetPercent: 8\n      shortWindow: 5m\n      longWindow: 1h\n    slow:\n      errorBudgetPercent: 12.5\n      shortWindow: 30m\n      longWindow: 6h\n  ticket:\n    quick:\n      errorBudgetPercent: 20\n      shortWindow: 2h\n      longWindow: 1d\n    slow:\n      errorBudgetPercent: 42\n      shortWindow: 6h\n      longWindow: 3d\n</code></pre> <pre><code>apiVersion: sloth.slok.dev/v1\nkind: AlertWindows\nspec:\n  sloPeriod: 30d\n  page:\n    quick:\n      errorBudgetPercent: 1\n      shortWindow: 2m\n      longWindow: 30m\n    slow:\n      errorBudgetPercent: 2\n      shortWindow: 15m\n      longWindow: 3h\n  ticket:\n    quick:\n      errorBudgetPercent: 5\n      shortWindow: 1h\n      longWindow: 12h\n    slow:\n      errorBudgetPercent: 5\n      shortWindow: 3h\n      longWindow: 36h\n</code></pre> <p>Multiple Sloth instances with different SLO period windows catalogs and defaults</p> <p>You can have multiple Sloth instances with different default windows (with same or different slo period catalog) so you can have different behavior depending on the SLOs.</p> <p>For example in Kubernetes you can run Sloth using label selectors to include/exclude SLOs that will process. E.g:</p> <ul> <li><code>--label-selector=slo-window=7d</code></li> <li><code>--label-selector=slo-window!=7d</code></li> <li><code>--label-selector=environment=prod,tenant=5</code></li> </ul>"},{"location":"usage/slo-period-windows/#selecting-default-slo-period","title":"Selecting default SLO period","text":"<p>Kubernetes and raw specs can's select an SLO period using the spec (because of simplicity), so, sloths fallbacks to its default slo period (<code>30d</code>). However, this can be changed using <code>--default-slo-period</code>.</p> <p>Some examples:</p> <ul> <li>Use default catalog and default 30 day (this would be the same as not specifying anything): <code>--default-slo-period=30d</code>.</li> <li>Use default catalog with 28 day: <code>--default-slo-period=28d</code>.</li> <li>Use custom catalog with 7 day: <code>--default-slo-period=7d --slo-period-windows-path=/my/custom/slo/catalog</code>.</li> <li>Use custom catalog with 45 day: <code>--default-slo-period=45d --slo-period-windows-path=/my/custom/slo/catalog</code>.</li> </ul>"},{"location":"usage/slo-plugins/","title":"SLO plugins","text":"<p>Advanced usage</p> <p>SLO plugins require an advanced usage and knowledge of Sloth SLO generation, they are powerful but complex, if you don't need them, and the default Sloth usage meets your needs, don't use them.</p> <p>Version</p> <p>SLO plugins are available on Sloth <code>&gt;=v0.13.0</code>.</p> <p>Supported specs</p> <p>SLO plugins are supported by regular and k8s Sloth specs.</p> <p>Ideas for new SLO plugins?</p> <p>If you have any idea that would be cool to support on the community, open a discussion thread</p>"},{"location":"usage/slo-plugins/#introduction","title":"Introduction","text":"<p>SLO plugins are an extensibility mechanism in Sloth that allow you to customize the SLO rules generation process. They let you add, modify, or extend the behavior of Sloth's core functionality without modifying Sloth itself. In other words, you can change or extend all the Sloth SLO rule generation logic to adapt to your needs.</p> <p>While SLI plugins allow you to define how SLI queries will be (e.g: service latency, availability...), SLO plugins operate on the whole SLO specification. They can mutate the whole Prometheus generation process like injecting metadata, changing rule intervals, generate new alerts, or even mutate the SLO configuration programmatically.</p>"},{"location":"usage/slo-plugins/#plugin-chaining","title":"Plugin chaining","text":"<p>SLO plugins work similar to a processor chain, if you are familiar with HTTP middlewares, this is similar, the SLO will pass over and over though a series of chained plugins and these plugins can change the result of the SLO. Take into account that this is very powerful, as you can add, mutate or even override results generated from previous executed plugins.</p> <pre><code>flowchart LR\n    Request[SLO generation request]\n    Result[Prom rules result]\n    Chain[Sloth logic as a series of plugin chain]\n    Request --&gt; Chain\n    Chain --&gt; Result</code></pre> <p>SLO plugins form a processor-like chain, similar to HTTP middlewares, where each plugin can modify the SLO rules generation result as it passes through. This mechanism is powerful: plugins can add, mutate, or override data from earlier stages in the chain.</p> <p>The plugin chain is composed of three layers, applied in this order:</p> <ul> <li>Default plugins: These are the plugins that Sloth will execute by default (Sloth SLO validation and rule generation core logic).</li> <li>SLO group level plugins: These are the plugins declared at the Service level that groups N SLOs</li> <li>SLO level plugins: These are the plugins declared at the isolated SLO level.</li> </ul> <p>The SLO plugin chain will be generated by aggregating plugins in order: <code>Default plugins</code> + <code>SLO group plugins</code> + <code>SLO plugins</code>:</p> <pre><code>flowchart LR\n    Req[SLO]\n    Res[Prom rules]\n\n    Req --&gt; Chain\n    subgraph Chain[Plugin chain]\n        direction LR\n        Def[Default]\n        SG[SLO group]\n        S[SLO]\n        Def --&gt; SG\n        SG --&gt; S\n    end\n    Chain --&gt; Res</code></pre> <p>Custom order</p> <p>Use Priority setting on the SLO plugin declaration spec to change the chain order. For example to be able to execute a custom validation before the default validation Sloth plugin is executed.</p>"},{"location":"usage/slo-plugins/#priority","title":"Priority","text":"<p>A plugin without priority will be <code>priority: 0</code>. Default Sloth plugins, run at priority <code>0</code>. When 2 plugins have the same priority, declaration order will be maintained.</p> <p>If you want a plugin be executed before other, it should have a lesser priority number. This means that a plugin with priority <code>10</code> will be executed before a plugin of priority <code>20</code>.</p> <p>There is no restriction on the priority numbers, and can be negative. This means that if you want a plugin to be executed before default plugins, it should have a priority <code>&lt;0</code>, and if you want to execute a plugin after the default plugins, should be <code>&gt;=0</code>.</p> <p>Round numbers</p> <p>Use round numbers, that makes it easy to reason about. Examples: <code>1000</code>, <code>3000</code>, <code>2500</code>, <code>-100</code>, <code>-5000</code>, <code>-9999999999</code>...</p>"},{"location":"usage/slo-plugins/#plugin-declaration-spec","title":"Plugin declaration spec","text":"<p>A Plugin declaration is composed of:</p> <ul> <li>ID: The unique ID of the plugin loaded by Sloth.</li> <li>Configuration: The configuration that will be given to the plugin when it's created.</li> <li>Priority: The priority of the plugin, by default <code>0</code>.</li> </ul> <p>An SLO plugin declaration block:</p> <pre><code>id: \"sloth.dev/core/debug/v1\"\npriority: 9999999\nconfig:\n  msg: \"Plugin 99\"\n</code></pre> <p>As stated before, the plugins can be declared at different levels (SLO group and SLO). Lets see an example:</p> <pre><code>version: \"prometheus/v1\"\nservice: \"myservice\"\n#...\nslo_plugins:\n  chain:\n    - id: \"sloth.dev/core/debug/v1\"\n      priority: 1000\n      config:\n        msg: \"Plugin 3\"\n\nslos:\n  - name: \"slo1\"\n    plugins:\n      chain:\n        - id: \"sloth.dev/core/debug/v1\"\n          config:\n            msg: \"Plugin 2\"\n        - id: \"sloth.dev/core/debug/v1\"\n          priority: -999999\n          config:\n            msg: \"Plugin 1\"\n    #...\n    - name: \"slo2\"\n    plugins:\n      chain:\n        - id: \"sloth.dev/core/debug/v1\"\n          config:\n            msg: \"Plugin 1\"\n#...\n</code></pre> <p>This SLO plugin declaration will execute in order and print the debug message:</p> <ul> <li><code>slo1</code>: <code>Plugin 1</code> -&gt; (default plugins) -&gt; <code>Plugin 2</code> -&gt; <code>Plugin 3</code>.</li> <li><code>slo2</code>: (default plugins) -&gt; <code>Plugin 1</code> -&gt; <code>Plugin 3</code>.</li> </ul> <p>One liner config</p> <p>YAML supports also one liners by using <code>{}</code> on maps/objects. So you can declare plugins with <code>config</code> as one liners, this can be something handy when there are big configurations or lots of plugins. Example:</p> <p>From this:</p> <pre><code>- id: \"sloth.dev/core/debug/v1\"\n  config:\n    msg: \"Plugin 2\"\n- id: \"sloth.dev/core/debug/v1\"\n  priority: -999999\n  config:\n    msg: \"Plugin 1\"\n</code></pre> <p>To this example:</p> <pre><code>#\u00a0One liner on the config.\n- id: \"sloth.dev/core/debug/v1\"\n  config: {msg: \"Plugin 2\"}\n# One liner on all the plugin.\n- {id: \"sloth.dev/core/debug/v1\", priority: -999999, config: {msg: \"Plugin 1\"}}\n</code></pre>"},{"location":"usage/slo-plugins/#built-in-plugins","title":"Built-in plugins","text":"<ul> <li><code>sloth.dev/core/alert_rules_v1</code>: Default Sloth Prometheus alert rules generation.</li> <li><code>sloth.dev/core/debug_v1</code>: A debugging plugin that can be used to show data received in the plugin.</li> <li><code>sloth.dev/core/metadata_rules_v1</code>: Default Sloth Prometheus metadata recording rules generation.</li> <li><code>sloth.dev/core/noop_v1</code>: A noop plugin.</li> <li><code>sloth.dev/core/sli_rules_v1</code>: Default Sloth Prometheus SLI recording rules generation.</li> <li><code>sloth.dev/core/validate_v1</code>: Default Sloth validation of SLOs.</li> </ul>"},{"location":"usage/slo-plugins/#loading-plugins-in-sloth","title":"Loading plugins in Sloth","text":"<p>All plugins (SLI and SLO) in sloth are discovered the same way, even with the same flag. Use the flag <code>--plugins-path</code> or short <code>-p</code>. This flag can be repeated to give N paths. The directories given will be used to search for plugins recursively.</p> <p>Example:</p> <pre><code>sloth kubernetes-controller  -p ./plugins/ -p ../ext-plugins\nINFO[0000] Plugins loaded                                sli-plugins=15 slo-plugins=24 version=dev window=30d\n</code></pre>"},{"location":"usage/slo-plugins/#developing-plugins","title":"Developing plugins","text":"<p>SLO plugins are Go plugins loaded and executed using Yaegi engine.</p> <p>To ensure portability and stability, plugins must follow a few structural requirements. However, the most important aspect is how a plugin is loaded, instantiated, and executed. At the core of this is the <code>slov1.Plugin</code> interface, which all plugins must implement.</p> <p>When Sloth loads a plugin, it invokes a factory method named <code>NewPlugin</code>. This method receives two arguments:</p> <ul> <li>App utilities: Provided by Sloth to give access to helpful features like logging.</li> <li>Plugin configuration: Passed as a <code>json.RawMessage</code>, is the configuration the user configured when declaring the plugin.</li> </ul> <p>Sloth SLO plugins work at single SLO level, meaning that plugins will be call one SLO at a time.</p> <p>Once Sloth has instantiated your plugin, it adds it to the plugin execution chain. When it is your plugin\u2019s turn to run, Sloth will call the plugin\u2019s <code>ProcessSLO</code> method with three arguments:</p> <ul> <li>Context: The Go <code>context.Context</code> for managing cancellation, deadlines, context information share...</li> <li>Request: Contains the full input SLO specification model and all associated metadata.</li> <li>Result: Represents the output that Sloth will generate for the given SLO.</li> </ul> <p>Both Request and Result are passed as pointers, so your plugin can freely mutate them. In most cases, plugins only modify the Result, but modifying the Request is also allowed when needed. Finally the plugins can return an error if something went wrong that will make all the plugin chain fail.</p> <p>Mutating Request</p> <p>Take into account that mutating Request object can have side effects, is not recommended but its possible.</p> <p><code>json.RawMessage</code> as configuration</p> <p>Plugin configuration in Sloth is schemaless by design. Since Go is a statically typed language, there is no perfect built-in way to handle dynamic types, especially when different plugins may expect different configuration formats.</p> <p>To solve this, Sloth uses <code>json.RawMessage</code> for plugin configuration. This gives full control to the plugin itself to define, parse, and validate its own config.</p> <p>Go\u2019s standard library provides powerful JSON tooling, and JSON supports rich data types, including common ones like <code>string</code>, <code>int</code>, and more complex ones like <code>time.Duration</code>. By using <code>json.RawMessage</code>, Sloth hands off the responsibility of parsing the config to the plugin, allowing it to unmarshal into any custom struct it needs.</p> <p>In most cases, this is as simple as calling <code>json.Unmarshal</code>.</p> <p>This approach keeps the system flexible, safe, and extensible, even as plugins evolve independently.</p>"},{"location":"usage/slo-plugins/#requirements","title":"Requirements","text":"<p>SLO plugins have a strict set of requirements to ensure they remain simple, safe, and portable across environments:</p> <ul> <li>Must define a global constant <code>PluginVersion</code> specifying the plugin version.</li> <li>Must define a global constant <code>PluginID</code> to uniquely identify the plugin.</li> <li>Must implement a <code>NewPlugin</code> function, which acts as a factory to create a new plugin instance of <code>Plugin</code> interface.</li> <li>The entire plugin implementation must reside in a single file named <code>plugin.go</code>.</li> <li>Only the Go standard library is allowed, usage of <code>reflect</code> and <code>unsafe</code> is strictly prohibited.</li> <li>External packages must come from the approved list.</li> <li>Plugin configuration is passed as a <code>json.RawMessage</code>.</li> </ul>"},{"location":"usage/slo-plugins/#available-external-go-packages","title":"Available external Go packages","text":"<p>Apart from the Go standard library, Sloth SLO plugins have a very restricted set of external packages that can be imported. This is the list of current supported libraries</p> <p>Requests for new external packages</p> <p>If there is a common use case that can meet your needs by importing an external library, open a discussion thread on Sloth so we can discuss it and eventually add that package so SLO plugins can import it.</p> <ul> <li>Prometheus<ul> <li><code>github.com/prometheus/common/model</code></li> <li><code>github.com/prometheus/prometheus/model/rulefmt</code></li> <li><code>github.com/prometheus/prometheus/promql/parser</code></li> </ul> </li> <li>Sloth<ul> <li><code>github.com/slok/sloth/pkg/prometheus/plugin/slo/v1</code></li> <li><code>github.com/slok/sloth/pkg/common/conventions</code></li> <li><code>github.com/slok/sloth/pkg/common/model</code></li> <li><code>github.com/slok/sloth/pkg/common/utils/data</code></li> <li><code>github.com/slok/sloth/pkg/common/utils/prometheus</code></li> </ul> </li> </ul>"},{"location":"usage/slo-plugins/#testing","title":"Testing","text":"<p>For testing, plugins can be run like any regular Go application. However, it's highly recommended to use the Sloth SLO plugin test utilities, as they simulate the real plugin execution environment used by Sloth.</p> <p>Running tests with these utilities helps catch issues early, such as Yaegi runtime errors or usage of unsupported external packages, making the development cycle faster and more reliable.</p> <p>Check the package here.</p> <p>All plugin examples come with their tests.</p>"},{"location":"usage/slo-plugins/#examples","title":"Examples","text":"<ul> <li>Built-in core plugins.</li> <li>Other examples</li> </ul>"},{"location":"usage/slo-plugins/#use-cases-and-ideas","title":"Use cases and ideas","text":"<ul> <li>Add extra metadata labels (based on config, from SLO spec, ).</li> <li>Check a service catalog and download information from it to populate labels.</li> <li>Set intervals on the generated rules.</li> <li>Optimize queries of specific rules.</li> <li>Rewrite the full SLI rules generation logic for specific use cases.</li> <li>Custom validation of other Prometheus compatible systems.</li> <li>Create SLO alerts that are only triggered at specific hours, like working hours.</li> <li>suppress alerts based on logic (e.g: &lt;99.5 SLOs don't have page alert).</li> <li>Round SLO object numbers to standards( e.g: <code>99.4567%</code> -&gt; <code>99.5%</code>).</li> <li>Change labels without the need to use Prom func <code>relabel</code>.</li> <li>Any custom logic your company needs for specific company use cases on queries.</li> <li>...</li> </ul>"},{"location":"usage/slo-validation/","title":"SLO validation","text":"<p>Sloth validates the spec on generation, however, on specific steps of the SLO generation process, we only want to validate a group of SLOs.</p> <p>For this purpose Sloth comes with a helpful command called <code>validate</code>. It will discover all the specs recursively and apply the same generation process as <code>generate</code> (including plugins, options...) but discarding the result.</p> <p>Example that validates all SLOs in a directory (including subdirectories) and excludes all in spec files that match <code>_gen</code> in the spec path.</p> <p>Example</p> <pre><code>$ sloth validate --input ./examples --sli-plugins-path ./examples/plugins --fs-exclude _gen\n\nINFO[0000] SLI plugins loaded                            plugins=1 version=dev\nINFO[0000] Validation succeeded                          slo-specs=13 version=dev\n</code></pre> <p>This command is very helpful on Gitops and CI pipelines to have a fast feedback loop, independently of the process you are using for generating the SLOs (Kubernetes controller or CLI).</p>"}]}